{"version":3,"sources":["src/assets/dist/esm/kup-graphic-cell.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, h } from './chunk-1851c479.js';\n\nfunction getColorFromString(rgb) {\r\n    const rIndex = rgb.indexOf('R');\r\n    const gIndex = rgb.indexOf('G');\r\n    const bIndex = rgb.indexOf('B');\r\n    if (rIndex < 0 || gIndex < 0 || bIndex < 0) {\r\n        return;\r\n    }\r\n    const r = rgb.substring(rIndex + 1, rIndex + 4);\r\n    const g = rgb.substring(gIndex + 1, gIndex + 4);\r\n    const b = rgb.substring(bIndex + 1, bIndex + 4);\r\n    try {\r\n        return new Color(parseInt(r), parseInt(g), parseInt(b));\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n    }\r\n    return null;\r\n}\n\nclass GraphicElement {\r\n    constructor() {\r\n        this.width = 100.0;\r\n        this.height = 100.0;\r\n        this.color = null;\r\n        this.shape = 'bar';\r\n    }\r\n    init(markers) {\r\n        markers.forEach((marker) => {\r\n            if (marker.toUpperCase().startsWith('HEIGHT;')) {\r\n                this.initHeight(marker);\r\n            }\r\n            else if (marker.toUpperCase().startsWith('SHAPE;')) {\r\n                this.initShape(marker);\r\n            }\r\n            else if (marker.toUpperCase().startsWith('BCOLOR;')) ;\r\n            else {\r\n                this.initColor(marker);\r\n            }\r\n        });\r\n    }\r\n    initColor(rgb) {\r\n        if (rgb.length > 11 && this.isValidColor(rgb)) {\r\n            this.color = getColorFromString(rgb.substring(0, 12));\r\n            try {\r\n                this.width = parseFloat(rgb.substring(13).replace(',', '.'));\r\n            }\r\n            catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n        else if (rgb.startsWith('*NONE')) {\r\n            try {\r\n                this.width = parseFloat(rgb.substring(6).replace(',', '.'));\r\n            }\r\n            catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n    }\r\n    isTrasparent() {\r\n        return this.color === null;\r\n    }\r\n    initHeight(height) {\r\n        if (height) {\r\n            const toBeParsed = height\r\n                .substring('HEIGHT;'.length)\r\n                .replace(',', '.');\r\n            try {\r\n                this.height = parseFloat(toBeParsed);\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n    }\r\n    initShape(shape) {\r\n        shape = shape.substring('SHAPE;'.length);\r\n        const vLastSemicolonIndex = shape.indexOf(';');\r\n        let vShapeTypeString = shape;\r\n        if (vLastSemicolonIndex > -1) {\r\n            vShapeTypeString = shape.substring(0, vLastSemicolonIndex);\r\n            try {\r\n                this.width = parseFloat(shape.substring(vLastSemicolonIndex + 1).replace(',', '.'));\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        switch (vShapeTypeString.toLocaleLowerCase()) {\r\n            case 'circle':\r\n                this.shape = 'circle';\r\n                break;\r\n            case 'tril':\r\n                this.shape = 'tril';\r\n                break;\r\n            case 'trir':\r\n                this.shape = 'trir';\r\n                break;\r\n        }\r\n    }\r\n    isValidColor(color) {\r\n        if (!color) {\r\n            return false;\r\n        }\r\n        color = color.trim();\r\n        const vRgb = [];\r\n        let vError = false;\r\n        let vColorKey = null;\r\n        // red\r\n        let vIndex = color.indexOf('R');\r\n        if (vIndex > -1) {\r\n            vColorKey = color.substring(vIndex + 1, vIndex + 4);\r\n            vRgb[0] = parseInt(vColorKey);\r\n            if (isNaN(vRgb[0])) {\r\n                vError = true;\r\n            }\r\n        }\r\n        // green\r\n        vIndex = color.indexOf('G');\r\n        if (vIndex > -1) {\r\n            vColorKey = color.substring(vIndex + 1, vIndex + 4);\r\n            vRgb[1] = parseInt(vColorKey);\r\n            if (isNaN(vRgb[1])) {\r\n                vError = true;\r\n            }\r\n        }\r\n        // blue\r\n        vIndex = color.indexOf('B');\r\n        if (vIndex > -1) {\r\n            vColorKey = color.substring(vIndex + 1, vIndex + 4);\r\n            vRgb[2] = parseInt(vColorKey);\r\n            if (isNaN(vRgb[2])) {\r\n                vError = true;\r\n            }\r\n        }\r\n        if (vError) {\r\n            const vIndexR = color.indexOf('R');\r\n            const vIndexG = color.indexOf('G');\r\n            const vIndexB = color.indexOf('B');\r\n            // check R\r\n            vColorKey = color.substring(vIndexR + 1, vIndexG);\r\n            vRgb[0] = parseInt(vColorKey);\r\n            if (isNaN(vRgb[0])) {\r\n                vError = true;\r\n            }\r\n            // Check G\r\n            vColorKey = color.substring(vIndexG + 1, vIndexB);\r\n            vRgb[1] = parseInt(vColorKey);\r\n            if (isNaN(vRgb[1])) {\r\n                vError = true;\r\n            }\r\n            // Check B\r\n            vColorKey = color.substring(vIndexB + 1);\r\n            vRgb[2] = parseInt(vColorKey);\r\n            if (isNaN(vRgb[2])) {\r\n                vError = true;\r\n            }\r\n            if (vError) {\r\n                return false;\r\n            }\r\n        }\r\n        // Check if all values are between 0 and 255\r\n        if (vRgb[0] < 0 ||\r\n            vRgb[0] > 255 ||\r\n            vRgb[1] < 0 ||\r\n            vRgb[1] > 255 ||\r\n            vRgb[2] < 0 ||\r\n            vRgb[2] > 255) {\r\n            return false;\r\n        }\r\n        // All good\r\n        return true;\r\n    }\r\n    getHeight() {\r\n        return this.height;\r\n    }\r\n    getWidth() {\r\n        return this.width;\r\n    }\r\n    getShape() {\r\n        return this.shape;\r\n    }\r\n    getColor() {\r\n        return this.color;\r\n    }\r\n}\r\nclass Color {\r\n    constructor(r, g, b) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n    }\r\n    toString() {\r\n        return `rgb(${this.r},${this.g},${this.b})`;\r\n    }\r\n}\n\nclass KupGraphicCell {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.height = 30;\n        this.width = 300;\n        this.graphic_element_marker_splitter = '\\\\\\\\';\n        this.graphic_element_splitter = '\\\\\\\\AND\\\\\\\\';\n        this.background_color = 'BCOLOR;R255G000B000';\n        this.default_color = new Color(0, 0, 0);\n    }\n    onValueChange() {\n        this.draw();\n    }\n    // lifecycle\n    componentDidLoad() {\n        this.draw();\n    }\n    // private methods\n    draw() {\n        if (!this.value) {\n            return;\n        }\n        if (this.canvas.getContext) {\n            this.ctx = this.canvas.getContext('2d');\n            this.drawGraphicCell();\n        }\n    }\n    drawGraphicCell() {\n        const vGraphicElementDefinitionArr = this.value.split(this.graphic_element_splitter);\n        vGraphicElementDefinitionArr.forEach((graphicElem, index) => {\n            let vShapeMarker = 'SHAPE;BAR';\n            let vBGColorMarker = this.background_color;\n            let vHeightPctMarker = 'HEIGHT;100';\n            const vMarkersArray = graphicElem.split(this.graphic_element_marker_splitter);\n            const shapesArray = [];\n            const vSeparatorsList = [];\n            vMarkersArray.forEach((vString) => {\n                if (this.isShapeMarker(vString)) {\n                    vShapeMarker = vString;\n                }\n                else if (this.isBgColorMarker(vString)) {\n                    vBGColorMarker = vString;\n                }\n                else if (this.isHeightMarker(vString)) {\n                    vHeightPctMarker = vString;\n                }\n                else if (this.isDecoratorMarker(vString)) {\n                    vSeparatorsList.push(vString);\n                }\n                else {\n                    shapesArray.push(vString);\n                }\n            });\n            const vGraphicElementArray = shapesArray.map((shape) => {\n                const elem = new GraphicElement();\n                elem.init([\n                    vShapeMarker,\n                    vBGColorMarker,\n                    vHeightPctMarker,\n                    shape,\n                ]);\n                return elem;\n            });\n            // first element -> setting background\n            if (index === 0 && vBGColorMarker !== this.background_color) {\n                const bgColor = getColorFromString(vBGColorMarker.substring('BCOLOR;'.length));\n                this.drawRect(0, 0, this.canvas.width, this.canvas.height, bgColor);\n            }\n            let startX = 0;\n            vGraphicElementArray.forEach((elem) => {\n                switch (elem.getShape()) {\n                    case 'circle':\n                        startX = this.getNewStarXFromCircle(startX, elem);\n                        break;\n                    case 'tril':\n                        startX = this.getNewStarXFromTril(startX, elem);\n                        break;\n                    case 'trir':\n                        startX = this.getNewStarXFromTrir(startX, elem);\n                        break;\n                    default:\n                        // bar\n                        startX = this.getNewStarXFromBar(startX, elem);\n                        break;\n                }\n            });\n            vSeparatorsList.forEach((sep) => {\n                if (sep.startsWith('SEP') || sep.startsWith('DIV')) {\n                    this.drawSeparator(sep);\n                }\n                else if (sep.startsWith('ARW')) {\n                    this.drawArrow(sep);\n                }\n                else if (sep.startsWith('GRID')) {\n                    this.drawGrid(sep);\n                }\n            });\n        });\n    }\n    isShapeMarker(value) {\n        return value && value.toUpperCase().startsWith('SHAPE;');\n    }\n    isBgColorMarker(value) {\n        return value && value.toUpperCase().startsWith('BCOLOR;');\n    }\n    isHeightMarker(value) {\n        return value && value.toUpperCase().startsWith('HEIGHT;');\n    }\n    isDecoratorMarker(value) {\n        return (value &&\n            (value.toUpperCase().startsWith('SEP;') ||\n                value.toUpperCase().startsWith('DIV;') ||\n                value.toUpperCase().startsWith('ARW;') ||\n                value.toUpperCase().startsWith('GRID;')));\n    }\n    getDim(dimPixel, dimPerc) {\n        return Math.floor((dimPixel / 100) * dimPerc);\n    }\n    getNewStarXFromBar(startX, elem) {\n        const elemWidth = this.getDim(this.canvas.width, elem.getWidth());\n        const elemHeight = this.getDim(this.canvas.height, elem.getHeight());\n        const y = this.canvas.height - elemHeight;\n        if (!elem.isTrasparent()) {\n            this.drawRect(startX, y, elemWidth, elemHeight, elem.getColor());\n        }\n        return elemWidth;\n    }\n    getNewStarXFromCircle(startX, circle) {\n        const newStartX = this.getDim(this.canvas.width, circle.getWidth());\n        const x = (startX + newStartX) / 2;\n        if (!circle.isTrasparent()) {\n            this.drawArc(x, this.canvas.height / 2, circle.getColor());\n        }\n        return newStartX;\n    }\n    getNewStarXFromTril(startX, triLeft) {\n        const newStartX = this.getDim(this.canvas.width, triLeft.getWidth());\n        if (!triLeft.isTrasparent()) {\n            this.drawTri(newStartX, 0, startX, this.canvas.height / 2, triLeft.getColor());\n        }\n        return newStartX;\n    }\n    getNewStarXFromTrir(startX, triRight) {\n        const newStartX = this.getDim(this.canvas.width, triRight.getWidth());\n        if (!triRight.isTrasparent()) {\n            this.drawTri(startX, 0, newStartX, this.canvas.height / 2, triRight.getColor());\n        }\n        return newStartX;\n    }\n    drawArc(x, radius, color) {\n        this.ctx.fillStyle = color.toString();\n        this.ctx.beginPath();\n        this.ctx.arc(x, radius, radius, 0, 2 * Math.PI, true);\n        this.ctx.fill();\n    }\n    drawRect(x, y, width, height, color) {\n        this.ctx.fillStyle = color.toString();\n        this.ctx.fillRect(x, y, width, height);\n    }\n    drawTri(x1, y1, x2, y2, color) {\n        this.ctx.fillStyle = color.toString();\n        this.ctx.beginPath();\n        this.ctx.moveTo(x1, y1);\n        this.ctx.lineTo(x2, y2);\n        this.ctx.lineTo(x1, this.canvas.height);\n        this.ctx.fill();\n    }\n    drawArrow(sep) {\n        let vPart = sep.substring('ARW;'.length);\n        if (vPart.indexOf(',') > -1) {\n            vPart = vPart.replace(',', '.');\n        }\n        this.ctx.fillStyle = this.default_color.toString();\n        const startX = this.getDim(this.canvas.width, parseFloat(vPart));\n        const height = this.canvas.height;\n        const arrSpan = Math.floor(height / 3);\n        const arrSpanHalf = arrSpan / 2;\n        this.ctx.beginPath();\n        this.ctx.moveTo(startX, 0);\n        this.ctx.lineTo(startX - arrSpan, height / 2);\n        this.ctx.lineTo(startX - arrSpanHalf, height / 2);\n        this.ctx.lineTo(startX - arrSpanHalf, height);\n        this.ctx.lineTo(startX + arrSpanHalf, height);\n        this.ctx.lineTo(startX + arrSpanHalf, height / 2);\n        this.ctx.lineTo(startX + arrSpan, height / 2);\n        this.ctx.fill();\n    }\n    drawGrid(sep) {\n        let vPart = sep.substring('GRID;'.length);\n        if (vPart.indexOf(',') > -1) {\n            vPart = vPart.replace(',', '.');\n        }\n        const vTickNum = parseInt(vPart);\n        const vTickDist = this.canvas.width / vTickNum;\n        const tickH = this.canvas.height / 5;\n        const y = this.canvas.height - tickH;\n        const tickW = 1;\n        for (let i = vTickDist; i < this.canvas.width; i = i + vTickDist) {\n            this.drawRect(i, y, tickW, tickH, this.default_color);\n        }\n    }\n    drawSeparator(sep) {\n        const vSeparatorPart = sep.substring('SEP;'.length).split(';');\n        let vColor = 'R000G000B000';\n        let vThickness = 2;\n        let vPositionPart = vSeparatorPart[0];\n        if (vSeparatorPart.length > 1) {\n            vColor = vSeparatorPart[1];\n        }\n        if (vSeparatorPart.length > 2) {\n            vThickness = parseInt(vSeparatorPart[2]);\n        }\n        if (vPositionPart.indexOf(',') > -1) {\n            vPositionPart = vPositionPart.replace(',', '.');\n        }\n        const x = this.getDim(this.canvas.width, parseFloat(vPositionPart));\n        this.drawRect(x, 0, vThickness, this.canvas.height, getColorFromString(vColor));\n    }\n    render() {\n        return (h(\"canvas\", { ref: (el) => (this.canvas = el), height: this.height, width: this.width }, this.value));\n    }\n    static get watchers() { return {\n        \"value\": [\"onValueChange\"]\n    }; }\n}\n\nexport { KupGraphicCell as kup_graphic_cell };\n"],"sourceRoot":"webpack:///"}