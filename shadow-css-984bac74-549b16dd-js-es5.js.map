{"version":3,"sources":["src/assets/dist/esm/legacy/shadow-css-984bac74-549b16dd.js","src/assets/dist/esm/shadow-css-984bac74-549b16dd.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nfunction scopeCss(cssText, scopeId, commentOriginalSelector) {\n    var sc = new ShadowCss();\n    return sc.shimCssText(cssText, scopeId, scopeId + '-h', scopeId + '-s', commentOriginalSelector);\n}\nvar ShadowCss = /** @class */ (function () {\n    function ShadowCss() {\n        this.strictStyling = true;\n    }\n    ShadowCss.prototype.shimCssText = function (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n        if (hostScopeId === void 0) { hostScopeId = ''; }\n        if (slotScopeId === void 0) { slotScopeId = ''; }\n        if (commentOriginalSelector === void 0) { commentOriginalSelector = false; }\n        var commentsWithHash = extractCommentsWithHash(cssText);\n        cssText = stripComments(cssText);\n        var orgSelectors = [];\n        if (commentOriginalSelector) {\n            var processCommentedSelector_1 = function (rule) {\n                var placeholder = \"/*!@___\" + orgSelectors.length + \"___*/\";\n                var comment = \"/*!@\" + rule.selector + \"*/\";\n                orgSelectors.push({ placeholder: placeholder, comment: comment });\n                rule.selector = placeholder + rule.selector;\n                return rule;\n            };\n            cssText = processRules(cssText, function (rule) {\n                if (rule.selector[0] !== '@') {\n                    return processCommentedSelector_1(rule);\n                }\n                else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                    rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                    rule.content = processRules(rule.content, processCommentedSelector_1);\n                    return rule;\n                }\n                return rule;\n            });\n        }\n        var scopedCssText = this._scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n        cssText = [scopedCssText].concat(commentsWithHash).join('\\n');\n        if (commentOriginalSelector) {\n            orgSelectors.forEach(function (_a) {\n                var placeholder = _a.placeholder, comment = _a.comment;\n                cssText = cssText.replace(placeholder, comment);\n            });\n        }\n        return cssText;\n    };\n    ShadowCss.prototype._scopeCssText = function (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n        // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n        cssText = this._insertPolyfillHostInCssText(cssText);\n        cssText = this._convertColonHost(cssText);\n        cssText = this._convertColonHostContext(cssText);\n        cssText = this._convertColonSlotted(cssText, slotScopeId);\n        cssText = this._convertShadowDOMSelectors(cssText);\n        if (scopeId) {\n            cssText = this._scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n        }\n        cssText = cssText.replace(/-shadowcsshost-no-combinator/g, \".\" + hostScopeId);\n        cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n        return cssText.trim();\n    };\n    /*\n     * convert a rule like :host(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar\n    */\n    ShadowCss.prototype._convertColonHost = function (cssText) {\n        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);\n    };\n    /*\n   * convert a rule like ::slotted(.foo) { }\n  */\n    ShadowCss.prototype._convertColonSlotted = function (cssText, slotAttr) {\n        var regExp = _cssColonSlottedRe;\n        return cssText.replace(regExp, function () {\n            var m = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                m[_i] = arguments[_i];\n            }\n            if (m[2]) {\n                var compound = m[2].trim();\n                var suffix = m[3];\n                var sel = '.' + slotAttr + ' > ' + compound + suffix;\n                return sel;\n            }\n            else {\n                return _polyfillHostNoCombinator + m[3];\n            }\n        });\n    };\n    /*\n     * convert a rule like :host-context(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar, .foo scopeName > .bar { }\n     *\n     * and\n     *\n     * :host-context(.foo:host) .bar { ... }\n     *\n     * to\n     *\n     * .foo<scopeName> .bar { ... }\n    */\n    ShadowCss.prototype._convertColonHostContext = function (cssText) {\n        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);\n    };\n    ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {\n        // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n        return cssText.replace(regExp, function () {\n            var m = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                m[_i] = arguments[_i];\n            }\n            if (m[2]) {\n                var parts = m[2].split(',');\n                var r = [];\n                for (var i = 0; i < parts.length; i++) {\n                    var p = parts[i].trim();\n                    if (!p)\n                        break;\n                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n                }\n                return r.join(',');\n            }\n            else {\n                return _polyfillHostNoCombinator + m[3];\n            }\n        });\n    };\n    ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {\n        if (part.indexOf(_polyfillHost) > -1) {\n            return this._colonHostPartReplacer(host, part, suffix);\n        }\n        else {\n            return host + part + suffix + ', ' + part + ' ' + host + suffix;\n        }\n    };\n    ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {\n        return host + part.replace(_polyfillHost, '') + suffix;\n    };\n    /*\n     * Convert combinators like ::shadow and pseudo-elements like ::content\n     * by replacing with space.\n    */\n    ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {\n        return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);\n    };\n    // change a selector like 'div' to 'name div'\n    ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector, slotSelector, commentOriginalSelector) {\n        var _this = this;\n        return processRules(cssText, function (rule) {\n            var selector = rule.selector;\n            var content = rule.content;\n            if (rule.selector[0] !== '@') {\n                selector =\n                    _this._scopeSelector(rule.selector, scopeSelector, hostSelector, slotSelector, _this.strictStyling);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector, slotSelector, commentOriginalSelector);\n            }\n            selector = selector.replace(/\\s{2,}/g, ' ').trim();\n            return new CssRule(selector, content);\n        });\n    };\n    ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, slotSelector, strict) {\n        var _this = this;\n        return selector.split(',')\n            .map(function (shallowPart) {\n            if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n                return shallowPart.trim();\n            }\n            if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n                return strict ?\n                    _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector).trim() :\n                    _this._applySelectorScope(shallowPart, scopeSelector, hostSelector).trim();\n            }\n            else {\n                return shallowPart.trim();\n            }\n        })\n            .join(', ');\n    };\n    ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {\n        var re = this._makeScopeMatcher(scopeSelector);\n        return !re.test(selector);\n    };\n    ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {\n        var lre = /\\[/g;\n        var rre = /\\]/g;\n        scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n        return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n    };\n    ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {\n        // Difference from webcomponents.js: scopeSelector could not be an array\n        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\n    };\n    // scope via name and [is=name]\n    ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {\n        // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n        _polyfillHostRe.lastIndex = 0;\n        if (_polyfillHostRe.test(selector)) {\n            var replaceBy_1 = this.strictStyling ? \".\" + hostSelector : scopeSelector;\n            return selector\n                .replace(_polyfillHostNoCombinatorRe, function (_, selector) {\n                return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n                    return before + replaceBy_1 + colon + after;\n                });\n            })\n                .replace(_polyfillHostRe, replaceBy_1 + ' ');\n        }\n        return scopeSelector + ' ' + selector;\n    };\n    ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {\n        var _this = this;\n        var isRe = /\\[is=([^\\]]*)\\]/g;\n        scopeSelector = scopeSelector.replace(isRe, function (_) {\n            var parts = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                parts[_i - 1] = arguments[_i];\n            }\n            return parts[0];\n        });\n        var className = '.' + scopeSelector;\n        var _scopeSelectorPart = function (p) {\n            var scopedP = p.trim();\n            if (!scopedP) {\n                return '';\n            }\n            if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n                scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n            }\n            else {\n                // remove :host since it should be unnecessary\n                var t = p.replace(_polyfillHostRe, '');\n                if (t.length > 0) {\n                    var matches = t.match(/([^:]*)(:*)(.*)/);\n                    if (matches) {\n                        scopedP = matches[1] + className + matches[2] + matches[3];\n                    }\n                }\n            }\n            return scopedP;\n        };\n        var safeContent = new SafeSelector(selector);\n        selector = safeContent.content();\n        var scopedSelector = '';\n        var startIndex = 0;\n        var res;\n        var sep = /( |>|\\+|~(?!=))\\s*/g;\n        // If a selector appears before :host it should not be shimmed as it\n        // matches on ancestor elements and not on elements in the host's shadow\n        // `:host-context(div)` is transformed to\n        // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n        // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n        // Historically `component-tag:host` was matching the component so we also want to preserve\n        // this behavior to avoid breaking legacy apps (it should not match).\n        // The behavior should be:\n        // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n        // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n        //   `:host-context(tag)`)\n        var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n        // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n        var shouldScope = !hasHost;\n        while ((res = sep.exec(selector)) !== null) {\n            var separator = res[1];\n            var part_1 = selector.slice(startIndex, res.index).trim();\n            shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;\n            var scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;\n            scopedSelector += scopedPart + \" \" + separator + \" \";\n            startIndex = sep.lastIndex;\n        }\n        var part = selector.substring(startIndex);\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n        // replace the placeholders with their original values\n        return safeContent.restore(scopedSelector);\n    };\n    ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {\n        selector = selector\n            .replace(_colonHostContextRe, _polyfillHostContext)\n            .replace(_colonHostRe, _polyfillHost)\n            .replace(_colonSlottedRe, _polyfillSlotted);\n        return selector;\n    };\n    return ShadowCss;\n}());\nvar SafeSelector = /** @class */ (function () {\n    function SafeSelector(selector) {\n        var _this = this;\n        this.placeholders = [];\n        this.index = 0;\n        // Replaces attribute selectors with placeholders.\n        // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n        selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n            var replaceBy = \"__ph-\" + _this.index + \"__\";\n            _this.placeholders.push(keep);\n            _this.index++;\n            return replaceBy;\n        });\n        // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n        // WS and \"+\" would otherwise be interpreted as selector separators.\n        this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n            var replaceBy = \"__ph-\" + _this.index + \"__\";\n            _this.placeholders.push(exp);\n            _this.index++;\n            return pseudo + replaceBy;\n        });\n    }\n    SafeSelector.prototype.restore = function (content) {\n        var _this = this;\n        return content.replace(/__ph-(\\d+)__/g, function (_, index) { return _this.placeholders[+index]; });\n    };\n    SafeSelector.prototype.content = function () { return this._content; };\n    return SafeSelector;\n}());\nvar _polyfillHost = '-shadowcsshost';\nvar _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nvar _polyfillHostContext = '-shadowcsscontext';\nvar _parenSuffix = ')(?:\\\\((' +\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n    ')\\\\))?([^,{]*)';\nvar _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nvar _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nvar _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [\n    /::shadow/g,\n    /::content/g\n];\nvar _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar _colonHostRe = /:host/gim;\nvar _colonSlottedRe = /::slotted/gim;\nvar _colonHostContextRe = /:host-context/gim;\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nfunction stripComments(input) {\n    return input.replace(_commentRe, '');\n}\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nfunction extractCommentsWithHash(input) {\n    return input.match(_commentWithHashRe) || [];\n}\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar OPEN_CURLY = '{';\nvar CLOSE_CURLY = '}';\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\nvar CssRule = /** @class */ (function () {\n    function CssRule(selector, content) {\n        this.selector = selector;\n        this.content = content;\n    }\n    return CssRule;\n}());\nfunction processRules(input, ruleCallback) {\n    var inputWithEscapedBlocks = escapeBlocks(input);\n    var nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        var selector = m[2];\n        var content = '';\n        var suffix = m[4];\n        var contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        var rule = ruleCallback(new CssRule(selector, content));\n        return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\n    });\n}\nvar StringWithEscapedBlocks = /** @class */ (function () {\n    function StringWithEscapedBlocks(escapedString, blocks) {\n        this.escapedString = escapedString;\n        this.blocks = blocks;\n    }\n    return StringWithEscapedBlocks;\n}());\nfunction escapeBlocks(input) {\n    var inputParts = input.split(_curlyRe);\n    var resultParts = [];\n    var escapedBlocks = [];\n    var bracketCount = 0;\n    var currentBlockParts = [];\n    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        var part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n}\nexport { ShadowCss, scopeCss };\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nfunction scopeCss(cssText, scopeId, commentOriginalSelector) {\n    const sc = new ShadowCss();\n    return sc.shimCssText(cssText, scopeId, scopeId + '-h', scopeId + '-s', commentOriginalSelector);\n}\nclass ShadowCss {\n    constructor() {\n        this.strictStyling = true;\n    }\n    shimCssText(cssText, scopeId, hostScopeId = '', slotScopeId = '', commentOriginalSelector = false) {\n        const commentsWithHash = extractCommentsWithHash(cssText);\n        cssText = stripComments(cssText);\n        const orgSelectors = [];\n        if (commentOriginalSelector) {\n            const processCommentedSelector = (rule) => {\n                const placeholder = `/*!@___${orgSelectors.length}___*/`;\n                const comment = `/*!@${rule.selector}*/`;\n                orgSelectors.push({ placeholder, comment });\n                rule.selector = placeholder + rule.selector;\n                return rule;\n            };\n            cssText = processRules(cssText, rule => {\n                if (rule.selector[0] !== '@') {\n                    return processCommentedSelector(rule);\n                }\n                else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                    rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                    rule.content = processRules(rule.content, processCommentedSelector);\n                    return rule;\n                }\n                return rule;\n            });\n        }\n        const scopedCssText = this._scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n        cssText = [scopedCssText, ...commentsWithHash].join('\\n');\n        if (commentOriginalSelector) {\n            orgSelectors.forEach(({ placeholder, comment }) => {\n                cssText = cssText.replace(placeholder, comment);\n            });\n        }\n        return cssText;\n    }\n    _scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n        // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n        cssText = this._insertPolyfillHostInCssText(cssText);\n        cssText = this._convertColonHost(cssText);\n        cssText = this._convertColonHostContext(cssText);\n        cssText = this._convertColonSlotted(cssText, slotScopeId);\n        cssText = this._convertShadowDOMSelectors(cssText);\n        if (scopeId) {\n            cssText = this._scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n        }\n        cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n        cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n        return cssText.trim();\n    }\n    /*\n     * convert a rule like :host(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar\n    */\n    _convertColonHost(cssText) {\n        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);\n    }\n    /*\n   * convert a rule like ::slotted(.foo) { }\n  */\n    _convertColonSlotted(cssText, slotAttr) {\n        const regExp = _cssColonSlottedRe;\n        return cssText.replace(regExp, function (...m) {\n            if (m[2]) {\n                const compound = m[2].trim();\n                const suffix = m[3];\n                const sel = '.' + slotAttr + ' > ' + compound + suffix;\n                return sel;\n            }\n            else {\n                return _polyfillHostNoCombinator + m[3];\n            }\n        });\n    }\n    /*\n     * convert a rule like :host-context(.foo) > .bar { }\n     *\n     * to\n     *\n     * .foo<scopeName> > .bar, .foo scopeName > .bar { }\n     *\n     * and\n     *\n     * :host-context(.foo:host) .bar { ... }\n     *\n     * to\n     *\n     * .foo<scopeName> .bar { ... }\n    */\n    _convertColonHostContext(cssText) {\n        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);\n    }\n    _convertColonRule(cssText, regExp, partReplacer) {\n        // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n        return cssText.replace(regExp, function (...m) {\n            if (m[2]) {\n                const parts = m[2].split(',');\n                const r = [];\n                for (let i = 0; i < parts.length; i++) {\n                    const p = parts[i].trim();\n                    if (!p)\n                        break;\n                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n                }\n                return r.join(',');\n            }\n            else {\n                return _polyfillHostNoCombinator + m[3];\n            }\n        });\n    }\n    _colonHostContextPartReplacer(host, part, suffix) {\n        if (part.indexOf(_polyfillHost) > -1) {\n            return this._colonHostPartReplacer(host, part, suffix);\n        }\n        else {\n            return host + part + suffix + ', ' + part + ' ' + host + suffix;\n        }\n    }\n    _colonHostPartReplacer(host, part, suffix) {\n        return host + part.replace(_polyfillHost, '') + suffix;\n    }\n    /*\n     * Convert combinators like ::shadow and pseudo-elements like ::content\n     * by replacing with space.\n    */\n    _convertShadowDOMSelectors(cssText) {\n        return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n    }\n    // change a selector like 'div' to 'name div'\n    _scopeSelectors(cssText, scopeSelector, hostSelector, slotSelector, commentOriginalSelector) {\n        return processRules(cssText, (rule) => {\n            let selector = rule.selector;\n            let content = rule.content;\n            if (rule.selector[0] !== '@') {\n                selector =\n                    this._scopeSelector(rule.selector, scopeSelector, hostSelector, slotSelector, this.strictStyling);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                content = this._scopeSelectors(rule.content, scopeSelector, hostSelector, slotSelector, commentOriginalSelector);\n            }\n            selector = selector.replace(/\\s{2,}/g, ' ').trim();\n            return new CssRule(selector, content);\n        });\n    }\n    _scopeSelector(selector, scopeSelector, hostSelector, slotSelector, strict) {\n        return selector.split(',')\n            .map(shallowPart => {\n            if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n                return shallowPart.trim();\n            }\n            if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n                return strict ?\n                    this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector).trim() :\n                    this._applySelectorScope(shallowPart, scopeSelector, hostSelector).trim();\n            }\n            else {\n                return shallowPart.trim();\n            }\n        })\n            .join(', ');\n    }\n    _selectorNeedsScoping(selector, scopeSelector) {\n        const re = this._makeScopeMatcher(scopeSelector);\n        return !re.test(selector);\n    }\n    _makeScopeMatcher(scopeSelector) {\n        const lre = /\\[/g;\n        const rre = /\\]/g;\n        scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n        return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n    }\n    _applySelectorScope(selector, scopeSelector, hostSelector) {\n        // Difference from webcomponents.js: scopeSelector could not be an array\n        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\n    }\n    // scope via name and [is=name]\n    _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {\n        // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n        _polyfillHostRe.lastIndex = 0;\n        if (_polyfillHostRe.test(selector)) {\n            const replaceBy = this.strictStyling ? `.${hostSelector}` : scopeSelector;\n            return selector\n                .replace(_polyfillHostNoCombinatorRe, (_, selector) => {\n                return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\n                    return before + replaceBy + colon + after;\n                });\n            })\n                .replace(_polyfillHostRe, replaceBy + ' ');\n        }\n        return scopeSelector + ' ' + selector;\n    }\n    _applyStrictSelectorScope(selector, scopeSelector, hostSelector) {\n        const isRe = /\\[is=([^\\]]*)\\]/g;\n        scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n        const className = '.' + scopeSelector;\n        const _scopeSelectorPart = (p) => {\n            let scopedP = p.trim();\n            if (!scopedP) {\n                return '';\n            }\n            if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n                scopedP = this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n            }\n            else {\n                // remove :host since it should be unnecessary\n                const t = p.replace(_polyfillHostRe, '');\n                if (t.length > 0) {\n                    const matches = t.match(/([^:]*)(:*)(.*)/);\n                    if (matches) {\n                        scopedP = matches[1] + className + matches[2] + matches[3];\n                    }\n                }\n            }\n            return scopedP;\n        };\n        const safeContent = new SafeSelector(selector);\n        selector = safeContent.content();\n        let scopedSelector = '';\n        let startIndex = 0;\n        let res;\n        const sep = /( |>|\\+|~(?!=))\\s*/g;\n        // If a selector appears before :host it should not be shimmed as it\n        // matches on ancestor elements and not on elements in the host's shadow\n        // `:host-context(div)` is transformed to\n        // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n        // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n        // Historically `component-tag:host` was matching the component so we also want to preserve\n        // this behavior to avoid breaking legacy apps (it should not match).\n        // The behavior should be:\n        // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n        // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n        //   `:host-context(tag)`)\n        const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n        // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n        let shouldScope = !hasHost;\n        while ((res = sep.exec(selector)) !== null) {\n            const separator = res[1];\n            const part = selector.slice(startIndex, res.index).trim();\n            shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n            const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n            scopedSelector += `${scopedPart} ${separator} `;\n            startIndex = sep.lastIndex;\n        }\n        const part = selector.substring(startIndex);\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n        // replace the placeholders with their original values\n        return safeContent.restore(scopedSelector);\n    }\n    _insertPolyfillHostInCssText(selector) {\n        selector = selector\n            .replace(_colonHostContextRe, _polyfillHostContext)\n            .replace(_colonHostRe, _polyfillHost)\n            .replace(_colonSlottedRe, _polyfillSlotted);\n        return selector;\n    }\n}\nclass SafeSelector {\n    constructor(selector) {\n        this.placeholders = [];\n        this.index = 0;\n        // Replaces attribute selectors with placeholders.\n        // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n        selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n            const replaceBy = `__ph-${this.index}__`;\n            this.placeholders.push(keep);\n            this.index++;\n            return replaceBy;\n        });\n        // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n        // WS and \"+\" would otherwise be interpreted as selector separators.\n        this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n            const replaceBy = `__ph-${this.index}__`;\n            this.placeholders.push(exp);\n            this.index++;\n            return pseudo + replaceBy;\n        });\n    }\n    restore(content) {\n        return content.replace(/__ph-(\\d+)__/g, (_, index) => this.placeholders[+index]);\n    }\n    content() { return this._content; }\n}\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' +\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n    ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [\n    /::shadow/g,\n    /::content/g\n];\nconst _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nfunction stripComments(input) {\n    return input.replace(_commentRe, '');\n}\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nfunction extractCommentsWithHash(input) {\n    return input.match(_commentWithHashRe) || [];\n}\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nclass CssRule {\n    constructor(selector, content) {\n        this.selector = selector;\n        this.content = content;\n    }\n}\nfunction processRules(input, ruleCallback) {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function (...m) {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const rule = ruleCallback(new CssRule(selector, content));\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n}\nclass StringWithEscapedBlocks {\n    constructor(escapedString, blocks) {\n        this.escapedString = escapedString;\n        this.blocks = blocks;\n    }\n}\nfunction escapeBlocks(input) {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n}\n\nexport { ShadowCss, scopeCss };\n"],"sourceRoot":"webpack:///"}