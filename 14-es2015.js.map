{"version":3,"sources":["./src/assets/dist/esm/kup-data-table.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiF;AACpD;AACyW;;AAEtY;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAY;AACxC,4BAA4B,oDAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oDAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4DAAW;AAC3C,8BAA8B,4DAAW;AACzC,gCAAgC,4DAAW;AAC3C,4BAA4B,4DAAW;AACvC,mCAAmC,4DAAW;AAC9C,kCAAkC,4DAAW;AAC7C,oCAAoC,4DAAW;AAC/C,wCAAwC,4DAAW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,gBAAgB;AAChB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4DAAU;AAChC;AACA;AACA,6BAA6B,4DAAY;AACzC;AACA;AACA,oBAAoB,4DAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,UAAU;AAC5B;AACA;AACA,cAAc,sBAAsB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,YAAY,gCAAgC,oDAAQ,KAAK,oDAAQ,KAAK,oDAAQ,IAAI;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oDAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA,8BAA8B,SAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gCAAgC,2BAA2B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wBAAwB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oDAAY;AAC7B;AACA;AACA,iBAAiB,oDAAY;AAC7B;AACA;AACA,iBAAiB,oDAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAC,SAAS,qHAAqH,EAAE,4DAAC,oBAAoB;AAChL;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,wBAAwB,4DAAC,UAAU,2IAA2I,EAAE,4DAAC,UAAU;AAC3L;AACA,sHAAsH;AACtH;AACA;AACA;AACA,+BAA+B,8BAA8B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4DAAC,QAAQ,8EAA8E,EAAE,4DAAC,UAAU,wBAAwB;AAC7J,iCAAiC,4DAAC,QAAQ,0DAA0D,sBAAsB,GAAG,EAAE,4DAAC,UAAU,2CAA2C;AACrL;AACA;AACA;AACA,8BAA8B,4DAAC,SAAS,uBAAuB,UAAU,GAAG,EAAE,4DAAC,QAAQ,kBAAkB;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,oDAA0B;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,yDAAyD,oDAA0B;AACnF;AACA;AACA,qBAAqB;AACrB;AACA,yDAAyD,oDAA0B;AACnF;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,yDAAyD,oDAA0B;AACnF,sFAAsF,oDAA0B;AAChH;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,oBAAoB,4DAAC,sBAAsB,qIAAqI,iBAAiB,4DAAC,UAAU,wBAAwB;AACpO,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4DAAC,QAAQ,eAAe,EAAE,4DAAC,WAAW,gFAAgF,yBAAyB,mBAAmB,yBAAyB;AAC5N;AACA,kDAAkD;AAClD;AACA;AACA;AACA,0BAA0B,4DAAC;AAC3B;AACA;AACA;AACA,4BAA4B,4DAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,OAAO,MAAM,4DAAC;AACzE;AACA;AACA,4BAA4B,4DAAC;AAC7B;AACA;AACA;AACA,2BAA2B,4DAAC;AAC5B;AACA,wBAAwB,4DAAC,gBAAgB,4DAAC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC,4BAA4B,4DAAC,UAAU,kBAAkB;AACzD;AACA;AACA;AACA;AACA;AACA,2BAA2B,4DAAC,QAAQ,mBAAmB,UAAU,4DAAC,UAAU;AAC5E;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,+BAA+B,4DAAC,QAAQ,iBAAiB;AACzD;AACA,6BAA6B,4DAAC,QAAQ,uDAAuD;AAC7F;AACA;AACA,6BAA6B,4DAAC,QAAQ,uDAAuD,EAAE,4DAAC,QAAQ,mCAAmC,UAAU,4DAAC,UAAU;AAChK;AACA,2CAA2C,KAAK;AAChD;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8BAA8B;AACrD;AACA;AACA,mCAAmC,WAAW;AAC9C,oCAAoC,4DAAC,UAAU,kBAAkB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4DAAC,UAAU,8IAA8I,EAAE,4DAAC,OAAO,4BAA4B;AAC9N;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,4BAA4B,4DAAQ;AACpC;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAC,QAAQ,0DAA0D;AAC3F,aAAa;AACb;AACA;AACA,iCAAiC,4DAAC,aAAa,4DAAC,WAAW,wJAAwJ;AACnN;AACA;AACA;AACA,+BAA+B,4DAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,4DAAC,UAAU,iMAAiM;AACrP;AACA,kCAAkC,4DAAC;AACnC;AACA;AACA;AACA;AACA,oBAAoB,4DAAC,QAAQ,2DAA2D;AACxF;AACA;AACA;AACA;AACA,oBAAoB,4DAAC,UAAU,0CAA0C,YAAY;AACrF;AACA;AACA;AACA;AACA,iBAAiB,uEAAuE;AACxF,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAM,cAAc,4DAAU;AAC1C,sBAAsB,4DAAC,UAAU,wBAAwB;AACzD;AACA,iBAAiB,4DAAO;AACxB,uBAAuB,4DAAC,SAAS,0DAA0D;AAC3F;AACA,iBAAiB,4DAAM;AACvB,uBAAuB,4DAAC,OAAO,yCAAyC;AACxE;AACA,iBAAiB,4DAAU;AAC3B,uBAAuB,4DAAC,kBAAkB;AAC1C;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,iBAAiB,4DAAQ;AACzB;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAC,+BAA+B,EAAE,4DAAuB,SAAS,8HAA8H;AACvN;AACA,iBAAiB,4DAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4DAAC,qCAAqC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,UAAU,sCAAsC;AACjE;AACA;AACA;AACA,gBAAgB,4DAAC,YAAY,mMAAmM;AAChO;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAC,aAAa,4DAAC,QAAQ,mCAAmC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4DAAC,SAAS,qBAAqB,EAAE,4DAAC,oBAAoB,iGAAiG;AACnL;AACA;AACA,YAAY,oDAAY;AACxB,YAAY,oDAAY;AACxB,4BAA4B,4DAAC,mBAAmB,uQAAuQ;AACvT;AACA;AACA,YAAY,oDAAY;AACxB,YAAY,oDAAY;AACxB,+BAA+B,4DAAC,mBAAmB,0QAA0Q;AAC7T;AACA;AACA;AACA;AACA,+BAA+B,4DAAe;AAC9C;AACA,4BAA4B,4DAAC,SAAS,2EAA2E,EAAE,4DAAC,UAAU,gCAAgC;AAC9J;AACA;AACA;AACA;AACA,aAAa;AACb,yBAAyB,4DAAC,SAAS,oBAAoB;AACvD;AACA,8BAA8B,4DAAC,SAAS,sBAAsB,EAAE,4DAAC,gBAAgB,SAAS,mCAAmC,sFAAsF,GAAG,4DAAC,gBAAgB,SAAS,oCAAoC,uEAAuE,GAAG,4DAAC,gBAAgB,SAAS,iCAAiC,+EAA+E;AACxe;AACA,iCAAiC,oDAAQ;AACzC,gBAAgB,oDAAQ;AACxB,8BAA8B,oDAAQ;AACtC,gBAAgB,oDAAQ;AACxB;AACA;AACA,8BAA8B,aAAa;AAC3C,gBAAgB,4DAAC,SAAS,2BAA2B,EAAE,4DAAC,SAAS,yBAAyB,6CAA6C,4DAAC,SAAS,yBAAyB,cAAc,4DAAC,WAAW,oBAAoB,EAAE,4DAAC,WAAW,8DAA8D,EAAE,4DAAC,uBAAuB,4DAAC;AAC/T;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,wBAAwB,kGAAkG,MAAM,mEAAmE,2DAA2D,yFAAyF,uDAAuD,wFAAwF,2FAA2F,4EAA4E,iFAAiF,kFAAkF,0EAA0E,mEAAmE,gFAAgF,6DAA6D,kFAAkF,yDAAyD,wEAAwE,qDAAqD,0DAA0D,+DAA+D,uEAAuE,oBAAoB,6CAA6C,0BAA0B,gCAAgC,WAAW,oBAAoB,2BAA2B,8BAA8B,yBAAyB,gBAAgB,+BAA+B,0DAA0D,mBAAmB,4CAA4C,gDAAgD,8FAA8F,+CAA+C,uCAAuC,kBAAkB,eAAe,4CAA4C,yCAAyC,iCAAiC,uHAAuH,4BAA4B,6DAA6D,kDAAkD,0DAA0D,mCAAmC,cAAc,gCAAgC,4CAA4C,yCAAyC,eAAe,mCAAmC,kBAAkB,8DAA8D,+CAA+C,gEAAgE,oBAAoB,4EAA4E,iDAAiD,4CAA4C,6CAA6C,kBAAkB,kDAAkD,qCAAqC,mBAAmB,qBAAqB,qDAAqD,kDAAkD,yCAAyC,iCAAiC,wBAAwB,gBAAgB,6BAA6B,sBAAsB,kDAAkD,6CAA6C,gCAAgC,yCAAyC,eAAe,eAAe,2FAA2F,6BAA6B,mDAAmD,yCAAyC,6CAA6C,gBAAgB,6CAA6C,4CAA4C,eAAe,kDAAkD,iBAAiB,mBAAmB,8CAA8C,mBAAmB,6CAA6C,iBAAiB,oDAAoD,mBAAmB,8CAA8C,qBAAqB,YAAY,WAAW,+CAA+C,eAAe,kBAAkB,6BAA6B,qDAAqD,mCAAmC,kDAAkD,mBAAmB,gCAAgC,eAAe,mCAAmC,iBAAiB,qEAAqE,YAAY,oDAAoD,kBAAkB,qBAAqB,0DAA0D,mBAAmB,sBAAsB,kDAAkD,iBAAiB,oBAAoB,wDAAwD,oBAAoB,uBAAuB,cAAc,oBAAoB,kBAAkB,aAAa,oBAAoB,aAAa,oBAAoB,yBAAyB,oBAAoB,aAAa,uCAAuC,cAAc,oCAAoC,mBAAmB,eAAe,2CAA2C,mCAAmC,8BAA8B,mBAAmB,+BAA+B,YAAY,aAAa,6CAA6C,yCAAyC,iCAAiC,uBAAuB,kBAAkB,YAAY,gBAAgB,2CAA2C,mCAAmC,gBAAgB,2BAA2B,8BAA8B,oBAAoB,aAAa,UAAU,kBAAkB,cAAc,UAAU,mDAAmD,iEAAiE,2CAA2C,yDAAyD,gBAAgB,qBAAqB,SAAS,UAAU,mBAAmB,cAAc,eAAe,yCAAyC,iCAAiC,yBAAyB,eAAe,4BAA4B,wBAAwB,mBAAmB,eAAe,kBAAkB,0BAA0B,oCAAoC,0BAA0B,8CAA8C,6BAA6B,gCAAgC,0BAA0B,iCAAiC,uBAAuB,4CAA4C,GAAG,WAAW,oCAAoC,GAAG,WAAW,mBAAmB,6BAA6B,cAAc,6BAA6B,eAAe,qBAAqB,0CAA0C,uCAAuC,aAAa,UAAU,6BAA6B,qBAAqB,sCAAsC,yBAAyB,mCAAmC,0BAA0B,eAAe,cAAc,EAAE;AAC/jP;;AAE0C","file":"14-es2015.js","sourcesContent":["import { r as registerInstance, c as createEvent, h } from './chunk-1851c479.js';\nimport './chunk-d8060b98.js';\nimport { L as LoadMoreMode, P as PaginatorPos, h as ShowGrid, j as calcTotals, p as paginateRows, f as filterRows, S as SortMode, k as groupRows, s as sortRows, l as isIcon, o as isVoCodver, b as isImage, q as isLink, r as isCheckbox, c as isButton, d as createJ4objButtonConfig, t as isBar, g as getColumnByName, K as KupDataTableColumnDragType, i as isNumber } from './chunk-621f9806.js';\n\nclass KupDataTable {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.columnsWidth = [];\n        /**\n         * Enables sorting of the columns by dragging them into different columns\n         */\n        this.enableSortableColumns = false;\n        this.expandGroups = false;\n        this.filters = {};\n        this.globalFilter = false;\n        this.groups = [];\n        /**\n         * If table header is visible and this prop is set to true, the header will be visible while scrolling the table.\n         * To make this work, it must be configured together with the data-table CSS property --kup-data-table_header-offset.\n         * It uses CSS position: sticky.\n         * @version 1.0\n         * @namespace KupDataTable.headerIsPersistent\n         * @see KupDataTable.showHeader\n         * @see https://caniuse.com/#feat=css-sticky\n         */\n        this.headerIsPersistent = false;\n        this.multiSelection = false;\n        /**\n         * Sets a maximum limit of new records which can be required by the load more functionality.\n         */\n        this.loadMoreLimit = 1000;\n        /**\n         * The number of records which will be requested to be downloaded when clicking on the load more button.\n         *\n         * This property is regulated also by loadMoreMode.\n         * @see loadMoreMode\n         * @see loadMoreLimit\n         */\n        this.loadMoreStep = 60;\n        /**\n         * Establish the modality of how many new records will be downloaded.\n         *\n         * This property is regulated also by loadMoreStep.\n         * @see loadMoreStep\n         * @see loadMoreLimit\n         */\n        this.loadMoreMode = LoadMoreMode.PROGRESSIVE_THRESHOLD;\n        this.paginatorPos = PaginatorPos.TOP;\n        this.rowsPerPage = 10;\n        /**\n         * Enables rendering of the table header.\n         * @namespace KupDataTable.showHeader\n         */\n        this.showHeader = true;\n        this.showFilters = false;\n        this.showGrid = ShowGrid.COMPLETE;\n        /**\n         * If set to true, displays the button to load more records.\n         */\n        this.showLoadMore = false;\n        this.sortEnabled = true;\n        this.sort = [];\n        /**\n         * If set to true, when a column is dragged to be sorted the component directly mutates the data.columns property\n         * and then fires the event\n         */\n        this.sortableColumnsMutateData = true;\n        //---- State ----\n        this.globalFilterValue = '';\n        this.currentPage = 1;\n        this.currentRowsPerPage = 10;\n        this.selectedRows = [];\n        this.groupState = {};\n        /**\n         * name of the column with an open menu\n         */\n        this.openedMenu = null;\n        this.density = 'medium';\n        this.renderedRows = [];\n        this.loadMoreEventCounter = 0;\n        this.loadMoreEventPreviousQuantity = 0;\n        /**\n         * Internal not reactive state used to keep track if a column is being dragged.\n         * @private\n         */\n        this.columnsAreBeingDragged = false;\n        /**\n         * Attribute to set when a column is being dragged on the whole thead element\n         * @const\n         * @default 'columns-dragging'\n         * @private\n         */\n        this.dragFlagAttribute = 'columns-dragging';\n        /**\n         * The string representing the drag over attribute\n         * @const\n         * @default 'drag-over'\n         * @private\n         */\n        this.dragOverAttribute = 'drag-over';\n        /**\n         * The string representing the drag starter attribute to set onto the element\n         * @const\n         * @default 'drag-starter'\n         * @private\n         */\n        this.dragStarterAttribute = 'drag-starter';\n        this.kupAutoRowSelect = createEvent(this, \"kupAutoRowSelect\", 6);\n        this.kupRowSelected = createEvent(this, \"kupRowSelected\", 6);\n        this.kupOptionClicked = createEvent(this, \"kupOptionClicked\", 6);\n        this.kupAddColumn = createEvent(this, \"kupAddColumn\", 6);\n        this.kupRowActionClicked = createEvent(this, \"kupRowActionClicked\", 6);\n        this.kupLoadMoreClicked = createEvent(this, \"kupLoadMoreClicked\", 6);\n        this.kupCellButtonClicked = createEvent(this, \"kupCellButtonClicked\", 6);\n        this.kupDataTableSortedColumn = createEvent(this, \"kupDataTableSortedColumn\", 6);\n    }\n    rowsPerPageHandler(newValue) {\n        this.currentRowsPerPage = newValue;\n    }\n    expandGroupsHandler() {\n        // reset group state\n        this.groupState = {};\n        this.forceGroupExpansion();\n    }\n    recalculateRows() {\n        this.initRows();\n    }\n    // private theadObserver = new IntersectionObserver(\n    //     (entries) => {\n    //         entries.forEach((entry) => {\n    //             if (entry.intersectionRatio === 1) {\n    //                 // fully visible\n    //                 console.log('fully visible', entry.target);\n    //             } else if (entry.intersectionRatio === 0) {\n    //                 // hidden\n    //                 console.log('hidden', entry.target);\n    //             }\n    //         });\n    //     },\n    //     {\n    //         threshold: [0, 0.5, 1],\n    //         rootMargin: '-100px 0px 0px 0px',\n    //     }\n    // );\n    // lifecycle\n    componentWillLoad() {\n        this.rowsPerPageHandler(this.rowsPerPage);\n        this.initRows();\n        if (this.expandGroups) {\n            this.forceGroupExpansion();\n        }\n    }\n    componentDidLoad() {\n        // observing table\n        // this.theadObserver.observe(this.theadRef);\n        // automatic row selection\n        if (this.selectRow && this.selectRow > 0) {\n            if (this.selectRow <= this.renderedRows.length) {\n                this.selectedRows = [];\n                this.selectedRows.push(this.renderedRows[this.selectRow - 1]);\n                this.kupAutoRowSelect.emit({\n                    selectedRow: this.selectedRows[0],\n                });\n            }\n        }\n    }\n    getColumns() {\n        return this.data && this.data.columns\n            ? this.data.columns\n            : [{ title: '', name: '', size: 0 }];\n    }\n    getVisibleColumns() {\n        const visibleColumns = this.getColumns().filter((column) => {\n            if (column.hasOwnProperty('visible')) {\n                return column.visible;\n            }\n            return true;\n        });\n        // check grouping\n        if (this.isGrouping()) {\n            // filtering column based on group visibility\n            return visibleColumns.filter((column) => {\n                // check if in group\n                let group = null;\n                for (let currentGroup of this.groups) {\n                    if (currentGroup.column === column.name) {\n                        group = currentGroup;\n                        break;\n                    }\n                }\n                if (group) {\n                    // return true if\n                    // 1) group obj has not the 'visible' property or\n                    // 2) group has 'visible' property and it is true\n                    return !group.hasOwnProperty('visible') || group.visible;\n                }\n                // not in group -> visible\n                return true;\n            });\n        }\n        return visibleColumns;\n    }\n    getGroupByName(column) {\n        if (!this.isGrouping()) {\n            return null;\n        }\n        for (let group of this.groups) {\n            if (group.column === column) {\n                return group;\n            }\n        }\n        return null;\n    }\n    getRows() {\n        return this.data && this.data.rows ? this.data.rows : [];\n    }\n    initRows() {\n        this.filterRows();\n        this.footer = calcTotals(this.rows, this.totals);\n        this.groupRows();\n        this.sortRows();\n        this.paginatedRows = paginateRows(this.rows, this.currentPage, this.currentRowsPerPage);\n    }\n    filterRows() {\n        this.rows = filterRows(this.getRows(), this.filters, this.globalFilterValue, this.getVisibleColumns().map((c) => c.name));\n    }\n    isGrouping() {\n        return this.groups && this.groups.length > 0;\n    }\n    hasRowActions() {\n        return this.rowActions !== undefined;\n    }\n    removeGroup(group) {\n        // resetting group state\n        this.groupState = {};\n        const index = this.groups.indexOf(group);\n        if (index >= 0) {\n            // removing group from prop\n            this.groups.splice(index, 1);\n            this.groups = [...this.groups];\n        }\n    }\n    hasTotals() {\n        return this.totals && Object.keys(this.totals).length > 0;\n    }\n    forceGroupExpansion() {\n        this.rows.forEach((row) => this.forceRowGroupExpansion(row));\n    }\n    forceRowGroupExpansion(row) {\n        // check if row is group\n        if (!row.group) {\n            return;\n        }\n        // forcing row expanded\n        row.group.expanded = true;\n        // updating group state\n        // check if already present\n        let groupState = this.groupState[row.group.id];\n        if (!groupState) {\n            groupState = {\n                expanded: this.expandGroups,\n            };\n        }\n        else {\n            groupState.expanded = this.expandGroups;\n        }\n        this.groupState[row.group.id] = groupState;\n        if (row.group.children) {\n            row.group.children.forEach((childRow) => this.forceRowGroupExpansion(childRow));\n        }\n    }\n    // event listeners\n    onColumnSort({ ctrlKey }, columnName) {\n        // check if columnName is already in sort array\n        let i = 0;\n        for (; i < this.sort.length; i++) {\n            const sortObj = this.sort[i];\n            if (sortObj.column === columnName) {\n                break;\n            }\n        }\n        if (i < this.sort.length) {\n            // already in array... switching sort\n            const sortObj = this.sort[i];\n            const newSortObj = Object.assign({}, sortObj, { sortMode: sortObj.sortMode === SortMode.A ? SortMode.D : SortMode.A });\n            if (ctrlKey) {\n                const newSort = [...this.sort];\n                newSort[i] = newSortObj;\n                this.sort = newSort;\n            }\n            else {\n                this.sort = [newSortObj];\n            }\n        }\n        else {\n            const sortObj = {\n                column: columnName,\n                sortMode: SortMode.A,\n            };\n            // if CTRL is pressed, push to array\n            // else, replace current array\n            if (ctrlKey) {\n                this.sort = [...this.sort, sortObj];\n            }\n            else {\n                this.sort = [sortObj];\n            }\n        }\n    }\n    onFilterChange({ detail }, column) {\n        // resetting current page\n        this.currentPage = 1;\n        const newFilters = Object.assign({}, this.filters);\n        if (detail.value.length === 0) {\n            delete newFilters[column];\n        }\n        else {\n            newFilters[column] = detail.value;\n        }\n        this.filters = newFilters;\n    }\n    onGlobalFilterChange({ detail }) {\n        // resetting current page\n        this.currentPage = 1;\n        this.globalFilterValue = detail.value;\n    }\n    handlePageChanged({ detail }) {\n        this.currentPage = detail.newPage;\n    }\n    handleRowsPerPageChanged({ detail }) {\n        this.currentRowsPerPage = detail.newRowsPerPage;\n    }\n    onRowClick(event, row) {\n        // selecting row\n        this.handleRowSelect(row, event.ctrlKey);\n        // checking target\n        const target = event.target;\n        let clickedColumn = null;\n        if (target instanceof HTMLElement) {\n            if (target.tagName !== 'TR') {\n                let currentElement = target;\n                while (currentElement.tagName !== 'TD') {\n                    currentElement = currentElement.parentElement;\n                }\n                clickedColumn = currentElement.dataset.column;\n            }\n        }\n        this.kupRowSelected.emit({\n            selectedRows: this.selectedRows,\n            clickedColumn,\n        });\n    }\n    onDefaultRowActionClick(e, { action, row, type, index }) {\n        e.stopPropagation();\n        this.kupRowActionClicked.emit({\n            action,\n            index,\n            row,\n            type,\n        });\n    }\n    onRowActionExpanderClick(e, row) {\n        e.stopPropagation();\n        this.kupRowActionClicked.emit({\n            row,\n            type: 'expander',\n        });\n    }\n    handleRowSelect(row, ctrlKey) {\n        if (this.multiSelection) {\n            if (ctrlKey && this.selectedRows) {\n                const index = this.selectedRows.indexOf(row);\n                if (index < 0) {\n                    // adding\n                    this.selectedRows = [...this.selectedRows, row];\n                }\n                else {\n                    // removing\n                    this.selectedRows.splice(index, 1);\n                    this.selectedRows = [...this.selectedRows];\n                }\n            }\n            else {\n                this.selectedRows = [row];\n            }\n        }\n        else {\n            this.selectedRows = [row];\n        }\n    }\n    onRowCheckboxSelection({ target }, row) {\n        if (target.checked) {\n            if (this.selectedRows.length > 0) {\n                this.selectedRows = [...this.selectedRows, row];\n            }\n            else {\n                this.selectedRows = [row];\n            }\n        }\n        else {\n            const index = this.selectedRows.indexOf(row);\n            if (index >= 0) {\n                this.selectedRows.splice(index, 1);\n                this.selectedRows = [...this.selectedRows];\n            }\n        }\n        this.kupRowSelected.emit({\n            selectedRows: this.selectedRows,\n            clickedColumn: null,\n        });\n    }\n    onRowExpand(row) {\n        // row should be a 'group' row\n        row.group.expanded = !row.group.expanded;\n        // updating group map\n        this.groupState[row.group.id].expanded = row.group.expanded;\n        // changing group state to trigger rendering\n        this.groupState = Object.assign({}, this.groupState);\n    }\n    onSelectAll({ target }) {\n        if (target.checked) {\n            // select all rows\n            this.selectedRows = this.renderedRows;\n        }\n        else {\n            // deselect all rows\n            this.selectedRows = [];\n        }\n        // triggering event\n        this.kupRowSelected.emit({\n            selectedRows: this.selectedRows,\n            clickedColumn: null,\n        });\n    }\n    onColumnMouseEnter(column) {\n        this.columnOverTimeout = setTimeout(() => {\n            this.openedMenu = column;\n        }, 500);\n    }\n    onColumnMouseLeave(column) {\n        // clearing timeout\n        clearTimeout(this.columnOverTimeout);\n        if (this.openedMenu === column) {\n            this.openedMenu = null;\n        }\n    }\n    switchColumnGroup(group, column) {\n        // resetting opened menu\n        this.openedMenu = null;\n        // reset group state\n        this.groupState = {};\n        if (group !== null) {\n            // remove from grouping\n            const index = this.groups.indexOf(group);\n            this.groups.splice(index, 1);\n            this.groups = [...this.groups];\n        }\n        else {\n            // add to groups\n            this.groups = [...this.groups, { column, visible: true }];\n        }\n    }\n    onOptionClicked(column, row) {\n        this.kupOptionClicked.emit({\n            column,\n            row,\n        });\n    }\n    onJ4btnClicked(row, column, cell) {\n        // Since this function is called with bind, the event from the kup-button gets passed into the arguments array\n        const buttonEvent = arguments[3];\n        if (buttonEvent) {\n            // Prevents double events to be fired.\n            buttonEvent.stopPropagation();\n        }\n        else {\n            throw 'kup-data-table error: missing event';\n        }\n        this.kupCellButtonClicked.emit({\n            cell,\n            column,\n            row,\n        });\n    }\n    // utility methods\n    groupRows() {\n        if (!this.isGrouping()) {\n            return;\n        }\n        this.rows = groupRows(this.getColumns(), this.rows, this.groups, this.totals);\n        this.adjustGroupState();\n    }\n    // Handler for loadMore button is clicked.\n    onLoadMoreClick() {\n        let loadItems = 0;\n        switch (this.loadMoreMode) {\n            case LoadMoreMode.CONSTANT:\n                loadItems = this.loadMoreStep;\n                break;\n            case LoadMoreMode.CONSTANT_INCREMENT:\n                loadItems = this.loadMoreStep * (this.loadMoreEventCounter + 1);\n                break;\n            case LoadMoreMode.PROGRESSIVE_THRESHOLD:\n                loadItems =\n                    Math.max(this.loadMoreEventPreviousQuantity, this.loadMoreStep) * Math.min(this.loadMoreEventCounter + 1, 2);\n                break;\n        }\n        if (loadItems > this.loadMoreLimit) {\n            loadItems = this.loadMoreLimit;\n        }\n        this.kupLoadMoreClicked.emit({\n            loadItems,\n        });\n        this.loadMoreEventPreviousQuantity = loadItems;\n        this.loadMoreEventCounter++;\n    }\n    adjustGroupState() {\n        if (!this.rows ||\n            this.rows.length === 0 ||\n            !this.rows[0].hasOwnProperty('group')) {\n            // no grouping\n            return;\n        }\n        this.rows.forEach((r) => this.adjustGroupStateFromRow(r));\n    }\n    adjustGroupStateFromRow(row) {\n        if (!row || !row.hasOwnProperty('group')) {\n            // not a groping row, nothing to do\n            return;\n        }\n        const group = row.group;\n        // check if already in group state\n        let groupFromState = this.groupState[group.id];\n        if (!groupFromState) {\n            // add to state\n            this.groupState[group.id] = group;\n        }\n        else {\n            // update expanded\n            group.expanded = groupFromState.expanded;\n        }\n        group.children.forEach((child) => this.adjustGroupStateFromRow(child));\n    }\n    sortRows() {\n        this.rows = sortRows(this.rows, this.sort);\n    }\n    getSortIcon(columnName) {\n        // check if column in sort array\n        for (let sortObj of this.sort) {\n            if (sortObj.column === columnName) {\n                return 'A' === sortObj.sortMode\n                    ? 'mdi-sort-ascending'\n                    : 'mdi-sort-descending';\n            }\n        }\n        // default\n        return 'mdi-sort';\n    }\n    calculateColspan() {\n        let colSpan = this.getVisibleColumns().length;\n        if (this.multiSelection) {\n            colSpan += 1;\n        }\n        if (this.isGrouping() && this.hasTotals()) {\n            colSpan += 1;\n        }\n        if (this.hasRowActions()) {\n            colSpan += 1;\n        }\n        return colSpan;\n    }\n    isGroupExpanded({ group }) {\n        if (!group) {\n            return false;\n        }\n        // check if in group state\n        if (this.groupState[group.id]) {\n            return this.groupState[group.id].expanded;\n        }\n        else {\n            return false;\n        }\n    }\n    styleHasBorderRadius(cell) {\n        if (cell && cell.style && cell.style.borderRadius) {\n            return true;\n        }\n        return false;\n    }\n    //==== Column sort order methods ====\n    handleColumnSort(receivingColumn, sortedColumn) {\n        // Get receiving column position\n        const receivingColIndex = this.data.columns.findIndex((col) => col.name === receivingColumn.name &&\n            col.title === receivingColumn.title);\n        // Get sorted column current position\n        const sortedColIndex = this.data.columns.findIndex((col) => col.name === sortedColumn.name &&\n            col.title === sortedColumn.title);\n        // Moves the sortedColumn into the correct position\n        if (this.sortableColumnsMutateData) {\n            this.moveSortedColumns(this.data.columns, receivingColIndex, sortedColIndex);\n        }\n        // fires event\n        this.kupDataTableSortedColumn.emit({\n            receivingColumnIndex: receivingColIndex,\n            sortedColumnIndex: sortedColIndex,\n        });\n    }\n    moveSortedColumns(columns, receivingColumnIndex, sortedColumnIndex) {\n        const remove = columns.splice(sortedColumnIndex, 1);\n        columns.splice(receivingColumnIndex, 0, remove[0]);\n    }\n    async defaultSortingFunction(columns, receivingColumnIndex, sortedColumnIndex, useNewObject = false) {\n        const toSort = !useNewObject ? columns : [...columns];\n        this.moveSortedColumns(toSort, receivingColumnIndex, sortedColumnIndex);\n        return toSort;\n    }\n    //======== render methods ========\n    renderHeader() {\n        const hasCustomColumnsWidth = this.columnsWidth.length > 0;\n        const dataColumns = this.getVisibleColumns().map((column) => {\n            // filter\n            let filter = null;\n            if (this.showFilters) {\n                let filterValue = '';\n                if (this.filters && this.filters[column.name]) {\n                    filterValue = this.filters[column.name];\n                }\n                filter = (h(\"div\", { onMouseEnter: () => this.onColumnMouseLeave(column.name), onMouseLeave: () => this.onColumnMouseEnter(column.name) }, h(\"kup-text-input\", { class: \"datatable-filter\", initialValue: filterValue, \"data-col\": column.name, onKetchupTextInputUpdated: (e) => {\n                        this.onFilterChange(e, column.name);\n                    } })));\n            }\n            // sort\n            let sort = null;\n            if (this.sortEnabled) {\n                sort = (h(\"span\", { class: \"column-sort\", onMouseEnter: () => this.onColumnMouseLeave(column.name), onMouseLeave: () => this.onColumnMouseEnter(column.name) }, h(\"span\", { role: \"button\", \"aria-label\": \"Sort column\" // TODO\n                    ,\n                    class: 'mdi ' + this.getSortIcon(column.name), onClick: (e) => this.onColumnSort(e, column.name) })));\n            }\n            let thStyle = null;\n            if (hasCustomColumnsWidth) {\n                for (let i = 0; i < this.columnsWidth.length; i++) {\n                    const currentCol = this.columnsWidth[i];\n                    if (currentCol.column === column.name) {\n                        const width = currentCol.width.toString() + 'px';\n                        thStyle = {\n                            width,\n                            minWidth: width,\n                            maxWidth: width,\n                        };\n                        break;\n                    }\n                }\n            }\n            const columnMenuItems = [];\n            // adding grouping\n            const group = this.getGroupByName(column.name);\n            const groupLabel = group != null\n                ? 'Disattiva raggruppamento'\n                : 'Attiva raggruppamento';\n            columnMenuItems.push(h(\"li\", { role: \"menuitem\", onClick: () => this.switchColumnGroup(group, column.name) }, h(\"span\", { class: \"mdi mdi-book\" }), groupLabel));\n            columnMenuItems.push(h(\"li\", { role: \"menuitem\", onClick: () => this.kupAddColumn.emit({ column: column.name }) }, h(\"span\", { class: \"mdi mdi-table-column-plus-after\" }), \"Aggiungi colonna\"));\n            let columnMenu = null;\n            if (columnMenuItems.length !== 0) {\n                const menuClass = this.openedMenu === column.name ? 'open' : 'closed';\n                columnMenu = (h(\"div\", { class: `column-menu ${menuClass}` }, h(\"ul\", { role: \"menubar\" }, columnMenuItems)));\n            }\n            // Check if columns are droppable and sets their handlers\n            // TODO set better typing.\n            let dragHandlers = {};\n            if (this.enableSortableColumns) {\n                // Reference for drag events and what they permit or not\n                // https://html.spec.whatwg.org/multipage/dnd.html#concept-dnd-p\n                dragHandlers = {\n                    draggable: true,\n                    onDragStart: (e) => {\n                        // Sets drag data and the type of drag\n                        e.dataTransfer.setData(KupDataTableColumnDragType, JSON.stringify(column));\n                        e.dataTransfer.effectAllowed = 'move';\n                        // Remember that the current target is different from the one print out in the console\n                        // Sets which element has started the drag\n                        e.target.setAttribute(this.dragStarterAttribute, '');\n                        this.theadRef.setAttribute(this.dragFlagAttribute, '');\n                        this.columnsAreBeingDragged = true;\n                    },\n                    onDragLeave: (e) => {\n                        if (e.dataTransfer.types.indexOf(KupDataTableColumnDragType) >= 0) {\n                            e.target.removeAttribute(this.dragOverAttribute);\n                        }\n                    },\n                    onDragOver: (e) => {\n                        if (e.dataTransfer.types.indexOf(KupDataTableColumnDragType) >= 0) {\n                            const overElement = e.target;\n                            overElement.setAttribute(this.dragOverAttribute, '');\n                            // If element can have a drop effect\n                            if (!overElement.hasAttribute(this.dragStarterAttribute) &&\n                                this.columnsAreBeingDragged) {\n                                e.preventDefault(); // Mandatory to allow drop\n                                e.dataTransfer.effectAllowed = 'move';\n                            }\n                            else {\n                                e.dataTransfer.effectAllowed = 'none';\n                            }\n                        }\n                    },\n                    onDragEnd: (e) => {\n                        // When the drag has ended, checks if the element still exists or it was destroyed by the JSX\n                        const dragStarter = e.target;\n                        if (dragStarter) {\n                            // IF it still exists, removes the attribute so that it can perform a new drag again\n                            dragStarter.removeAttribute(this.dragStarterAttribute);\n                        }\n                        this.theadRef.removeAttribute(this.dragFlagAttribute);\n                        this.columnsAreBeingDragged = false;\n                    },\n                    onDrop: (e) => {\n                        if (e.dataTransfer.types.indexOf(KupDataTableColumnDragType) >= 0) {\n                            const transferredData = JSON.parse(e.dataTransfer.getData(KupDataTableColumnDragType));\n                            e.preventDefault();\n                            e.target.removeAttribute(this.dragOverAttribute);\n                            // We are sure the tables have been dropped in a valid location -> starts sorting the columns\n                            this.handleColumnSort(column, transferredData);\n                        }\n                    },\n                };\n            }\n            return (h(\"th\", Object.assign({ style: thStyle, onMouseEnter: () => this.onColumnMouseEnter(column.name), onMouseLeave: () => this.onColumnMouseLeave(column.name) }, dragHandlers), h(\"span\", { class: \"column-title\" }, column.title), sort, filter, columnMenu));\n        });\n        let multiSelectColumn = null;\n        if (this.multiSelection) {\n            const style = {\n                width: '30px',\n                margin: '0 auto',\n            };\n            multiSelectColumn = (h(\"th\", { style: style }, h(\"input\", { type: \"checkbox\", onChange: (e) => this.onSelectAll(e), title: `selectedRow: ${this.selectedRows.length} - renderedRows: ${this.renderedRows.length}`, checked: this.selectedRows.length > 0 &&\n                    this.selectedRows.length ===\n                        this.renderedRows.length })));\n        }\n        let groupColumn = null;\n        if (this.isGrouping() && this.hasTotals()) {\n            groupColumn = h(\"th\", null);\n        }\n        let actionsColumn = null;\n        if (this.hasRowActions()) {\n            actionsColumn = h(\"th\", null);\n        }\n        return [multiSelectColumn, groupColumn, actionsColumn, ...dataColumns];\n    }\n    renderFooter() {\n        if (!this.hasTotals()) {\n            // no footer\n            return null;\n        }\n        const footerCells = this.getVisibleColumns().map(({ name }) => (h(\"td\", null, this.footer[name])));\n        let selectRowCell = null;\n        if (this.multiSelection) {\n            selectRowCell = h(\"td\", null);\n        }\n        let groupingCell = null;\n        if (this.isGrouping() && this.hasTotals()) {\n            groupingCell = h(\"td\", null);\n        }\n        const footer = (h(\"tfoot\", null, h(\"tr\", null, selectRowCell, groupingCell, footerCells)));\n        return footer;\n    }\n    renderRow(row, level = 0, previousRow) {\n        const visibleColumns = this.getVisibleColumns();\n        if (row.group) {\n            if (row.group.children.length === 0) {\n                // empty group\n                return null;\n            }\n            let icon = 'mdi mdi-chevron-' + (row.group.expanded ? 'right' : 'down');\n            const jsxRows = [];\n            let indent = [];\n            for (let i = 0; i < level; i++) {\n                indent.push(h(\"span\", { class: \"indent\" }));\n            }\n            if (this.hasTotals()) {\n                const cells = [];\n                // adding 'grouping' cell\n                const colSpan = this.multiSelection ? 2 : 1;\n                cells.push(h(\"td\", { colSpan: colSpan }, indent, h(\"span\", { role: \"button\", \"aria-label\": \"Row expander\" // TODO change this label\n                    ,\n                    class: icon, onClick: (e) => {\n                        e.stopPropagation();\n                        this.onRowExpand(row);\n                    } }), row.group.label));\n                for (let column of visibleColumns) {\n                    cells.push(h(\"td\", { class: \"total\" }, row.group.totals[column.name]));\n                }\n                jsxRows.push(h(\"tr\", { class: \"group\", onClick: () => this.onRowExpand(row) }, cells));\n            }\n            else {\n                jsxRows.push(h(\"tr\", { class: \"group\", onClick: () => this.onRowExpand(row) }, h(\"td\", { colSpan: this.calculateColspan() }, indent, h(\"span\", { role: \"button\", \"aria-label\": \"Row expander\" // TODO change this label\n                    ,\n                    class: `row-expander ${icon}`, onClick: (e) => {\n                        e.stopPropagation();\n                        this.onRowExpand(row);\n                    } }), row.group.label)));\n            }\n            // if group is expanded, add children\n            if (this.isGroupExpanded(row)) {\n                row.group.children\n                    // We must pass the previous element of the array to check if we must hide or display the value of the cell\n                    // When the column has specified the parameter hideValuesRepetitions\n                    .map((row, groupRowIndex, currentArray) => this.renderRow(row, level + 1, groupRowIndex > 0\n                    ? currentArray[groupRowIndex - 1]\n                    : null))\n                    .forEach((jsxRow) => {\n                    if (Array.isArray(jsxRow)) {\n                        jsxRow.forEach((jr) => jsxRows.push(jr));\n                    }\n                    else {\n                        jsxRows.push(jsxRow);\n                    }\n                });\n            }\n            // grouping row\n            return jsxRows;\n        }\n        else {\n            const cells = visibleColumns.map((currentColumn, index) => {\n                const { name, hideValuesRepetitions } = currentColumn;\n                let indend = [];\n                if (index === 0 && !(this.isGrouping() && this.hasTotals())) {\n                    for (let i = 0; i < level; i++) {\n                        indend.push(h(\"span\", { class: \"indent\" }));\n                    }\n                }\n                const cell = row.cells[name];\n                let options = null;\n                /**\n                 * Options must be rendered when the option field is specified AND (one of the following):\n                 * 1 - Column do not have to hide repetitions\n                 * 2 - Column has to hide repetitions but we are printing the first row.\n                 * 3 - Column has to hide repetitions but the value of the previous row is not equal to the current row cell.\n                 * @todo Move this rendering, if possible, inside renderCell()\n                 */\n                if (cell.options &&\n                    (!hideValuesRepetitions ||\n                        (hideValuesRepetitions &&\n                            (!previousRow ||\n                                previousRow.cells[name].value !== cell.value)))) {\n                    options = (h(\"span\", { class: \"options\", role: \"button\", \"aria-label\": \"Opzioni oggetto\", title: \"Opzioni oggetto\", onClick: () => this.onOptionClicked(name, row) }, h(\"i\", { class: \"mdi mdi-settings\" })));\n                }\n                const jsxCell = this.renderCell(cell, name, \n                // The previous value must be passed only if repeated values can be hidden and we have a previous row.\n                {\n                    row,\n                    column: currentColumn,\n                }, hideValuesRepetitions && previousRow\n                    ? previousRow.cells[name].value\n                    : null);\n                const cellClass = {\n                    number: isNumber(cell.obj),\n                };\n                let cellStyle = null;\n                if (!this.styleHasBorderRadius(cell)) {\n                    cellStyle = cell.style;\n                }\n                return (h(\"td\", { \"data-column\": name, style: cellStyle, class: cellClass }, indend, jsxCell, options));\n            });\n            let selectRowCell = null;\n            if (this.multiSelection) {\n                selectRowCell = (h(\"td\", null, h(\"input\", { type: \"checkbox\", checked: this.selectedRows.includes(row), onClick: (e) => e.stopPropagation(), onChange: (e) => this.onRowCheckboxSelection(e, row) })));\n            }\n            let groupingCell = null;\n            if (this.isGrouping() && this.hasTotals()) {\n                groupingCell = h(\"td\", null);\n            }\n            // adding row to rendered rows\n            this.renderedRows.push(row);\n            let rowActionsCell = null;\n            if (this.hasRowActions()) {\n                const defaultRowActions = this.renderActions(this.rowActions, row, 'default');\n                let rowActionExpander = null;\n                let variableActions = null;\n                if (row.actions) {\n                    // adding variable actions\n                    variableActions = this.renderActions(row.actions, row, 'variable');\n                }\n                else {\n                    // adding expander\n                    rowActionExpander = (h(\"span\", { title: \"Espandi voci\", class: `row-action mdi mdi-chevron-right`, onClick: (e) => this.onRowActionExpanderClick(e, row), role: \"button\", \"aria-label\": \"Espandi voci\", \"aria-pressed\": \"false\" }));\n                }\n                rowActionsCell = (h(\"td\", null, defaultRowActions, rowActionExpander, variableActions));\n            }\n            const rowClass = {\n                selected: this.selectedRows.includes(row),\n            };\n            return (h(\"tr\", { class: rowClass, onClick: (e) => this.onRowClick(e, row) }, selectRowCell, groupingCell, rowActionsCell, cells));\n        }\n    }\n    renderActions(actions, row, type) {\n        return actions.map((action, index) => {\n            return (h(\"span\", { title: action.text, class: `row-action ${action.icon}`, onClick: (e) => this.onDefaultRowActionClick(e, {\n                    action,\n                    index,\n                    row,\n                    type,\n                }), role: \"button\", \"aria-label\": action.text, \"aria-pressed\": \"false\" }));\n        });\n    }\n    /**\n     * FActory function for cells.\n     * @param cell - cell object\n     * @param column - the cell's column name\n     * @param previousRowCellValue - An optional value of the previous cell on the same column. If set and equal to the value of the current cell, makes the value of the current cell go blank.\n     * @param cellData - Additional data for the current cell.\n     * @param cellData.column - The column object to which the cell belongs.\n     * @param cellData.row - The row object to which the cell belongs.\n     */\n    renderCell(cell, column, cellData, previousRowCellValue) {\n        // When the previous row value is different from the current value, we can show the current value.\n        const valueToDisplay = previousRowCellValue !== cell.value ? cell.value : '';\n        // Sets the default value\n        let content = valueToDisplay;\n        if (isIcon(cell.obj) || isVoCodver(cell.obj)) {\n            content = h(\"span\", { class: valueToDisplay });\n        }\n        else if (isImage(cell.obj)) {\n            content = (h(\"img\", { src: valueToDisplay, alt: \"\", width: \"64\", height: \"64\" }));\n        }\n        else if (isLink(cell.obj)) {\n            content = (h(\"a\", { href: valueToDisplay, target: \"_blank\" }, valueToDisplay));\n        }\n        else if (isCheckbox(cell.obj)) {\n            content = (h(\"kup-checkbox\", { checked: !!cell.obj.k, disabled: cellData &&\n                    cellData.row &&\n                    cellData.row.hasOwnProperty('readOnly')\n                    ? cellData.row.readOnly\n                    : true }));\n        }\n        else if (isButton(cell.obj)) {\n            /**\n             * Here either using .bind() or () => {} function would bring more or less the same result.\n             * Both those syntax would create at run time a new function for each cell on which they're rendered.\n             * (See references below.)\n             *\n             * Another solution would be to simply bind an event handler like this:\n             * onKupButtonClicked={this.onJ4btnClicked}\n             *\n             * The problem here is that, by using that syntax:\n             * 1 - Each time a cell is rendered with an object item, either the cell or button must have a data-row,\n             *      data-column and data-cell-name attributes which stores the index of cell's and the name of the clicked cell;\n             * 2 - each time a click event is triggered, the handler reads the row and column index set on the element;\n             * 3 - searches those column and row inside the current data for the table;\n             * 4 - once the data is found, creates the custom event with the data to be sent.\n             *\n             * Currently there is no reason to perform such a search, but it may arise if on large data tables\n             * there is a significant performance loss.\n             * @see https://reactjs.org/docs/handling-events.html\n             */\n            content = (h(\"kup-button\", Object.assign({}, createJ4objButtonConfig(cell), { onKupButtonClicked: this.onJ4btnClicked.bind(this, cellData ? cellData.row : null, cellData ? cellData.column : null, cell) })));\n        }\n        else if (isBar(cell.obj)) {\n            const props = {\n                value: cell.value,\n            };\n            // check if column has width\n            if (this.columnsWidth && this.columnsWidth[column]) {\n                props.width = this.columnsWidth[column];\n            }\n            // Controls if we should display this cell value\n            content = valueToDisplay ? h(\"kup-graphic-cell\", Object.assign({}, props)) : null;\n        }\n        // TODO\n        // else if (isProgressBar(cell.obj)) {\n        //     content = <kup-progress-bar />;\n        // }\n        // if cell.style has border, apply style to cellcontent\n        let style = null;\n        if (this.styleHasBorderRadius(cell)) {\n            style = cell.style;\n        }\n        return (h(\"span\", { class: \"cell-content\", style: style }, content));\n    }\n    renderLoadMoreButton(isSlotted = true) {\n        const label = 'Carica altri dati';\n        return (h(\"button\", { \"aria-label\": label, class: \"load-more-records mdi mdi-plus-circle\", role: \"button\", slot: isSlotted ? 'more-results' : null, tabindex: \"0\", title: label, onClick: () => this.onLoadMoreClick() }));\n    }\n    render() {\n        // resetting rows\n        this.renderedRows = [];\n        let rows = null;\n        if (this.paginatedRows.length === 0) {\n            rows = (h(\"tr\", null, h(\"td\", { colSpan: this.calculateColspan() }, \"Empty data\")));\n        }\n        else {\n            rows = [];\n            this.paginatedRows\n                // We must pass the previous element of the array to check if we must hide or display the value of the cell\n                // When the column has specified the parameter hideValuesRepetitions\n                .map((row, rowIndex, currentArray) => this.renderRow(row, 0, rowIndex > 0 ? currentArray[rowIndex - 1] : null))\n                .forEach((jsxRow) => {\n                if (Array.isArray(jsxRow)) {\n                    jsxRow.forEach((jr) => rows.push(jr));\n                }\n                else {\n                    rows.push(jsxRow);\n                }\n            });\n        }\n        // header\n        // for multi selection purposes, this should be called before this.renderedRows has been evaluated\n        const header = this.renderHeader();\n        // footer\n        const footer = this.renderFooter();\n        let globalFilter = null;\n        if (this.globalFilter) {\n            globalFilter = (h(\"div\", { id: \"globalFilter\" }, h(\"kup-text-input\", { label: \"Global filter\", onKetchupTextInputUpdated: (event) => this.onGlobalFilterChange(event) })));\n        }\n        let paginatorTop = null;\n        if (PaginatorPos.TOP === this.paginatorPos ||\n            PaginatorPos.BOTH === this.paginatorPos) {\n            paginatorTop = (h(\"kup-paginator\", { id: \"top-paginator\", max: this.rows.length, perPage: this.rowsPerPage, selectedPerPage: this.currentRowsPerPage, currentPage: this.currentPage, onKupPageChanged: (e) => this.handlePageChanged(e), onKupRowsPerPageChanged: (e) => this.handleRowsPerPageChanged(e) }, this.showLoadMore ? this.renderLoadMoreButton() : null));\n        }\n        let paginatorBottom = null;\n        if (PaginatorPos.BOTTOM === this.paginatorPos ||\n            PaginatorPos.BOTH === this.paginatorPos) {\n            paginatorBottom = (h(\"kup-paginator\", { id: \"bottom-paginator\", max: this.rows.length, perPage: this.rowsPerPage, selectedPerPage: this.currentRowsPerPage, currentPage: this.currentPage, onKupPageChanged: (e) => this.handlePageChanged(e), onKupRowsPerPageChanged: (e) => this.handleRowsPerPageChanged(e) }, this.showLoadMore ? this.renderLoadMoreButton() : null));\n        }\n        let groupChips = null;\n        if (this.isGrouping()) {\n            const chips = this.groups.map((group) => {\n                const column = getColumnByName(this.getColumns(), group.column);\n                if (column) {\n                    return (h(\"div\", { class: \"group-chip\", tabIndex: 0, onClick: () => this.removeGroup(group) }, h(\"span\", { class: \"mdi mdi-close-circle\" }), column.title));\n                }\n                else {\n                    return null;\n                }\n            });\n            groupChips = h(\"div\", { id: \"group-chips\" }, chips);\n        }\n        const densityPanel = (h(\"div\", { id: \"density-panel\" }, h(\"kup-button\", { class: { active: this.density === 'small' }, iconClass: \"mdi mdi-format-align-justify\", onClick: () => (this.density = 'small') }), h(\"kup-button\", { class: { active: this.density === 'medium' }, iconClass: \"mdi mdi-menu\", onClick: () => (this.density = 'medium') }), h(\"kup-button\", { class: { active: this.density === 'big' }, iconClass: \"mdi mdi-view-sequential\", onClick: () => (this.density = 'big') })));\n        const tableClass = {\n            'column-separation': ShowGrid.COMPLETE === this.showGrid ||\n                ShowGrid.COL === this.showGrid,\n            'row-separation': ShowGrid.COMPLETE === this.showGrid ||\n                ShowGrid.ROW === this.showGrid,\n            'persistent-header': this.headerIsPersistent,\n        };\n        tableClass[`density-${this.density}`] = true;\n        return (h(\"div\", { id: \"data-table-wrapper\" }, h(\"div\", { class: \"above-wrapper\" }, paginatorTop, globalFilter, densityPanel), h(\"div\", { class: \"below-wrapper\" }, groupChips, h(\"table\", { class: tableClass }, h(\"thead\", { hidden: !this.showHeader, ref: (el) => (this.theadRef = el) }, h(\"tr\", null, header)), h(\"tbody\", null, rows), footer)), paginatorBottom));\n    }\n    static get watchers() { return {\n        \"rowsPerPage\": [\"rowsPerPageHandler\", \"recalculateRows\"],\n        \"expandGroups\": [\"expandGroupsHandler\"],\n        \"data\": [\"recalculateRows\"],\n        \"sort\": [\"recalculateRows\"],\n        \"filters\": [\"recalculateRows\"],\n        \"globalFilterValue\": [\"recalculateRows\"],\n        \"groups\": [\"recalculateRows\"],\n        \"totals\": [\"recalculateRows\"],\n        \"currentPage\": [\"recalculateRows\"],\n        \"currentRowsPerPage\": [\"recalculateRows\"]\n    }; }\n    static get style() { return \"\\@import url(https://cdn.materialdesignicons.com/3.6.95/css/materialdesignicons.min.css);:host{--int_background-color:var(--kup-data-table_background-color,#fff);--int_border-color:var(--kup-data-table_border-color,#000);--int_box-shadow:var(--kup-data-table_box-shadow,0px 0px 7.5px 0px hsla(0,0%,50.2%,0.5));--int_color:var(--kup-data-table_color,$mainTextColor);--int_drag-over--allowed:var(--kup-data-table_drag-over--allowed,rgba(78,144,143,0.24));--int_drag-over--forbidden:var(--kup-data-table_drag-over--forbidden,rgba(240,66,60,0.24));--int_filter-border-color:var(--kup-data-table_filter-border-color,#d0d0d0);--int_filter-background-color:var(--kup-data-table_filter-background-color,#fff);--int_group-background-color:var(--kup-data-table_group-background-color,#f9f9f9);--int_group-border-color:var(--kup-data-table_group-border-color,#6aaaa7);--int_hover-color:var(--kup-data-table_hover-color,$mainTextColor);--int_head-background-color:var(--kup-data-table_head-background-color,#f9f9f9);--int_header-offset:var(--kup-data-table_header-offset,50px);--int_hover-background-color:var(--kup-data-table_hover-background-color,#e0e0e0);--int_icons-color:var(--kup-data-table_icons-color,grey);--int_icons-hover-color:var(--kup-data-table_icons-hover-color,#a0a0a0);--int_font-size:var(--kup-data-table_font-size,1rem);--int_main-color:var(--kup-data-table_main-color,#6aaaa7);--int_stronger-color:var(--kup-data-table_stronger-color,#111);--int_text-on-main-color:var(--kup-data-table_text-on-main-color,#fff)}#data-table-wrapper{background-color:var(--int_background-color)}#data-table-wrapper table{color:var(--int_stronger-color);width:100%;min-width:intrinsic;min-width:-moz-max-content;min-width:-webkit-max-content;border-collapse:collapse;text-align:left;font-size:var(--int_font-size)}#data-table-wrapper table td,#data-table-wrapper table th{padding:.5rem 1rem}#data-table-wrapper table.row-separation tr{border-bottom:1px solid var(--int_border-color)}#data-table-wrapper table.column-separation td,#data-table-wrapper table.column-separation th{border-right:1px solid var(--int_border-color)}#data-table-wrapper table .column-sort{margin-left:.5rem;cursor:pointer}#data-table-wrapper table .column-sort .mdi{-webkit-transition:color .2s ease-in-out;transition:color .2s ease-in-out}#data-table-wrapper table .column-sort .mdi-sort-ascending,#data-table-wrapper table .column-sort .mdi-sort-descending{color:var(--int_main-color)}#data-table-wrapper table th kup-text-input.datatable-filter{--int_border-color:var(--int_filter-border-color);--int_background-color:var(--int_filter-background-color)}#data-table-wrapper table th input{display:block}#data-table-wrapper table thead{background:var(--int_head-background-color);border:1px solid var(--int_border-color);font-size:115%}#data-table-wrapper table thead th{position:relative}#data-table-wrapper table thead[columns-dragging] [drag-over]{background-color:var(--int_drag-over--allowed)}#data-table-wrapper table thead[columns-dragging] [drag-over]>*{pointer-events:none}#data-table-wrapper table thead[columns-dragging] [drag-over][drag-starter]{background-color:var(--int_drag-over--forbidden)}#data-table-wrapper table.persistent-header{border-top:1px solid var(--int_border-color);position:relative}#data-table-wrapper table.persistent-header thead{border-color:var(--int_border-color);border-style:solid;border-width:0 1px 0}#data-table-wrapper table.persistent-header thead th{background-color:var(--int_head-background-color);-webkit-box-shadow:var(--int_box-shadow);box-shadow:var(--int_box-shadow);position:-webkit-sticky;position:sticky;top:var(--int_header-offset);will-change:transform}#data-table-wrapper table.persistent-header tbody{border-top:3px solid var(--int_border-color)}#data-table-wrapper table tbody{border:1px solid var(--int_border-color);cursor:pointer;font-size:100%}#data-table-wrapper table tbody>tr.selected>td,#data-table-wrapper table tbody>tr:hover>td{color:var(--int_hover-color);background-color:var(--int_hover-background-color)}#data-table-wrapper table tbody>tr.group{background:var(--int_group-background-color);font-weight:700;border-top:1px solid var(--int_border-color)}#data-table-wrapper table tbody>tr.group td{padding:1rem 0}#data-table-wrapper table tbody>tr.group td.total{text-align:right;padding-right:1rem}#data-table-wrapper table tbody>tr.group icon{margin-right:.5rem}#data-table-wrapper table tbody>tr>td.number{text-align:right}#data-table-wrapper table tbody>tr>td .row-expander{margin-right:.5rem}#data-table-wrapper table tbody>tr>td .indent{display:inline-block;height:1rem;width:2rem}#data-table-wrapper table tbody>tr>td .options{font-size:100%;margin-left:.5rem;color:var(--int_icons-color)}#data-table-wrapper table tbody>tr>td .options:hover{color:var(--int_icons-hover-color)}#data-table-wrapper table tbody>tr>td .row-action{margin-right:.2rem}#data-table-wrapper table tfoot{font-size:110%}#data-table-wrapper table tfoot td{text-align:right}#data-table-wrapper table.noGrid,#data-table-wrapper table.noGrid td{border:none}#data-table-wrapper table.density-small tbody>tr>td{padding-top:.2rem;padding-bottom:.2rem}#data-table-wrapper table.density-small tbody>tr.group>td{padding-top:.75rem;padding-bottom:.75rem}#data-table-wrapper table.density-big tbody>tr>td{padding-top:1rem;padding-bottom:1rem}#data-table-wrapper table.density-big tbody>tr.group>td{padding-top:1.25rem;padding-bottom:1.25rem}#globalFilter{margin-bottom:.5rem;text-align:center}#group-chips{display:-ms-flexbox;display:flex;margin-bottom:.5rem}#group-chips>.group-chip{display:-ms-flexbox;display:flex;background-color:var(--int_main-color);padding:.5rem;color:var(--int_text-on-main-color);margin-right:.5rem;cursor:pointer;-webkit-transition:opacity .2s ease-in-out;transition:opacity .2s ease-in-out}#group-chips>.group-chip icon{margin-right:.5rem}#group-chips>.group-chip:hover{opacity:.75}.column-menu{background-color:var(--int_background-color);-webkit-box-shadow:var(--int_box-shadow);box-shadow:var(--int_box-shadow);color:var(--int_color);position:absolute;z-index:100;font-weight:400;-webkit-transition:opacity .2s ease-in-out;transition:opacity .2s ease-in-out;min-width:200px;min-width:-moz-max-content;min-width:-webkit-max-content}.column-menu.closed{display:none;opacity:0}.column-menu.open{display:block;opacity:1;-webkit-animation:display-none-transition .5s both;-webkit-animation-timing-function:cubic-bezier(.67,-.81,.89,.71);animation:display-none-transition .5s both;animation-timing-function:cubic-bezier(.67,-.81,.89,.71)}.column-menu ul{list-style-type:none;margin:0;padding:0}.column-menu ul>li{padding:.8rem;font-size:1rem;-webkit-transition:color .2s ease-in-out;transition:color .2s ease-in-out}.column-menu ul>li:hover{cursor:pointer;color:var(--int_main-color)}.column-menu ul>li .mdi{margin-right:.5rem}#density-panel{text-align:center}#density-panel kup-button{--kup-button_main-color:transparent;--kup-button_opacity:0.25;--kup-button_icon-color:var(--int_main-color);--kup-button_box-shadow:none}#density-panel kup-button:hover{--kup-button_opacity:0.75}#density-panel kup-button.active{--kup-button_opacity:1}\\@-webkit-keyframes display-none-transition{0%{opacity:0}}\\@keyframes display-none-transition{0%{opacity:0}}.load-more-records{background-color:transparent;border:0 none;color:var(--int_icons-color);cursor:pointer;display:inline-block;font-size:calc(var(--int_font-size) *1.2);height:calc(var(--int_font-size) *1.2);margin:0 6px;padding:0;-webkit-transition:color .3s;transition:color .3s;width:calc(var(--int_font-size) *1.2)}.load-more-records:hover{color:var(--int_icons-hover-color)}.load-more-records:before{height:inherit;width:inherit}\"; }\n}\n\nexport { KupDataTable as kup_data_table };\n"],"sourceRoot":"webpack:///"}