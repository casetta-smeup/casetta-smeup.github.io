{"version":3,"sources":["src/assets/dist/esm/kup-data-table.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, c as createEvent, h } from './chunk-1851c479.js';\nimport './chunk-d8060b98.js';\nimport { L as LoadMoreMode, P as PaginatorPos, h as ShowGrid, j as calcTotals, p as paginateRows, f as filterRows, S as SortMode, k as groupRows, s as sortRows, l as isIcon, o as isVoCodver, b as isImage, q as isLink, r as isCheckbox, c as isButton, d as createJ4objButtonConfig, t as isBar, g as getColumnByName, K as KupDataTableColumnDragType, i as isNumber } from './chunk-621f9806.js';\n\nclass KupDataTable {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.columnsWidth = [];\n        /**\n         * Enables sorting of the columns by dragging them into different columns\n         */\n        this.enableSortableColumns = false;\n        this.expandGroups = false;\n        this.filters = {};\n        this.globalFilter = false;\n        this.groups = [];\n        /**\n         * If table header is visible and this prop is set to true, the header will be visible while scrolling the table.\n         * To make this work, it must be configured together with the data-table CSS property --kup-data-table_header-offset.\n         * It uses CSS position: sticky.\n         * @version 1.0\n         * @namespace KupDataTable.headerIsPersistent\n         * @see KupDataTable.showHeader\n         * @see https://caniuse.com/#feat=css-sticky\n         */\n        this.headerIsPersistent = false;\n        this.multiSelection = false;\n        /**\n         * Sets a maximum limit of new records which can be required by the load more functionality.\n         */\n        this.loadMoreLimit = 1000;\n        /**\n         * The number of records which will be requested to be downloaded when clicking on the load more button.\n         *\n         * This property is regulated also by loadMoreMode.\n         * @see loadMoreMode\n         * @see loadMoreLimit\n         */\n        this.loadMoreStep = 60;\n        /**\n         * Establish the modality of how many new records will be downloaded.\n         *\n         * This property is regulated also by loadMoreStep.\n         * @see loadMoreStep\n         * @see loadMoreLimit\n         */\n        this.loadMoreMode = LoadMoreMode.PROGRESSIVE_THRESHOLD;\n        this.paginatorPos = PaginatorPos.TOP;\n        this.rowsPerPage = 10;\n        /**\n         * Enables rendering of the table header.\n         * @namespace KupDataTable.showHeader\n         */\n        this.showHeader = true;\n        this.showFilters = false;\n        this.showGrid = ShowGrid.COMPLETE;\n        /**\n         * If set to true, displays the button to load more records.\n         */\n        this.showLoadMore = false;\n        this.sortEnabled = true;\n        this.sort = [];\n        /**\n         * If set to true, when a column is dragged to be sorted the component directly mutates the data.columns property\n         * and then fires the event\n         */\n        this.sortableColumnsMutateData = true;\n        //---- State ----\n        this.globalFilterValue = '';\n        this.currentPage = 1;\n        this.currentRowsPerPage = 10;\n        this.selectedRows = [];\n        this.groupState = {};\n        /**\n         * name of the column with an open menu\n         */\n        this.openedMenu = null;\n        this.density = 'medium';\n        this.renderedRows = [];\n        this.loadMoreEventCounter = 0;\n        this.loadMoreEventPreviousQuantity = 0;\n        /**\n         * Internal not reactive state used to keep track if a column is being dragged.\n         * @private\n         */\n        this.columnsAreBeingDragged = false;\n        /**\n         * Attribute to set when a column is being dragged on the whole thead element\n         * @const\n         * @default 'columns-dragging'\n         * @private\n         */\n        this.dragFlagAttribute = 'columns-dragging';\n        /**\n         * The string representing the drag over attribute\n         * @const\n         * @default 'drag-over'\n         * @private\n         */\n        this.dragOverAttribute = 'drag-over';\n        /**\n         * The string representing the drag starter attribute to set onto the element\n         * @const\n         * @default 'drag-starter'\n         * @private\n         */\n        this.dragStarterAttribute = 'drag-starter';\n        this.kupAutoRowSelect = createEvent(this, \"kupAutoRowSelect\", 6);\n        this.kupRowSelected = createEvent(this, \"kupRowSelected\", 6);\n        this.kupOptionClicked = createEvent(this, \"kupOptionClicked\", 6);\n        this.kupAddColumn = createEvent(this, \"kupAddColumn\", 6);\n        this.kupRowActionClicked = createEvent(this, \"kupRowActionClicked\", 6);\n        this.kupLoadMoreClicked = createEvent(this, \"kupLoadMoreClicked\", 6);\n        this.kupCellButtonClicked = createEvent(this, \"kupCellButtonClicked\", 6);\n        this.kupDataTableSortedColumn = createEvent(this, \"kupDataTableSortedColumn\", 6);\n    }\n    rowsPerPageHandler(newValue) {\n        this.currentRowsPerPage = newValue;\n    }\n    expandGroupsHandler() {\n        // reset group state\n        this.groupState = {};\n        this.forceGroupExpansion();\n    }\n    recalculateRows() {\n        this.initRows();\n    }\n    // private theadObserver = new IntersectionObserver(\n    //     (entries) => {\n    //         entries.forEach((entry) => {\n    //             if (entry.intersectionRatio === 1) {\n    //                 // fully visible\n    //                 console.log('fully visible', entry.target);\n    //             } else if (entry.intersectionRatio === 0) {\n    //                 // hidden\n    //                 console.log('hidden', entry.target);\n    //             }\n    //         });\n    //     },\n    //     {\n    //         threshold: [0, 0.5, 1],\n    //         rootMargin: '-100px 0px 0px 0px',\n    //     }\n    // );\n    // lifecycle\n    componentWillLoad() {\n        this.rowsPerPageHandler(this.rowsPerPage);\n        this.initRows();\n        if (this.expandGroups) {\n            this.forceGroupExpansion();\n        }\n    }\n    componentDidLoad() {\n        // observing table\n        // this.theadObserver.observe(this.theadRef);\n        // automatic row selection\n        if (this.selectRow && this.selectRow > 0) {\n            if (this.selectRow <= this.renderedRows.length) {\n                this.selectedRows = [];\n                this.selectedRows.push(this.renderedRows[this.selectRow - 1]);\n                this.kupAutoRowSelect.emit({\n                    selectedRow: this.selectedRows[0],\n                });\n            }\n        }\n    }\n    getColumns() {\n        return this.data && this.data.columns\n            ? this.data.columns\n            : [{ title: '', name: '', size: 0 }];\n    }\n    getVisibleColumns() {\n        const visibleColumns = this.getColumns().filter((column) => {\n            if (column.hasOwnProperty('visible')) {\n                return column.visible;\n            }\n            return true;\n        });\n        // check grouping\n        if (this.isGrouping()) {\n            // filtering column based on group visibility\n            return visibleColumns.filter((column) => {\n                // check if in group\n                let group = null;\n                for (let currentGroup of this.groups) {\n                    if (currentGroup.column === column.name) {\n                        group = currentGroup;\n                        break;\n                    }\n                }\n                if (group) {\n                    // return true if\n                    // 1) group obj has not the 'visible' property or\n                    // 2) group has 'visible' property and it is true\n                    return !group.hasOwnProperty('visible') || group.visible;\n                }\n                // not in group -> visible\n                return true;\n            });\n        }\n        return visibleColumns;\n    }\n    getGroupByName(column) {\n        if (!this.isGrouping()) {\n            return null;\n        }\n        for (let group of this.groups) {\n            if (group.column === column) {\n                return group;\n            }\n        }\n        return null;\n    }\n    getRows() {\n        return this.data && this.data.rows ? this.data.rows : [];\n    }\n    initRows() {\n        this.filterRows();\n        this.footer = calcTotals(this.rows, this.totals);\n        this.groupRows();\n        this.sortRows();\n        this.paginatedRows = paginateRows(this.rows, this.currentPage, this.currentRowsPerPage);\n    }\n    filterRows() {\n        this.rows = filterRows(this.getRows(), this.filters, this.globalFilterValue, this.getVisibleColumns().map((c) => c.name));\n    }\n    isGrouping() {\n        return this.groups && this.groups.length > 0;\n    }\n    hasRowActions() {\n        return this.rowActions !== undefined;\n    }\n    removeGroup(group) {\n        // resetting group state\n        this.groupState = {};\n        const index = this.groups.indexOf(group);\n        if (index >= 0) {\n            // removing group from prop\n            this.groups.splice(index, 1);\n            this.groups = [...this.groups];\n        }\n    }\n    hasTotals() {\n        return this.totals && Object.keys(this.totals).length > 0;\n    }\n    forceGroupExpansion() {\n        this.rows.forEach((row) => this.forceRowGroupExpansion(row));\n    }\n    forceRowGroupExpansion(row) {\n        // check if row is group\n        if (!row.group) {\n            return;\n        }\n        // forcing row expanded\n        row.group.expanded = true;\n        // updating group state\n        // check if already present\n        let groupState = this.groupState[row.group.id];\n        if (!groupState) {\n            groupState = {\n                expanded: this.expandGroups,\n            };\n        }\n        else {\n            groupState.expanded = this.expandGroups;\n        }\n        this.groupState[row.group.id] = groupState;\n        if (row.group.children) {\n            row.group.children.forEach((childRow) => this.forceRowGroupExpansion(childRow));\n        }\n    }\n    // event listeners\n    onColumnSort({ ctrlKey }, columnName) {\n        // check if columnName is already in sort array\n        let i = 0;\n        for (; i < this.sort.length; i++) {\n            const sortObj = this.sort[i];\n            if (sortObj.column === columnName) {\n                break;\n            }\n        }\n        if (i < this.sort.length) {\n            // already in array... switching sort\n            const sortObj = this.sort[i];\n            const newSortObj = Object.assign({}, sortObj, { sortMode: sortObj.sortMode === SortMode.A ? SortMode.D : SortMode.A });\n            if (ctrlKey) {\n                const newSort = [...this.sort];\n                newSort[i] = newSortObj;\n                this.sort = newSort;\n            }\n            else {\n                this.sort = [newSortObj];\n            }\n        }\n        else {\n            const sortObj = {\n                column: columnName,\n                sortMode: SortMode.A,\n            };\n            // if CTRL is pressed, push to array\n            // else, replace current array\n            if (ctrlKey) {\n                this.sort = [...this.sort, sortObj];\n            }\n            else {\n                this.sort = [sortObj];\n            }\n        }\n    }\n    onFilterChange({ detail }, column) {\n        // resetting current page\n        this.currentPage = 1;\n        const newFilters = Object.assign({}, this.filters);\n        if (detail.value.length === 0) {\n            delete newFilters[column];\n        }\n        else {\n            newFilters[column] = detail.value;\n        }\n        this.filters = newFilters;\n    }\n    onGlobalFilterChange({ detail }) {\n        // resetting current page\n        this.currentPage = 1;\n        this.globalFilterValue = detail.value;\n    }\n    handlePageChanged({ detail }) {\n        this.currentPage = detail.newPage;\n    }\n    handleRowsPerPageChanged({ detail }) {\n        this.currentRowsPerPage = detail.newRowsPerPage;\n    }\n    onRowClick(event, row) {\n        // selecting row\n        this.handleRowSelect(row, event.ctrlKey);\n        // checking target\n        const target = event.target;\n        let clickedColumn = null;\n        if (target instanceof HTMLElement) {\n            if (target.tagName !== 'TR') {\n                let currentElement = target;\n                while (currentElement.tagName !== 'TD') {\n                    currentElement = currentElement.parentElement;\n                }\n                clickedColumn = currentElement.dataset.column;\n            }\n        }\n        this.kupRowSelected.emit({\n            selectedRows: this.selectedRows,\n            clickedColumn,\n        });\n    }\n    onDefaultRowActionClick(e, { action, row, type, index }) {\n        e.stopPropagation();\n        this.kupRowActionClicked.emit({\n            action,\n            index,\n            row,\n            type,\n        });\n    }\n    onRowActionExpanderClick(e, row) {\n        e.stopPropagation();\n        this.kupRowActionClicked.emit({\n            row,\n            type: 'expander',\n        });\n    }\n    handleRowSelect(row, ctrlKey) {\n        if (this.multiSelection) {\n            if (ctrlKey && this.selectedRows) {\n                const index = this.selectedRows.indexOf(row);\n                if (index < 0) {\n                    // adding\n                    this.selectedRows = [...this.selectedRows, row];\n                }\n                else {\n                    // removing\n                    this.selectedRows.splice(index, 1);\n                    this.selectedRows = [...this.selectedRows];\n                }\n            }\n            else {\n                this.selectedRows = [row];\n            }\n        }\n        else {\n            this.selectedRows = [row];\n        }\n    }\n    onRowCheckboxSelection({ target }, row) {\n        if (target.checked) {\n            if (this.selectedRows.length > 0) {\n                this.selectedRows = [...this.selectedRows, row];\n            }\n            else {\n                this.selectedRows = [row];\n            }\n        }\n        else {\n            const index = this.selectedRows.indexOf(row);\n            if (index >= 0) {\n                this.selectedRows.splice(index, 1);\n                this.selectedRows = [...this.selectedRows];\n            }\n        }\n        this.kupRowSelected.emit({\n            selectedRows: this.selectedRows,\n            clickedColumn: null,\n        });\n    }\n    onRowExpand(row) {\n        // row should be a 'group' row\n        row.group.expanded = !row.group.expanded;\n        // updating group map\n        this.groupState[row.group.id].expanded = row.group.expanded;\n        // changing group state to trigger rendering\n        this.groupState = Object.assign({}, this.groupState);\n    }\n    onSelectAll({ target }) {\n        if (target.checked) {\n            // select all rows\n            this.selectedRows = this.renderedRows;\n        }\n        else {\n            // deselect all rows\n            this.selectedRows = [];\n        }\n        // triggering event\n        this.kupRowSelected.emit({\n            selectedRows: this.selectedRows,\n            clickedColumn: null,\n        });\n    }\n    onColumnMouseEnter(column) {\n        this.columnOverTimeout = setTimeout(() => {\n            this.openedMenu = column;\n        }, 500);\n    }\n    onColumnMouseLeave(column) {\n        // clearing timeout\n        clearTimeout(this.columnOverTimeout);\n        if (this.openedMenu === column) {\n            this.openedMenu = null;\n        }\n    }\n    switchColumnGroup(group, column) {\n        // resetting opened menu\n        this.openedMenu = null;\n        // reset group state\n        this.groupState = {};\n        if (group !== null) {\n            // remove from grouping\n            const index = this.groups.indexOf(group);\n            this.groups.splice(index, 1);\n            this.groups = [...this.groups];\n        }\n        else {\n            // add to groups\n            this.groups = [...this.groups, { column, visible: true }];\n        }\n    }\n    onOptionClicked(column, row) {\n        this.kupOptionClicked.emit({\n            column,\n            row,\n        });\n    }\n    onJ4btnClicked(row, column, cell) {\n        // Since this function is called with bind, the event from the kup-button gets passed into the arguments array\n        const buttonEvent = arguments[3];\n        if (buttonEvent) {\n            // Prevents double events to be fired.\n            buttonEvent.stopPropagation();\n        }\n        else {\n            throw 'kup-data-table error: missing event';\n        }\n        this.kupCellButtonClicked.emit({\n            cell,\n            column,\n            row,\n        });\n    }\n    // utility methods\n    groupRows() {\n        if (!this.isGrouping()) {\n            return;\n        }\n        this.rows = groupRows(this.getColumns(), this.rows, this.groups, this.totals);\n        this.adjustGroupState();\n    }\n    // Handler for loadMore button is clicked.\n    onLoadMoreClick() {\n        let loadItems = 0;\n        switch (this.loadMoreMode) {\n            case LoadMoreMode.CONSTANT:\n                loadItems = this.loadMoreStep;\n                break;\n            case LoadMoreMode.CONSTANT_INCREMENT:\n                loadItems = this.loadMoreStep * (this.loadMoreEventCounter + 1);\n                break;\n            case LoadMoreMode.PROGRESSIVE_THRESHOLD:\n                loadItems =\n                    Math.max(this.loadMoreEventPreviousQuantity, this.loadMoreStep) * Math.min(this.loadMoreEventCounter + 1, 2);\n                break;\n        }\n        if (loadItems > this.loadMoreLimit) {\n            loadItems = this.loadMoreLimit;\n        }\n        this.kupLoadMoreClicked.emit({\n            loadItems,\n        });\n        this.loadMoreEventPreviousQuantity = loadItems;\n        this.loadMoreEventCounter++;\n    }\n    adjustGroupState() {\n        if (!this.rows ||\n            this.rows.length === 0 ||\n            !this.rows[0].hasOwnProperty('group')) {\n            // no grouping\n            return;\n        }\n        this.rows.forEach((r) => this.adjustGroupStateFromRow(r));\n    }\n    adjustGroupStateFromRow(row) {\n        if (!row || !row.hasOwnProperty('group')) {\n            // not a groping row, nothing to do\n            return;\n        }\n        const group = row.group;\n        // check if already in group state\n        let groupFromState = this.groupState[group.id];\n        if (!groupFromState) {\n            // add to state\n            this.groupState[group.id] = group;\n        }\n        else {\n            // update expanded\n            group.expanded = groupFromState.expanded;\n        }\n        group.children.forEach((child) => this.adjustGroupStateFromRow(child));\n    }\n    sortRows() {\n        this.rows = sortRows(this.rows, this.sort);\n    }\n    getSortIcon(columnName) {\n        // check if column in sort array\n        for (let sortObj of this.sort) {\n            if (sortObj.column === columnName) {\n                return 'A' === sortObj.sortMode\n                    ? 'mdi-sort-ascending'\n                    : 'mdi-sort-descending';\n            }\n        }\n        // default\n        return 'mdi-sort';\n    }\n    calculateColspan() {\n        let colSpan = this.getVisibleColumns().length;\n        if (this.multiSelection) {\n            colSpan += 1;\n        }\n        if (this.isGrouping() && this.hasTotals()) {\n            colSpan += 1;\n        }\n        if (this.hasRowActions()) {\n            colSpan += 1;\n        }\n        return colSpan;\n    }\n    isGroupExpanded({ group }) {\n        if (!group) {\n            return false;\n        }\n        // check if in group state\n        if (this.groupState[group.id]) {\n            return this.groupState[group.id].expanded;\n        }\n        else {\n            return false;\n        }\n    }\n    styleHasBorderRadius(cell) {\n        if (cell && cell.style && cell.style.borderRadius) {\n            return true;\n        }\n        return false;\n    }\n    //==== Column sort order methods ====\n    handleColumnSort(receivingColumn, sortedColumn) {\n        // Get receiving column position\n        const receivingColIndex = this.data.columns.findIndex((col) => col.name === receivingColumn.name &&\n            col.title === receivingColumn.title);\n        // Get sorted column current position\n        const sortedColIndex = this.data.columns.findIndex((col) => col.name === sortedColumn.name &&\n            col.title === sortedColumn.title);\n        // Moves the sortedColumn into the correct position\n        if (this.sortableColumnsMutateData) {\n            this.moveSortedColumns(this.data.columns, receivingColIndex, sortedColIndex);\n        }\n        // fires event\n        this.kupDataTableSortedColumn.emit({\n            receivingColumnIndex: receivingColIndex,\n            sortedColumnIndex: sortedColIndex,\n        });\n    }\n    moveSortedColumns(columns, receivingColumnIndex, sortedColumnIndex) {\n        const remove = columns.splice(sortedColumnIndex, 1);\n        columns.splice(receivingColumnIndex, 0, remove[0]);\n    }\n    async defaultSortingFunction(columns, receivingColumnIndex, sortedColumnIndex, useNewObject = false) {\n        const toSort = !useNewObject ? columns : [...columns];\n        this.moveSortedColumns(toSort, receivingColumnIndex, sortedColumnIndex);\n        return toSort;\n    }\n    //======== render methods ========\n    renderHeader() {\n        const hasCustomColumnsWidth = this.columnsWidth.length > 0;\n        const dataColumns = this.getVisibleColumns().map((column) => {\n            // filter\n            let filter = null;\n            if (this.showFilters) {\n                let filterValue = '';\n                if (this.filters && this.filters[column.name]) {\n                    filterValue = this.filters[column.name];\n                }\n                filter = (h(\"div\", { onMouseEnter: () => this.onColumnMouseLeave(column.name), onMouseLeave: () => this.onColumnMouseEnter(column.name) }, h(\"kup-text-input\", { class: \"datatable-filter\", initialValue: filterValue, \"data-col\": column.name, onKetchupTextInputUpdated: (e) => {\n                        this.onFilterChange(e, column.name);\n                    } })));\n            }\n            // sort\n            let sort = null;\n            if (this.sortEnabled) {\n                sort = (h(\"span\", { class: \"column-sort\", onMouseEnter: () => this.onColumnMouseLeave(column.name), onMouseLeave: () => this.onColumnMouseEnter(column.name) }, h(\"span\", { role: \"button\", \"aria-label\": \"Sort column\" // TODO\n                    ,\n                    class: 'mdi ' + this.getSortIcon(column.name), onClick: (e) => this.onColumnSort(e, column.name) })));\n            }\n            let thStyle = null;\n            if (hasCustomColumnsWidth) {\n                for (let i = 0; i < this.columnsWidth.length; i++) {\n                    const currentCol = this.columnsWidth[i];\n                    if (currentCol.column === column.name) {\n                        const width = currentCol.width.toString() + 'px';\n                        thStyle = {\n                            width,\n                            minWidth: width,\n                            maxWidth: width,\n                        };\n                        break;\n                    }\n                }\n            }\n            const columnMenuItems = [];\n            // adding grouping\n            const group = this.getGroupByName(column.name);\n            const groupLabel = group != null\n                ? 'Disattiva raggruppamento'\n                : 'Attiva raggruppamento';\n            columnMenuItems.push(h(\"li\", { role: \"menuitem\", onClick: () => this.switchColumnGroup(group, column.name) }, h(\"span\", { class: \"mdi mdi-book\" }), groupLabel));\n            columnMenuItems.push(h(\"li\", { role: \"menuitem\", onClick: () => this.kupAddColumn.emit({ column: column.name }) }, h(\"span\", { class: \"mdi mdi-table-column-plus-after\" }), \"Aggiungi colonna\"));\n            let columnMenu = null;\n            if (columnMenuItems.length !== 0) {\n                const menuClass = this.openedMenu === column.name ? 'open' : 'closed';\n                columnMenu = (h(\"div\", { class: `column-menu ${menuClass}` }, h(\"ul\", { role: \"menubar\" }, columnMenuItems)));\n            }\n            // Check if columns are droppable and sets their handlers\n            // TODO set better typing.\n            let dragHandlers = {};\n            if (this.enableSortableColumns) {\n                // Reference for drag events and what they permit or not\n                // https://html.spec.whatwg.org/multipage/dnd.html#concept-dnd-p\n                dragHandlers = {\n                    draggable: true,\n                    onDragStart: (e) => {\n                        // Sets drag data and the type of drag\n                        e.dataTransfer.setData(KupDataTableColumnDragType, JSON.stringify(column));\n                        e.dataTransfer.effectAllowed = 'move';\n                        // Remember that the current target is different from the one print out in the console\n                        // Sets which element has started the drag\n                        e.target.setAttribute(this.dragStarterAttribute, '');\n                        this.theadRef.setAttribute(this.dragFlagAttribute, '');\n                        this.columnsAreBeingDragged = true;\n                    },\n                    onDragLeave: (e) => {\n                        if (e.dataTransfer.types.indexOf(KupDataTableColumnDragType) >= 0) {\n                            e.target.removeAttribute(this.dragOverAttribute);\n                        }\n                    },\n                    onDragOver: (e) => {\n                        if (e.dataTransfer.types.indexOf(KupDataTableColumnDragType) >= 0) {\n                            const overElement = e.target;\n                            overElement.setAttribute(this.dragOverAttribute, '');\n                            // If element can have a drop effect\n                            if (!overElement.hasAttribute(this.dragStarterAttribute) &&\n                                this.columnsAreBeingDragged) {\n                                e.preventDefault(); // Mandatory to allow drop\n                                e.dataTransfer.effectAllowed = 'move';\n                            }\n                            else {\n                                e.dataTransfer.effectAllowed = 'none';\n                            }\n                        }\n                    },\n                    onDragEnd: (e) => {\n                        // When the drag has ended, checks if the element still exists or it was destroyed by the JSX\n                        const dragStarter = e.target;\n                        if (dragStarter) {\n                            // IF it still exists, removes the attribute so that it can perform a new drag again\n                            dragStarter.removeAttribute(this.dragStarterAttribute);\n                        }\n                        this.theadRef.removeAttribute(this.dragFlagAttribute);\n                        this.columnsAreBeingDragged = false;\n                    },\n                    onDrop: (e) => {\n                        if (e.dataTransfer.types.indexOf(KupDataTableColumnDragType) >= 0) {\n                            const transferredData = JSON.parse(e.dataTransfer.getData(KupDataTableColumnDragType));\n                            e.preventDefault();\n                            e.target.removeAttribute(this.dragOverAttribute);\n                            // We are sure the tables have been dropped in a valid location -> starts sorting the columns\n                            this.handleColumnSort(column, transferredData);\n                        }\n                    },\n                };\n            }\n            return (h(\"th\", Object.assign({ style: thStyle, onMouseEnter: () => this.onColumnMouseEnter(column.name), onMouseLeave: () => this.onColumnMouseLeave(column.name) }, dragHandlers), h(\"span\", { class: \"column-title\" }, column.title), sort, filter, columnMenu));\n        });\n        let multiSelectColumn = null;\n        if (this.multiSelection) {\n            const style = {\n                width: '30px',\n                margin: '0 auto',\n            };\n            multiSelectColumn = (h(\"th\", { style: style }, h(\"input\", { type: \"checkbox\", onChange: (e) => this.onSelectAll(e), title: `selectedRow: ${this.selectedRows.length} - renderedRows: ${this.renderedRows.length}`, checked: this.selectedRows.length > 0 &&\n                    this.selectedRows.length ===\n                        this.renderedRows.length })));\n        }\n        let groupColumn = null;\n        if (this.isGrouping() && this.hasTotals()) {\n            groupColumn = h(\"th\", null);\n        }\n        let actionsColumn = null;\n        if (this.hasRowActions()) {\n            actionsColumn = h(\"th\", null);\n        }\n        return [multiSelectColumn, groupColumn, actionsColumn, ...dataColumns];\n    }\n    renderFooter() {\n        if (!this.hasTotals()) {\n            // no footer\n            return null;\n        }\n        const footerCells = this.getVisibleColumns().map(({ name }) => (h(\"td\", null, this.footer[name])));\n        let selectRowCell = null;\n        if (this.multiSelection) {\n            selectRowCell = h(\"td\", null);\n        }\n        let groupingCell = null;\n        if (this.isGrouping() && this.hasTotals()) {\n            groupingCell = h(\"td\", null);\n        }\n        const footer = (h(\"tfoot\", null, h(\"tr\", null, selectRowCell, groupingCell, footerCells)));\n        return footer;\n    }\n    renderRow(row, level = 0, previousRow) {\n        const visibleColumns = this.getVisibleColumns();\n        if (row.group) {\n            if (row.group.children.length === 0) {\n                // empty group\n                return null;\n            }\n            let icon = 'mdi mdi-chevron-' + (row.group.expanded ? 'right' : 'down');\n            const jsxRows = [];\n            let indent = [];\n            for (let i = 0; i < level; i++) {\n                indent.push(h(\"span\", { class: \"indent\" }));\n            }\n            if (this.hasTotals()) {\n                const cells = [];\n                // adding 'grouping' cell\n                const colSpan = this.multiSelection ? 2 : 1;\n                cells.push(h(\"td\", { colSpan: colSpan }, indent, h(\"span\", { role: \"button\", \"aria-label\": \"Row expander\" // TODO change this label\n                    ,\n                    class: icon, onClick: (e) => {\n                        e.stopPropagation();\n                        this.onRowExpand(row);\n                    } }), row.group.label));\n                for (let column of visibleColumns) {\n                    cells.push(h(\"td\", { class: \"total\" }, row.group.totals[column.name]));\n                }\n                jsxRows.push(h(\"tr\", { class: \"group\", onClick: () => this.onRowExpand(row) }, cells));\n            }\n            else {\n                jsxRows.push(h(\"tr\", { class: \"group\", onClick: () => this.onRowExpand(row) }, h(\"td\", { colSpan: this.calculateColspan() }, indent, h(\"span\", { role: \"button\", \"aria-label\": \"Row expander\" // TODO change this label\n                    ,\n                    class: `row-expander ${icon}`, onClick: (e) => {\n                        e.stopPropagation();\n                        this.onRowExpand(row);\n                    } }), row.group.label)));\n            }\n            // if group is expanded, add children\n            if (this.isGroupExpanded(row)) {\n                row.group.children\n                    // We must pass the previous element of the array to check if we must hide or display the value of the cell\n                    // When the column has specified the parameter hideValuesRepetitions\n                    .map((row, groupRowIndex, currentArray) => this.renderRow(row, level + 1, groupRowIndex > 0\n                    ? currentArray[groupRowIndex - 1]\n                    : null))\n                    .forEach((jsxRow) => {\n                    if (Array.isArray(jsxRow)) {\n                        jsxRow.forEach((jr) => jsxRows.push(jr));\n                    }\n                    else {\n                        jsxRows.push(jsxRow);\n                    }\n                });\n            }\n            // grouping row\n            return jsxRows;\n        }\n        else {\n            const cells = visibleColumns.map((currentColumn, index) => {\n                const { name, hideValuesRepetitions } = currentColumn;\n                let indend = [];\n                if (index === 0 && !(this.isGrouping() && this.hasTotals())) {\n                    for (let i = 0; i < level; i++) {\n                        indend.push(h(\"span\", { class: \"indent\" }));\n                    }\n                }\n                const cell = row.cells[name];\n                let options = null;\n                /**\n                 * Options must be rendered when the option field is specified AND (one of the following):\n                 * 1 - Column do not have to hide repetitions\n                 * 2 - Column has to hide repetitions but we are printing the first row.\n                 * 3 - Column has to hide repetitions but the value of the previous row is not equal to the current row cell.\n                 * @todo Move this rendering, if possible, inside renderCell()\n                 */\n                if (cell.options &&\n                    (!hideValuesRepetitions ||\n                        (hideValuesRepetitions &&\n                            (!previousRow ||\n                                previousRow.cells[name].value !== cell.value)))) {\n                    options = (h(\"span\", { class: \"options\", role: \"button\", \"aria-label\": \"Opzioni oggetto\", title: \"Opzioni oggetto\", onClick: () => this.onOptionClicked(name, row) }, h(\"i\", { class: \"mdi mdi-settings\" })));\n                }\n                const jsxCell = this.renderCell(cell, name, \n                // The previous value must be passed only if repeated values can be hidden and we have a previous row.\n                {\n                    row,\n                    column: currentColumn,\n                }, hideValuesRepetitions && previousRow\n                    ? previousRow.cells[name].value\n                    : null);\n                const cellClass = {\n                    number: isNumber(cell.obj),\n                };\n                let cellStyle = null;\n                if (!this.styleHasBorderRadius(cell)) {\n                    cellStyle = cell.style;\n                }\n                return (h(\"td\", { \"data-column\": name, style: cellStyle, class: cellClass }, indend, jsxCell, options));\n            });\n            let selectRowCell = null;\n            if (this.multiSelection) {\n                selectRowCell = (h(\"td\", null, h(\"input\", { type: \"checkbox\", checked: this.selectedRows.includes(row), onClick: (e) => e.stopPropagation(), onChange: (e) => this.onRowCheckboxSelection(e, row) })));\n            }\n            let groupingCell = null;\n            if (this.isGrouping() && this.hasTotals()) {\n                groupingCell = h(\"td\", null);\n            }\n            // adding row to rendered rows\n            this.renderedRows.push(row);\n            let rowActionsCell = null;\n            if (this.hasRowActions()) {\n                const defaultRowActions = this.renderActions(this.rowActions, row, 'default');\n                let rowActionExpander = null;\n                let variableActions = null;\n                if (row.actions) {\n                    // adding variable actions\n                    variableActions = this.renderActions(row.actions, row, 'variable');\n                }\n                else {\n                    // adding expander\n                    rowActionExpander = (h(\"span\", { title: \"Espandi voci\", class: `row-action mdi mdi-chevron-right`, onClick: (e) => this.onRowActionExpanderClick(e, row), role: \"button\", \"aria-label\": \"Espandi voci\", \"aria-pressed\": \"false\" }));\n                }\n                rowActionsCell = (h(\"td\", null, defaultRowActions, rowActionExpander, variableActions));\n            }\n            const rowClass = {\n                selected: this.selectedRows.includes(row),\n            };\n            return (h(\"tr\", { class: rowClass, onClick: (e) => this.onRowClick(e, row) }, selectRowCell, groupingCell, rowActionsCell, cells));\n        }\n    }\n    renderActions(actions, row, type) {\n        return actions.map((action, index) => {\n            return (h(\"span\", { title: action.text, class: `row-action ${action.icon}`, onClick: (e) => this.onDefaultRowActionClick(e, {\n                    action,\n                    index,\n                    row,\n                    type,\n                }), role: \"button\", \"aria-label\": action.text, \"aria-pressed\": \"false\" }));\n        });\n    }\n    /**\n     * FActory function for cells.\n     * @param cell - cell object\n     * @param column - the cell's column name\n     * @param previousRowCellValue - An optional value of the previous cell on the same column. If set and equal to the value of the current cell, makes the value of the current cell go blank.\n     * @param cellData - Additional data for the current cell.\n     * @param cellData.column - The column object to which the cell belongs.\n     * @param cellData.row - The row object to which the cell belongs.\n     */\n    renderCell(cell, column, cellData, previousRowCellValue) {\n        // When the previous row value is different from the current value, we can show the current value.\n        const valueToDisplay = previousRowCellValue !== cell.value ? cell.value : '';\n        // Sets the default value\n        let content = valueToDisplay;\n        if (isIcon(cell.obj) || isVoCodver(cell.obj)) {\n            content = h(\"span\", { class: valueToDisplay });\n        }\n        else if (isImage(cell.obj)) {\n            content = (h(\"img\", { src: valueToDisplay, alt: \"\", width: \"64\", height: \"64\" }));\n        }\n        else if (isLink(cell.obj)) {\n            content = (h(\"a\", { href: valueToDisplay, target: \"_blank\" }, valueToDisplay));\n        }\n        else if (isCheckbox(cell.obj)) {\n            content = (h(\"kup-checkbox\", { checked: !!cell.obj.k, disabled: cellData &&\n                    cellData.row &&\n                    cellData.row.hasOwnProperty('readOnly')\n                    ? cellData.row.readOnly\n                    : true }));\n        }\n        else if (isButton(cell.obj)) {\n            /**\n             * Here either using .bind() or () => {} function would bring more or less the same result.\n             * Both those syntax would create at run time a new function for each cell on which they're rendered.\n             * (See references below.)\n             *\n             * Another solution would be to simply bind an event handler like this:\n             * onKupButtonClicked={this.onJ4btnClicked}\n             *\n             * The problem here is that, by using that syntax:\n             * 1 - Each time a cell is rendered with an object item, either the cell or button must have a data-row,\n             *      data-column and data-cell-name attributes which stores the index of cell's and the name of the clicked cell;\n             * 2 - each time a click event is triggered, the handler reads the row and column index set on the element;\n             * 3 - searches those column and row inside the current data for the table;\n             * 4 - once the data is found, creates the custom event with the data to be sent.\n             *\n             * Currently there is no reason to perform such a search, but it may arise if on large data tables\n             * there is a significant performance loss.\n             * @see https://reactjs.org/docs/handling-events.html\n             */\n            content = (h(\"kup-button\", Object.assign({}, createJ4objButtonConfig(cell), { onKupButtonClicked: this.onJ4btnClicked.bind(this, cellData ? cellData.row : null, cellData ? cellData.column : null, cell) })));\n        }\n        else if (isBar(cell.obj)) {\n            const props = {\n                value: cell.value,\n            };\n            // check if column has width\n            if (this.columnsWidth && this.columnsWidth[column]) {\n                props.width = this.columnsWidth[column];\n            }\n            // Controls if we should display this cell value\n            content = valueToDisplay ? h(\"kup-graphic-cell\", Object.assign({}, props)) : null;\n        }\n        // TODO\n        // else if (isProgressBar(cell.obj)) {\n        //     content = <kup-progress-bar />;\n        // }\n        // if cell.style has border, apply style to cellcontent\n        let style = null;\n        if (this.styleHasBorderRadius(cell)) {\n            style = cell.style;\n        }\n        return (h(\"span\", { class: \"cell-content\", style: style }, content));\n    }\n    renderLoadMoreButton(isSlotted = true) {\n        const label = 'Carica altri dati';\n        return (h(\"button\", { \"aria-label\": label, class: \"load-more-records mdi mdi-plus-circle\", role: \"button\", slot: isSlotted ? 'more-results' : null, tabindex: \"0\", title: label, onClick: () => this.onLoadMoreClick() }));\n    }\n    render() {\n        // resetting rows\n        this.renderedRows = [];\n        let rows = null;\n        if (this.paginatedRows.length === 0) {\n            rows = (h(\"tr\", null, h(\"td\", { colSpan: this.calculateColspan() }, \"Empty data\")));\n        }\n        else {\n            rows = [];\n            this.paginatedRows\n                // We must pass the previous element of the array to check if we must hide or display the value of the cell\n                // When the column has specified the parameter hideValuesRepetitions\n                .map((row, rowIndex, currentArray) => this.renderRow(row, 0, rowIndex > 0 ? currentArray[rowIndex - 1] : null))\n                .forEach((jsxRow) => {\n                if (Array.isArray(jsxRow)) {\n                    jsxRow.forEach((jr) => rows.push(jr));\n                }\n                else {\n                    rows.push(jsxRow);\n                }\n            });\n        }\n        // header\n        // for multi selection purposes, this should be called before this.renderedRows has been evaluated\n        const header = this.renderHeader();\n        // footer\n        const footer = this.renderFooter();\n        let globalFilter = null;\n        if (this.globalFilter) {\n            globalFilter = (h(\"div\", { id: \"globalFilter\" }, h(\"kup-text-input\", { label: \"Global filter\", onKetchupTextInputUpdated: (event) => this.onGlobalFilterChange(event) })));\n        }\n        let paginatorTop = null;\n        if (PaginatorPos.TOP === this.paginatorPos ||\n            PaginatorPos.BOTH === this.paginatorPos) {\n            paginatorTop = (h(\"kup-paginator\", { id: \"top-paginator\", max: this.rows.length, perPage: this.rowsPerPage, selectedPerPage: this.currentRowsPerPage, currentPage: this.currentPage, onKupPageChanged: (e) => this.handlePageChanged(e), onKupRowsPerPageChanged: (e) => this.handleRowsPerPageChanged(e) }, this.showLoadMore ? this.renderLoadMoreButton() : null));\n        }\n        let paginatorBottom = null;\n        if (PaginatorPos.BOTTOM === this.paginatorPos ||\n            PaginatorPos.BOTH === this.paginatorPos) {\n            paginatorBottom = (h(\"kup-paginator\", { id: \"bottom-paginator\", max: this.rows.length, perPage: this.rowsPerPage, selectedPerPage: this.currentRowsPerPage, currentPage: this.currentPage, onKupPageChanged: (e) => this.handlePageChanged(e), onKupRowsPerPageChanged: (e) => this.handleRowsPerPageChanged(e) }, this.showLoadMore ? this.renderLoadMoreButton() : null));\n        }\n        let groupChips = null;\n        if (this.isGrouping()) {\n            const chips = this.groups.map((group) => {\n                const column = getColumnByName(this.getColumns(), group.column);\n                if (column) {\n                    return (h(\"div\", { class: \"group-chip\", tabIndex: 0, onClick: () => this.removeGroup(group) }, h(\"span\", { class: \"mdi mdi-close-circle\" }), column.title));\n                }\n                else {\n                    return null;\n                }\n            });\n            groupChips = h(\"div\", { id: \"group-chips\" }, chips);\n        }\n        const densityPanel = (h(\"div\", { id: \"density-panel\" }, h(\"kup-button\", { class: { active: this.density === 'small' }, iconClass: \"mdi mdi-format-align-justify\", onClick: () => (this.density = 'small') }), h(\"kup-button\", { class: { active: this.density === 'medium' }, iconClass: \"mdi mdi-menu\", onClick: () => (this.density = 'medium') }), h(\"kup-button\", { class: { active: this.density === 'big' }, iconClass: \"mdi mdi-view-sequential\", onClick: () => (this.density = 'big') })));\n        const tableClass = {\n            'column-separation': ShowGrid.COMPLETE === this.showGrid ||\n                ShowGrid.COL === this.showGrid,\n            'row-separation': ShowGrid.COMPLETE === this.showGrid ||\n                ShowGrid.ROW === this.showGrid,\n            'persistent-header': this.headerIsPersistent,\n        };\n        tableClass[`density-${this.density}`] = true;\n        return (h(\"div\", { id: \"data-table-wrapper\" }, h(\"div\", { class: \"above-wrapper\" }, paginatorTop, globalFilter, densityPanel), h(\"div\", { class: \"below-wrapper\" }, groupChips, h(\"table\", { class: tableClass }, h(\"thead\", { hidden: !this.showHeader, ref: (el) => (this.theadRef = el) }, h(\"tr\", null, header)), h(\"tbody\", null, rows), footer)), paginatorBottom));\n    }\n    static get watchers() { return {\n        \"rowsPerPage\": [\"rowsPerPageHandler\", \"recalculateRows\"],\n        \"expandGroups\": [\"expandGroupsHandler\"],\n        \"data\": [\"recalculateRows\"],\n        \"sort\": [\"recalculateRows\"],\n        \"filters\": [\"recalculateRows\"],\n        \"globalFilterValue\": [\"recalculateRows\"],\n        \"groups\": [\"recalculateRows\"],\n        \"totals\": [\"recalculateRows\"],\n        \"currentPage\": [\"recalculateRows\"],\n        \"currentRowsPerPage\": [\"recalculateRows\"]\n    }; }\n    static get style() { return \"\\@import url(https://cdn.materialdesignicons.com/3.6.95/css/materialdesignicons.min.css);:host{--int_background-color:var(--kup-data-table_background-color,#fff);--int_border-color:var(--kup-data-table_border-color,#000);--int_box-shadow:var(--kup-data-table_box-shadow,0px 0px 7.5px 0px hsla(0,0%,50.2%,0.5));--int_color:var(--kup-data-table_color,$mainTextColor);--int_drag-over--allowed:var(--kup-data-table_drag-over--allowed,rgba(78,144,143,0.24));--int_drag-over--forbidden:var(--kup-data-table_drag-over--forbidden,rgba(240,66,60,0.24));--int_filter-border-color:var(--kup-data-table_filter-border-color,#d0d0d0);--int_filter-background-color:var(--kup-data-table_filter-background-color,#fff);--int_group-background-color:var(--kup-data-table_group-background-color,#f9f9f9);--int_group-border-color:var(--kup-data-table_group-border-color,#6aaaa7);--int_hover-color:var(--kup-data-table_hover-color,$mainTextColor);--int_head-background-color:var(--kup-data-table_head-background-color,#f9f9f9);--int_header-offset:var(--kup-data-table_header-offset,50px);--int_hover-background-color:var(--kup-data-table_hover-background-color,#e0e0e0);--int_icons-color:var(--kup-data-table_icons-color,grey);--int_icons-hover-color:var(--kup-data-table_icons-hover-color,#a0a0a0);--int_font-size:var(--kup-data-table_font-size,1rem);--int_main-color:var(--kup-data-table_main-color,#6aaaa7);--int_stronger-color:var(--kup-data-table_stronger-color,#111);--int_text-on-main-color:var(--kup-data-table_text-on-main-color,#fff)}#data-table-wrapper{background-color:var(--int_background-color)}#data-table-wrapper table{color:var(--int_stronger-color);width:100%;min-width:intrinsic;min-width:-moz-max-content;min-width:-webkit-max-content;border-collapse:collapse;text-align:left;font-size:var(--int_font-size)}#data-table-wrapper table td,#data-table-wrapper table th{padding:.5rem 1rem}#data-table-wrapper table.row-separation tr{border-bottom:1px solid var(--int_border-color)}#data-table-wrapper table.column-separation td,#data-table-wrapper table.column-separation th{border-right:1px solid var(--int_border-color)}#data-table-wrapper table .column-sort{margin-left:.5rem;cursor:pointer}#data-table-wrapper table .column-sort .mdi{-webkit-transition:color .2s ease-in-out;transition:color .2s ease-in-out}#data-table-wrapper table .column-sort .mdi-sort-ascending,#data-table-wrapper table .column-sort .mdi-sort-descending{color:var(--int_main-color)}#data-table-wrapper table th kup-text-input.datatable-filter{--int_border-color:var(--int_filter-border-color);--int_background-color:var(--int_filter-background-color)}#data-table-wrapper table th input{display:block}#data-table-wrapper table thead{background:var(--int_head-background-color);border:1px solid var(--int_border-color);font-size:115%}#data-table-wrapper table thead th{position:relative}#data-table-wrapper table thead[columns-dragging] [drag-over]{background-color:var(--int_drag-over--allowed)}#data-table-wrapper table thead[columns-dragging] [drag-over]>*{pointer-events:none}#data-table-wrapper table thead[columns-dragging] [drag-over][drag-starter]{background-color:var(--int_drag-over--forbidden)}#data-table-wrapper table.persistent-header{border-top:1px solid var(--int_border-color);position:relative}#data-table-wrapper table.persistent-header thead{border-color:var(--int_border-color);border-style:solid;border-width:0 1px 0}#data-table-wrapper table.persistent-header thead th{background-color:var(--int_head-background-color);-webkit-box-shadow:var(--int_box-shadow);box-shadow:var(--int_box-shadow);position:-webkit-sticky;position:sticky;top:var(--int_header-offset);will-change:transform}#data-table-wrapper table.persistent-header tbody{border-top:3px solid var(--int_border-color)}#data-table-wrapper table tbody{border:1px solid var(--int_border-color);cursor:pointer;font-size:100%}#data-table-wrapper table tbody>tr.selected>td,#data-table-wrapper table tbody>tr:hover>td{color:var(--int_hover-color);background-color:var(--int_hover-background-color)}#data-table-wrapper table tbody>tr.group{background:var(--int_group-background-color);font-weight:700;border-top:1px solid var(--int_border-color)}#data-table-wrapper table tbody>tr.group td{padding:1rem 0}#data-table-wrapper table tbody>tr.group td.total{text-align:right;padding-right:1rem}#data-table-wrapper table tbody>tr.group icon{margin-right:.5rem}#data-table-wrapper table tbody>tr>td.number{text-align:right}#data-table-wrapper table tbody>tr>td .row-expander{margin-right:.5rem}#data-table-wrapper table tbody>tr>td .indent{display:inline-block;height:1rem;width:2rem}#data-table-wrapper table tbody>tr>td .options{font-size:100%;margin-left:.5rem;color:var(--int_icons-color)}#data-table-wrapper table tbody>tr>td .options:hover{color:var(--int_icons-hover-color)}#data-table-wrapper table tbody>tr>td .row-action{margin-right:.2rem}#data-table-wrapper table tfoot{font-size:110%}#data-table-wrapper table tfoot td{text-align:right}#data-table-wrapper table.noGrid,#data-table-wrapper table.noGrid td{border:none}#data-table-wrapper table.density-small tbody>tr>td{padding-top:.2rem;padding-bottom:.2rem}#data-table-wrapper table.density-small tbody>tr.group>td{padding-top:.75rem;padding-bottom:.75rem}#data-table-wrapper table.density-big tbody>tr>td{padding-top:1rem;padding-bottom:1rem}#data-table-wrapper table.density-big tbody>tr.group>td{padding-top:1.25rem;padding-bottom:1.25rem}#globalFilter{margin-bottom:.5rem;text-align:center}#group-chips{display:-ms-flexbox;display:flex;margin-bottom:.5rem}#group-chips>.group-chip{display:-ms-flexbox;display:flex;background-color:var(--int_main-color);padding:.5rem;color:var(--int_text-on-main-color);margin-right:.5rem;cursor:pointer;-webkit-transition:opacity .2s ease-in-out;transition:opacity .2s ease-in-out}#group-chips>.group-chip icon{margin-right:.5rem}#group-chips>.group-chip:hover{opacity:.75}.column-menu{background-color:var(--int_background-color);-webkit-box-shadow:var(--int_box-shadow);box-shadow:var(--int_box-shadow);color:var(--int_color);position:absolute;z-index:100;font-weight:400;-webkit-transition:opacity .2s ease-in-out;transition:opacity .2s ease-in-out;min-width:200px;min-width:-moz-max-content;min-width:-webkit-max-content}.column-menu.closed{display:none;opacity:0}.column-menu.open{display:block;opacity:1;-webkit-animation:display-none-transition .5s both;-webkit-animation-timing-function:cubic-bezier(.67,-.81,.89,.71);animation:display-none-transition .5s both;animation-timing-function:cubic-bezier(.67,-.81,.89,.71)}.column-menu ul{list-style-type:none;margin:0;padding:0}.column-menu ul>li{padding:.8rem;font-size:1rem;-webkit-transition:color .2s ease-in-out;transition:color .2s ease-in-out}.column-menu ul>li:hover{cursor:pointer;color:var(--int_main-color)}.column-menu ul>li .mdi{margin-right:.5rem}#density-panel{text-align:center}#density-panel kup-button{--kup-button_main-color:transparent;--kup-button_opacity:0.25;--kup-button_icon-color:var(--int_main-color);--kup-button_box-shadow:none}#density-panel kup-button:hover{--kup-button_opacity:0.75}#density-panel kup-button.active{--kup-button_opacity:1}\\@-webkit-keyframes display-none-transition{0%{opacity:0}}\\@keyframes display-none-transition{0%{opacity:0}}.load-more-records{background-color:transparent;border:0 none;color:var(--int_icons-color);cursor:pointer;display:inline-block;font-size:calc(var(--int_font-size) *1.2);height:calc(var(--int_font-size) *1.2);margin:0 6px;padding:0;-webkit-transition:color .3s;transition:color .3s;width:calc(var(--int_font-size) *1.2)}.load-more-records:hover{color:var(--int_icons-hover-color)}.load-more-records:before{height:inherit;width:inherit}\"; }\n}\n\nexport { KupDataTable as kup_data_table };\n"],"sourceRoot":"webpack:///"}