{"version":3,"sources":["./src/assets/dist/esm/legacy lazy ^\\.\\/.*\\.entry\\.js$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$ namespace object","./src/assets/dist/esm/legacy/chunk-1851c479.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD,iBAAiB,SAAI,IAAI,SAAI;AAC7B;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA,mBAAmB,SAAI,IAAI,SAAI;AAC/B,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;AACA,YAAY,SAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY,EAAE;AACrC,uBAAuB,iCAAiC,EAAE;AAC1D,mDAAmD,uDAAuD,EAAE;AAC5G,mDAAmD,0DAA0D,EAAE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,CAAC;AACD;AACA,iCAAiC,0BAA0B;AAC3D,yDAAyD,qEAAqE;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,uCAAuC,EAAE;AACxG;AACA;AACA;AACA,oDAAoD,0BAA0B;AAC9E,iCAAiC,yBAAyB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,oJAIP,IAAI,cAAc,WAAgB,CAAC;AACvC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,mCAAmC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kBAAkB;AAC5C,kCAAkC,0BAA0B;AAC5D,kCAAkC,kDAAkD;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qPAAyC;AACxD;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F;AAC1F,oEAAoE,EAAE;AACtE;AACA;AACA;AACA;AACA,qCAAqC,iOAAoC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC,EAAE;AACH;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F,yCAAyC,KAAK,iCAAiC;AAC9K;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,0BAA0B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,4BAA4B;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,uBAAuB,EAAE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,kDAAkD,EAAE;AAC5F,oCAAoC,oEAAoE;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,kCAAkC,EAAE;AACvH,+FAA+F,mCAAmC,EAAE;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,yCAAyC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gCAAgC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,oBAAoB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,oBAAoB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gBAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,wDAAwD;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,UAAU;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,UAAU;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,kCAAkC,EAAE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,kDAAkD,EAAE;AACjG;AACA;AACA;AACA;AACA,8BAA8B,wEAAwE;AACtG,sCAAsC,0BAA0B,EAAE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,yBAAyB,EAAE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uDAAuD;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F,qCAAqC,wPAA2C,oBAAoB,8CAA8C,EAAE;AACpJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oDAAoD;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC,EAAE;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qDAAqD,EAAE;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iBAAiB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,0CAA0C,EAAE;AACjF;AACA;AACA;AACA,qCAAqC,oCAAoC,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK,EAAE,EAAE;AACT,uDAAuD,EAAE,sBAAsB,aAAa;AAC5F,4CAA4C,kBAAkB,UAAU,mBAAmB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,SAAS,GAAG;AACZ;AACA;AACA,iCAAiC,sCAAsC;AACiE","file":"0-es2015.js","sourcesContent":["var map = {\n\t\"./kup-badge.entry.js\": [\n\t\t\"./src/assets/dist/esm/legacy/kup-badge.entry.js\",\n\t\t\"common\"\n\t],\n\t\"./kup-box.entry.js\": [\n\t\t\"./src/assets/dist/esm/legacy/kup-box.entry.js\",\n\t\t1,\n\t\t3\n\t],\n\t\"./kup-btn_11.entry.js\": [\n\t\t\"./src/assets/dist/esm/legacy/kup-btn_11.entry.js\",\n\t\t4\n\t],\n\t\"./kup-chart.entry.js\": [\n\t\t\"./src/assets/dist/esm/legacy/kup-chart.entry.js\",\n\t\t1,\n\t\t5\n\t],\n\t\"./kup-chip.entry.js\": [\n\t\t\"./src/assets/dist/esm/legacy/kup-chip.entry.js\",\n\t\t\"common\"\n\t],\n\t\"./kup-dash.entry.js\": [\n\t\t\"./src/assets/dist/esm/legacy/kup-dash.entry.js\",\n\t\t\"common\"\n\t],\n\t\"./kup-data-table.entry.js\": [\n\t\t\"./src/assets/dist/esm/legacy/kup-data-table.entry.js\",\n\t\t1,\n\t\t6\n\t],\n\t\"./kup-graphic-cell.entry.js\": [\n\t\t\"./src/assets/dist/esm/legacy/kup-graphic-cell.entry.js\",\n\t\t7\n\t],\n\t\"./kup-image_2.entry.js\": [\n\t\t\"./src/assets/dist/esm/legacy/kup-image_2.entry.js\",\n\t\t\"common\"\n\t],\n\t\"./kup-paginator.entry.js\": [\n\t\t\"./src/assets/dist/esm/legacy/kup-paginator.entry.js\",\n\t\t\"common\",\n\t\t20\n\t],\n\t\"./kup-tooltip.entry.js\": [\n\t\t\"./src/assets/dist/esm/legacy/kup-tooltip.entry.js\",\n\t\t\"common\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./src/assets/dist/esm/legacy lazy recursive ^\\\\.\\\\/.*\\\\.entry\\\\.js$ include: \\\\.entry\\\\.js$ exclude: \\\\.system\\\\.entry\\\\.js$\";\nmodule.exports = webpackAsyncContext;","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar _this = this;\nvar NAMESPACE = 'mycomponent';\nvar win = window;\nvar doc = document;\nvar plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: function (h) { return h(); },\n    raf: function (h) { return requestAnimationFrame(h); },\n    ael: function (el, eventName, listener, opts) { return el.addEventListener(eventName, listener, opts); },\n    rel: function (el, eventName, listener, opts) { return el.removeEventListener(eventName, listener, opts); },\n};\nvar supportsShadowDom = !!doc.documentElement.attachShadow;\nvar supportsConstructibleStylesheets = /*@__PURE__*/ (function () {\n    try {\n        new CSSStyleSheet();\n        return true;\n    }\n    catch (e) { }\n    return false;\n})();\nvar hostRefs = new WeakMap();\nvar getHostRef = function (ref) { return hostRefs.get(ref); };\nvar registerInstance = function (lazyInstance, hostRef) { return hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef); };\nvar registerHost = function (elm) {\n    {\n        var hostRef_1 = {\n            $flags$: 0,\n            $hostElement$: elm,\n            $instanceValues$: new Map()\n        };\n        hostRef_1.$onReadyPromise$ = new Promise(function (r) { return hostRef_1.$onReadyResolve$ = r; });\n        return hostRefs.set(elm, hostRef_1);\n    }\n};\nvar isMemberInElement = function (elm, memberName) { return memberName in elm; };\nvar consoleError = function (e) { return console.error(e); };\nvar moduleCache = /*@__PURE__*/ new Map();\nvar loadModule = function (cmpMeta, hostRef, hmrVersionId) {\n    // loadModuleImport\n    var exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    var bundleId = (cmpMeta.$lazyBundleIds$);\n    var module = moduleCache.get(bundleId);\n    if (module) {\n        return module[exportName];\n    }\n    return import(\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    \"./\" + bundleId + \".entry.js\" + '').then(function (importedModule) {\n        {\n            moduleCache.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nvar styles = new Map();\nvar cssVarShim = /*@__PURE__*/ win.__stencil_cssshim;\nvar queueCongestion = 0;\nvar queuePending = false;\nvar queueDomReads = [];\nvar queueDomWrites = [];\nvar queueDomWritesLow = [];\nvar queueTask = function (queue, write) { return function (cb) {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n}; };\nvar consume = function (queue) {\n    for (var i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nvar consumeTimeout = function (queue, timeout) {\n    var i = 0;\n    var ts = 0;\n    while (i < queue.length && (ts = performance.now()) < timeout) {\n        try {\n            queue[i++](ts);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    if (i === queue.length) {\n        queue.length = 0;\n    }\n    else if (i !== 0) {\n        queue.splice(0, i);\n    }\n};\nvar flush = function () {\n    queueCongestion++;\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    var timeout = (plt.$flags$ & 6 /* queueMask */) === 2 /* appLoaded */\n        ? performance.now() + (10 * Math.ceil(queueCongestion * (1.0 / 22.0)))\n        : Infinity;\n    // DOM WRITES!!!\n    consumeTimeout(queueDomWrites, timeout);\n    consumeTimeout(queueDomWritesLow, timeout);\n    if (queueDomWrites.length > 0) {\n        queueDomWritesLow.push.apply(queueDomWritesLow, queueDomWrites);\n        queueDomWrites.length = 0;\n    }\n    if (queuePending = ((queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length) > 0)) {\n        // still more to do yet, but we've run out of time\n        // let's let this thing cool off and try again in the next tick\n        plt.raf(flush);\n    }\n    else {\n        queueCongestion = 0;\n    }\n};\nvar nextTick = /*@__PURE__*/ function (cb) { return Promise.resolve().then(cb); };\nvar writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nvar EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nvar SVG_NS = 'http://www.w3.org/2000/svg';\nvar isDef = function (v) { return v != null; };\nvar toLowerCase = function (str) { return str.toLowerCase(); };\nvar isComplexType = function (o) { return ['object', 'function'].includes(typeof o); };\nvar getDynamicImportFunction = function (namespace) {\n    return \"__sc_import_\" + namespace.replace(/\\s|-/g, '_');\n};\nvar patchEsm = function () {\n    // @ts-ignore\n    if (!(win.CSS && win.CSS.supports && win.CSS.supports('color', 'var(--c)'))) {\n        // @ts-ignore\n        return import('./css-shim-3ea8955c-3ea8955c.js');\n    }\n    return Promise.resolve();\n};\nvar patchBrowser = function () { return __awaiter(_this, void 0, void 0, function () {\n    var importMeta, scriptElm, resourcesUrl;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                importMeta = \"\";\n                if (!(importMeta !== '')) return [3 /*break*/, 1];\n                return [2 /*return*/, Promise.resolve(new URL('.', importMeta).href)];\n            case 1:\n                scriptElm = Array.from(doc.querySelectorAll('script')).find(function (s) { return (s.src.includes(\"/\" + NAMESPACE + \".esm.js\") ||\n                    s.getAttribute('data-namespace') === NAMESPACE); });\n                resourcesUrl = new URL('.', new URL(scriptElm.getAttribute('data-resources-url') || scriptElm.src, win.location.href));\n                patchDynamicImport(resourcesUrl.href);\n                if (!!window.customElements) return [3 /*break*/, 3];\n                // @ts-ignore\n                return [4 /*yield*/, import('./dom-860d8016-860d8016.js')];\n            case 2:\n                // @ts-ignore\n                _a.sent();\n                _a.label = 3;\n            case 3: return [2 /*return*/, resourcesUrl.href];\n        }\n    });\n}); };\nvar patchDynamicImport = function (base) {\n    var importFunctionName = getDynamicImportFunction(NAMESPACE);\n    try {\n        win[importFunctionName] = new Function('w', 'return import(w);');\n    }\n    catch (e) {\n        var moduleMap_1 = new Map();\n        win[importFunctionName] = function (src) {\n            var url = new URL(src, base).href;\n            var mod = moduleMap_1.get(url);\n            if (!mod) {\n                var script_1 = doc.createElement('script');\n                script_1.type = 'module';\n                script_1.src = URL.createObjectURL(new Blob([\"import * as m from '\" + url + \"'; window.\" + importFunctionName + \".m = m;\"], { type: 'application/javascript' }));\n                mod = new Promise(function (resolve) {\n                    script_1.onload = function () {\n                        resolve(win[importFunctionName].m);\n                        script_1.remove();\n                    };\n                });\n                moduleMap_1.set(url, mod);\n                doc.head.appendChild(script_1);\n            }\n            return mod;\n        };\n    }\n};\nvar HYDRATED_CLASS = 'hydrated';\nvar XLINK_NS = 'http://www.w3.org/1999/xlink';\nvar rootAppliedStyles = new WeakMap();\nvar registerStyle = function (scopeId, cssText, allowCS) {\n    var style = styles.get(scopeId);\n    if (supportsConstructibleStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        style.replace(cssText);\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nvar addStyle = function (styleContainerNode, cmpMeta, mode, hostElm) {\n    var scopeId = getScopeId(cmpMeta.$tagName$);\n    var style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = (styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc);\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            var appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            var styleElm = void 0;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    if (cssVarShim) {\n                        styleElm = cssVarShim.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10 /* needsScopedEncapsulation */));\n                        var newScopeId = styleElm['s-sc'];\n                        if (newScopeId) {\n                            scopeId = newScopeId;\n                            // we don't want to add this styleID to the appliedStyles Set\n                            // since the cssVarShim might need to apply several different\n                            // stylesheets for the same component\n                            appliedStyles = null;\n                        }\n                    }\n                    else {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = styleContainerNode.adoptedStyleSheets.concat([\n                style\n            ]);\n        }\n    }\n    return scopeId;\n};\nvar attachStyles = function (elm, cmpMeta, mode) {\n    var styleId = addStyle((supportsShadowDom && elm.shadowRoot)\n        ? elm.shadowRoot\n        : elm.getRootNode(), cmpMeta, mode, elm);\n    if (cmpMeta.$flags$ & 10 /* needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = styleId;\n        elm.classList.add(styleId + '-h');\n    }\n};\nvar getScopeId = function (tagName, mode) { return 'sc-' + (tagName); };\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nvar h = function (nodeName, vnodeData) {\n    var children = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        children[_i - 2] = arguments[_i];\n    }\n    var child = null;\n    var simple = false;\n    var lastSimple = false;\n    var key;\n    var slotName;\n    var vNodeChildren = [];\n    var walk = function (c) {\n        for (var i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? { $flags$: 0, $text$: child } : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        // normalize class / classname attributes\n        {\n            key = vnodeData.key || undefined;\n        }\n        {\n            slotName = vnodeData.name;\n        }\n        {\n            var classData_1 = vnodeData.className || vnodeData.class;\n            if (classData_1) {\n                vnodeData.class = typeof classData_1 !== 'object'\n                    ? classData_1\n                    : Object.keys(classData_1)\n                        .filter(function (k) { return classData_1[k]; })\n                        .join(' ');\n            }\n        }\n    }\n    if (typeof nodeName === 'function') {\n        // nodeName is a functional component\n        return nodeName(vnodeData, vNodeChildren, vdomFnUtils);\n    }\n    var vnode = {\n        $flags$: 0,\n        $tag$: nodeName,\n        $children$: vNodeChildren.length > 0 ? vNodeChildren : null,\n        $elm$: undefined,\n        $attrs$: vnodeData,\n    };\n    {\n        vnode.$key$ = key;\n    }\n    {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\nvar Host = {};\nvar isHost = function (node) {\n    return node && node.$tag$ === Host;\n};\nvar vdomFnUtils = {\n    'forEach': function (children, cb) { return children.map(convertToPublic).forEach(cb); },\n    'map': function (children, cb) { return children.map(convertToPublic).map(cb).map(convertToPrivate); }\n};\nvar convertToPublic = function (node) {\n    return {\n        vattrs: node.$attrs$,\n        vchildren: node.$children$,\n        vkey: node.$key$,\n        vname: node.$name$,\n        vtag: node.$tag$,\n        vtext: node.$text$\n    };\n};\nvar convertToPrivate = function (node) {\n    return {\n        $flags$: 0,\n        $attrs$: node.vattrs,\n        $children$: node.vchildren,\n        $key$: node.vkey,\n        $name$: node.vname,\n        $tag$: node.vtag,\n        $text$: node.vtext\n    };\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nvar setAccessor = function (elm, memberName, oldValue, newValue, isSvg, flags) {\n    if (oldValue === newValue) {\n        return;\n    }\n    if (memberName === 'class' && !isSvg) {\n        // Class\n        {\n            var oldList_1 = parseClassList(oldValue);\n            var baseList_1 = parseClassList(elm.className).filter(function (item) { return !oldList_1.includes(item); });\n            elm.className = baseList_1.concat(parseClassList(newValue).filter(function (item) { return !baseList_1.includes(item); })).join(' ');\n        }\n    }\n    else if (memberName === 'style') {\n        // update style attribute, css properties and values\n        {\n            for (var prop in oldValue) {\n                if (!newValue || newValue[prop] == null) {\n                    if (prop.includes('-')) {\n                        elm.style.removeProperty(prop);\n                    }\n                    else {\n                        elm.style[prop] = '';\n                    }\n                }\n            }\n        }\n        for (var prop in newValue) {\n            if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                if (prop.includes('-')) {\n                    elm.style.setProperty(prop, newValue[prop]);\n                }\n                else {\n                    elm.style[prop] = newValue[prop];\n                }\n            }\n        }\n    }\n    else if (memberName === 'key')\n        ;\n    else if (memberName === 'ref') {\n        // minifier will clean this up\n        if (newValue) {\n            newValue(elm);\n        }\n    }\n    else if (memberName.startsWith('on') && !isMemberInElement(elm, memberName)) {\n        // Event Handlers\n        // so if the member name starts with \"on\" and the 3rd characters is\n        // a capital letter, and it's not already a member on the element,\n        // then we're assuming it's an event listener\n        if (isMemberInElement(elm, toLowerCase(memberName))) {\n            // standard event\n            // the JSX attribute could have been \"onMouseOver\" and the\n            // member name \"onmouseover\" is on the element's prototype\n            // so let's add the listener \"mouseover\", which is all lowercased\n            memberName = toLowerCase(memberName.substring(2));\n        }\n        else {\n            // custom event\n            // the JSX attribute could have been \"onMyCustomEvent\"\n            // so let's trim off the \"on\" prefix and lowercase the first character\n            // and add the listener \"myCustomEvent\"\n            // except for the first character, we keep the event name case\n            memberName = toLowerCase(memberName[2]) + memberName.substring(3);\n        }\n        if (oldValue) {\n            plt.rel(elm, memberName, oldValue, false);\n        }\n        if (newValue) {\n            plt.ael(elm, memberName, newValue, false);\n        }\n    }\n    else {\n        // Set property if it exists and it's not a SVG\n        var isProp = isMemberInElement(elm, memberName);\n        var isComplex = isComplexType(newValue);\n        if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n            try {\n                elm[memberName] = newValue == null && elm.tagName.indexOf('-') === -1 ? '' : newValue;\n            }\n            catch (e) { }\n        }\n        /**\n         * Need to manually update attribute if:\n         * - memberName is not an attribute\n         * - if we are rendering the host element in order to reflect attribute\n         * - if it's a SVG, since properties might not work in <svg>\n         * - if the newValue is null/undefined or 'false'.\n         */\n        var isXlinkNs = isSvg && (memberName !== (memberName = memberName.replace(/^xlink\\:?/, ''))) ? true : false;\n        if (newValue == null || newValue === false) {\n            if (isXlinkNs) {\n                elm.removeAttributeNS(XLINK_NS, toLowerCase(memberName));\n            }\n            else {\n                elm.removeAttribute(memberName);\n            }\n        }\n        else if ((!isProp || (flags & 4 /* isHost */) || isSvg) && !isComplex) {\n            newValue = newValue === true ? '' : newValue.toString();\n            if (isXlinkNs) {\n                elm.setAttributeNS(XLINK_NS, toLowerCase(memberName), newValue);\n            }\n            else {\n                elm.setAttribute(memberName, newValue);\n            }\n        }\n    }\n};\nvar parseClassList = function (value) { return (!value) ? [] : value.split(' '); };\nvar updateElement = function (oldVnode, newVnode, isSvgMode, memberName) {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    var elm = (newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host) ? newVnode.$elm$.host : newVnode.$elm$;\n    var oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    var newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (newVnodeAttrs[memberName] == null && oldVnodeAttrs[memberName] != null) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nvar scopeId;\nvar contentRef;\nvar hostTagName;\nvar useNativeShadowDom = false;\nvar checkSlotFallbackVisibility = false;\nvar checkSlotRelocate = false;\nvar isSvgMode = false;\nvar createElm = function (oldParentVNode, newParentVNode, childIndex, parentElm) {\n    // tslint:disable-next-line: prefer-const\n    var newVNode = newParentVNode.$children$[childIndex];\n    var i = 0;\n    var elm;\n    var childNode;\n    var oldVNode;\n    if (!useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === 'slot') {\n            if (scopeId) {\n                // scoped css needs to add its scoped id to the parent element\n                parentElm.classList.add(scopeId + '-s');\n            }\n            if (!newVNode.$children$) {\n                // slot element does not have fallback content\n                // create an html comment we'll use to always reference\n                // where actual slot content should sit next to\n                newVNode.$flags$ |= 1 /* isSlotReference */;\n            }\n            else {\n                // slot element has fallback content\n                // still create an element that \"mocks\" the slot element\n                newVNode.$flags$ |= 2 /* isSlotFallback */;\n            }\n        }\n    }\n    if (isDef(newVNode.$text$)) {\n        // create text node\n        newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else if (newVNode.$flags$ & 1 /* isSlotReference */) {\n        // create a slot reference node\n        newVNode.$elm$ = doc.createTextNode('');\n    }\n    else {\n        // create element\n        elm = newVNode.$elm$ = (((isSvgMode || newVNode.$tag$ === 'svg'))\n            ? doc.createElementNS(SVG_NS, newVNode.$tag$)\n            : doc.createElement((newVNode.$flags$ & 2 /* isSlotFallback */) ? 'slot-fb' : newVNode.$tag$));\n        {\n            isSvgMode = newVNode.$tag$ === 'svg' ? true : (newVNode.$tag$ === 'foreignObject' ? false : isSvgMode);\n        }\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i, elm);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        if (newVNode.$tag$ === 'svg') {\n            // Only reset the SVG context when we're exiting SVG element\n            isSvgMode = false;\n        }\n    }\n    {\n        newVNode.$elm$['s-hn'] = hostTagName;\n        if (newVNode.$flags$ & (2 /* isSlotFallback */ | 1 /* isSlotReference */)) {\n            // remember the content reference comment\n            newVNode.$elm$['s-sr'] = true;\n            // remember the content reference comment\n            newVNode.$elm$['s-cr'] = contentRef;\n            // remember the slot name, or empty string for default slot\n            newVNode.$elm$['s-sn'] = newVNode.$name$ || '';\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                // we've got an old slot vnode and the wrapper is being replaced\n                // so let's move the old slot content back to it's original location\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\n            }\n        }\n    }\n    return newVNode.$elm$;\n};\nvar putBackInOriginalLocation = function (parentElm, recursive) {\n    plt.$flags$ |= 1 /* isTmpDisconnected */;\n    var oldSlotChildNodes = parentElm.childNodes;\n    for (var i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n        var childNode = oldSlotChildNodes[i];\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n            // // this child node in the old element is from another component\n            // // remove this node from the old slot's parent\n            // childNode.remove();\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot in need be\n            childNode['s-ol'].remove();\n            childNode['s-ol'] = undefined;\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* isTmpDisconnected */;\n};\nvar addVnodes = function (parentElm, before, parentVNode, vnodes, startIdx, endIdx) {\n    var containerElm = ((parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\n    var childNode;\n    if (containerElm.shadowRoot && toLowerCase(containerElm.tagName) === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx, parentElm);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, referenceNode(before));\n            }\n        }\n    }\n};\nvar removeVnodes = function (vnodes, startIdx, endIdx, elm) {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (isDef(vnodes[startIdx])) {\n            elm = vnodes[startIdx].$elm$;\n            callNodeRefs(vnodes[startIdx], true);\n            {\n                // we're removing this element\n                // so it's possible we need to show slot fallback content now\n                checkSlotFallbackVisibility = true;\n                if (elm['s-ol']) {\n                    // remove the original location comment\n                    elm['s-ol'].remove();\n                }\n                else {\n                    // it's possible that child nodes of the node\n                    // that's being removed are slot nodes\n                    putBackInOriginalLocation(elm, true);\n                }\n            }\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nvar updateChildren = function (parentElm, oldCh, newVNode, newCh) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var idxInOld = 0;\n    var i = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var node;\n    var elmToMove;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            // Vnode moved right\n            if ((oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            // Vnode moved left\n            if ((oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            // createKeyToOldIdx\n            idxInOld = -1;\n            {\n                for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n                    if (oldCh[i] && isDef(oldCh[i].$key$) && oldCh[i].$key$ === newStartVnode.$key$) {\n                        idxInOld = i;\n                        break;\n                    }\n                }\n            }\n            if (idxInOld >= 0) {\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n                }\n                else {\n                    patch(elmToMove, newStartVnode);\n                    oldCh[idxInOld] = undefined;\n                    node = elmToMove.$elm$;\n                }\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, (newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$), newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nvar isSameVnode = function (vnode1, vnode2) {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        if (vnode1.$tag$ === 'slot') {\n            return vnode1.$name$ === vnode2.$name$;\n        }\n        {\n            return vnode1.$key$ === vnode2.$key$;\n        }\n        return true;\n    }\n    return false;\n};\nvar referenceNode = function (node) {\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return (node && node['s-ol']) || node;\n};\nvar parentReferenceNode = function (node) { return (node['s-ol'] ? node['s-ol'] : node).parentNode; };\nvar patch = function (oldVNode, newVNode) {\n    var elm = newVNode.$elm$ = oldVNode.$elm$;\n    var oldChildren = oldVNode.$children$;\n    var newChildren = newVNode.$children$;\n    var defaultHolder;\n    {\n        // test if we're rendering an svg element, or still rendering nodes inside of one\n        // only add this to the when the compiler sees we're using an svg somewhere\n        isSvgMode = elm &&\n            isDef(elm.parentNode) &&\n            elm.ownerSVGElement !== undefined;\n        isSvgMode = newVNode.$tag$ === 'svg' ? true : (newVNode.$tag$ === 'foreignObject' ? false : isSvgMode);\n    }\n    if (!isDef(newVNode.$text$)) {\n        // element node\n        {\n            if (newVNode.$tag$ === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (isDef(oldChildren) && isDef(newChildren)) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (isDef(newChildren)) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (isDef(oldVNode.$text$)) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (isDef(oldChildren)) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n    }\n    else if ((defaultHolder = elm['s-cr'])) {\n        // this element has slotted content\n        defaultHolder.parentNode.textContent = newVNode.$text$;\n    }\n    else if (oldVNode.$text$ !== newVNode.$text$) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.textContent = newVNode.$text$;\n    }\n    if (isSvgMode && newVNode.$tag$ === 'svg') {\n        isSvgMode = false;\n    }\n};\nvar updateFallbackSlotVisibility = function (elm, childNode, childNodes, i, ilen, j, slotNameAttr, nodeType) {\n    childNodes = elm.childNodes;\n    for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            if (childNode['s-sr']) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                slotNameAttr = childNode['s-sn'];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                for (j = 0; j < ilen; j++) {\n                    if (childNodes[j]['s-hn'] !== childNode['s-hn']) {\n                        // this sibling node is from a different component\n                        nodeType = childNodes[j].nodeType;\n                        if (slotNameAttr !== '') {\n                            // this is a named fallback slot node\n                            if (nodeType === 1 /* ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {\n                                childNode.hidden = true;\n                                break;\n                            }\n                        }\n                        else {\n                            // this is a default fallback slot node\n                            // any element or text node (with content)\n                            // should hide the default fallback slot node\n                            if (nodeType === 1 /* ElementNode */ || (nodeType === 3 /* TextNode */ && childNodes[j].textContent.trim() !== '')) {\n                                childNode.hidden = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\nvar relocateNodes = [];\nvar relocateSlotContent = function (elm) {\n    // tslint:disable-next-line: prefer-const\n    var childNodes = elm.childNodes;\n    var ilen = childNodes.length;\n    var i = 0;\n    var j = 0;\n    var nodeType = 0;\n    var childNode;\n    var node;\n    var hostContentNodes;\n    var slotNameAttr;\n    for (ilen = childNodes.length; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && (node = childNode['s-cr'])) {\n            // first got the content reference comment node\n            // then we got it's parent, which is where all the host content is in now\n            hostContentNodes = node.parentNode.childNodes;\n            slotNameAttr = childNode['s-sn'];\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\n                node = hostContentNodes[j];\n                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n                    // let's do some relocating to its new home\n                    // but never relocate a content reference node\n                    // that is suppose to always represent the original content location\n                    nodeType = node.nodeType;\n                    if (((nodeType === 3 /* TextNode */ || nodeType === 8 /* CommentNode */) && slotNameAttr === '') ||\n                        (nodeType === 1 /* ElementNode */ && node.getAttribute('slot') === null && slotNameAttr === '') ||\n                        (nodeType === 1 /* ElementNode */ && node.getAttribute('slot') === slotNameAttr)) {\n                        // it's possible we've already decided to relocate this node\n                        if (!relocateNodes.some(function (r) { return r.nodeToRelocate === node; })) {\n                            // made some changes to slots\n                            // let's make sure we also double check\n                            // fallbacks are correctly hidden or shown\n                            checkSlotFallbackVisibility = true;\n                            node['s-sn'] = slotNameAttr;\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                slotRefNode: childNode,\n                                nodeToRelocate: node\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            relocateSlotContent(childNode);\n        }\n    }\n};\nvar callNodeRefs = function (vNode, isDestroy) {\n    if (vNode) {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(isDestroy ? null : vNode.$elm$);\n        vNode.$children$ && vNode.$children$.forEach(function (vChild) {\n            callNodeRefs(vChild, isDestroy);\n        });\n    }\n};\nvar renderVdom = function (hostElm, hostRef, cmpMeta, renderFnResults) {\n    hostTagName = toLowerCase(hostElm.tagName);\n    var oldVNode = hostRef.$vnode$ || { $flags$: 0 };\n    var rootVnode = isHost(renderFnResults)\n        ? renderFnResults\n        : h(null, null, renderFnResults);\n    if (cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.forEach(function (_a) {\n            var propName = _a[0], attribute = _a[1];\n            return rootVnode.$attrs$[attribute] = hostElm[propName];\n        });\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm);\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    {\n        contentRef = hostElm['s-cr'];\n        useNativeShadowDom = supportsShadowDom && (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) !== 0;\n        // always reset\n        checkSlotRelocate = checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n    {\n        if (checkSlotRelocate) {\n            relocateSlotContent(rootVnode.$elm$);\n            for (var i = 0; i < relocateNodes.length; i++) {\n                var relocateNode = relocateNodes[i];\n                if (!relocateNode.nodeToRelocate['s-ol']) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    var orgLocationNode = doc.createTextNode('');\n                    orgLocationNode['s-nr'] = relocateNode.nodeToRelocate;\n                    relocateNode.nodeToRelocate.parentNode.insertBefore((relocateNode.nodeToRelocate['s-ol'] = orgLocationNode), relocateNode.nodeToRelocate);\n                }\n            }\n            // while we're moving nodes around existing nodes, temporarily disable\n            // the disconnectCallback from working\n            plt.$flags$ |= 1 /* isTmpDisconnected */;\n            for (var i = 0; i < relocateNodes.length; i++) {\n                var relocateNode = relocateNodes[i];\n                // by default we're just going to insert it directly\n                // after the slot reference node\n                var parentNodeRef = relocateNode.slotRefNode.parentNode;\n                var insertBeforeNode = relocateNode.slotRefNode.nextSibling;\n                var orgLocationNode = relocateNode.nodeToRelocate['s-ol'];\n                while (orgLocationNode = orgLocationNode.previousSibling) {\n                    var refNode = orgLocationNode['s-nr'];\n                    if (refNode &&\n                        refNode['s-sn'] === relocateNode.nodeToRelocate['s-sn'] &&\n                        parentNodeRef === refNode.parentNode) {\n                        refNode = refNode.nextSibling;\n                        if (!refNode || !refNode['s-nr']) {\n                            insertBeforeNode = refNode;\n                            break;\n                        }\n                    }\n                }\n                if ((!insertBeforeNode && parentNodeRef !== relocateNode.nodeToRelocate.parentNode) ||\n                    (relocateNode.nodeToRelocate.nextSibling !== insertBeforeNode)) {\n                    // we've checked that it's worth while to relocate\n                    // since that the node to relocate\n                    // has a different next sibling or parent relocated\n                    if (relocateNode.nodeToRelocate !== insertBeforeNode) {\n                        // add it back to the dom but in its new home\n                        parentNodeRef.insertBefore(relocateNode.nodeToRelocate, insertBeforeNode);\n                    }\n                }\n            }\n            // done moving nodes around\n            // allow the disconnect callback to work again\n            plt.$flags$ &= ~1 /* isTmpDisconnected */;\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\nvar safeCall = function (instance, method, arg) {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nvar then = function (promise, thenFn) {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nvar scheduleUpdate = function (elm, hostRef, cmpMeta, isInitialLoad) {\n    {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n    }\n    var instance = hostRef.$lazyInstance$;\n    var promise;\n    if (isInitialLoad) {\n        {\n            promise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    else {\n        {\n            promise = safeCall(instance, 'componentWillUpdate');\n        }\n    }\n    {\n        promise = then(promise, function () { return safeCall(instance, 'componentWillRender'); });\n    }\n    // there is no ancestorc omponent or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    var update = function () { return updateComponent(elm, hostRef, cmpMeta, instance, isInitialLoad); };\n    return then(promise, function () { return writeTask(update); });\n};\nvar updateComponent = function (elm, hostRef, cmpMeta, instance, isInitialLoad) {\n    // updateComponent\n    {\n        hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n    }\n    {\n        elm['s-lr'] = false;\n    }\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(elm, cmpMeta, hostRef.$modeName$);\n    }\n    {\n        {\n            // tell the platform we're actively rendering\n            // if a value is changed within a render() then\n            // this tells the platform not to queue the change\n            hostRef.$flags$ |= 4 /* isActiveRender */;\n            try {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                renderVdom(elm, hostRef, cmpMeta, instance.render());\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            hostRef.$flags$ &= ~4 /* isActiveRender */;\n        }\n    }\n    if (cssVarShim) {\n        cssVarShim.updateHost(elm);\n    }\n    // set that this component lifecycle rendering has completed\n    {\n        elm['s-lr'] = true;\n    }\n    {\n        hostRef.$flags$ |= 2 /* hasRendered */;\n    }\n    if (elm['s-rc'].length > 0) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        elm['s-rc'].forEach(function (cb) { return cb(); });\n        elm['s-rc'].length = 0;\n    }\n    postUpdateComponent(elm, hostRef);\n};\nvar postUpdateComponent = function (elm, hostRef, ancestorsActivelyLoadingChildren) {\n    if (!elm['s-al']) {\n        var instance = hostRef.$lazyInstance$;\n        var ancestorComponent = hostRef.$ancestorComponent$;\n        if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n            hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n            {\n                // DOM WRITE!\n                // add the css class that this element has officially hydrated\n                elm.classList.add(HYDRATED_CLASS);\n            }\n            {\n                safeCall(instance, 'componentDidLoad');\n            }\n            {\n                hostRef.$onReadyResolve$(elm);\n            }\n            if (!ancestorComponent) {\n                // on appload\n                // we have finish the first big initial render\n                doc.documentElement.classList.add(HYDRATED_CLASS);\n                {\n                    setTimeout(function () { return plt.$flags$ |= 2; } /* appLoaded */, 999);\n                }\n            }\n        }\n        else {\n            {\n                // we've already loaded this component\n                // fire off the user's componentDidUpdate method (if one was provided)\n                // componentDidUpdate runs AFTER render() has been called\n                // and all child components have finished updating\n                safeCall(instance, 'componentDidUpdate');\n            }\n        }\n        // load events fire from bottom to top\n        // the deepest elements load first then bubbles up\n        if (ancestorComponent) {\n            // ok so this element already has a known ancestor component\n            // let's make sure we remove this element from its ancestor's\n            // known list of child elements which are actively loading\n            if (ancestorsActivelyLoadingChildren = ancestorComponent['s-al']) {\n                // remove this element from the actively loading map\n                ancestorsActivelyLoadingChildren.delete(elm);\n                // the ancestor's initializeComponent method will do the actual checks\n                // to see if the ancestor is actually loaded or not\n                // then let's call the ancestor's initializeComponent method if there's no length\n                // (which actually ends up as this method again but for the ancestor)\n                if (ancestorsActivelyLoadingChildren.size === 0) {\n                    ancestorComponent['s-al'] = undefined;\n                    ancestorComponent['s-init']();\n                }\n            }\n            hostRef.$ancestorComponent$ = undefined;\n        }\n        // ( •_•)\n        // ( •_•)>⌐■-■\n        // (⌐■_■)\n    }\n};\nvar forceUpdate = function (elm, cmpMeta) {\n    {\n        var hostRef = getHostRef(elm);\n        if (hostRef.$flags$ & 2 /* hasRendered */) {\n            scheduleUpdate(elm, hostRef, cmpMeta, false);\n        }\n    }\n};\nvar disconnectedCallback = function (elm) {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        var hostRef = getHostRef(elm);\n        // clear CSS var-shim tracking\n        if (cssVarShim) {\n            cssVarShim.removeHost(elm);\n        }\n        var instance = hostRef.$lazyInstance$;\n        {\n            safeCall(instance, 'componentDidUnload');\n        }\n    }\n};\nvar parsePropertyValue = function (propValue, propType) {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (propType & 4 /* Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return (propValue === 'false' ? false : propValue === '' || !!propValue);\n        }\n        if (propType & 2 /* Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (propType & 1 /* String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nvar getValue = function (ref, propName) { return getHostRef(ref).$instanceValues$.get(propName); };\nvar setValue = function (ref, propName, newVal, cmpMeta) {\n    // check our new property value against our internal value\n    var hostRef = getHostRef(ref);\n    var elm = hostRef.$hostElement$;\n    var oldVal = hostRef.$instanceValues$.get(propName);\n    var flags = hostRef.$flags$;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    if (newVal !== oldVal && (!(flags & 8 /* isConstructingInstance */) || oldVal === undefined)) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (hostRef.$lazyInstance$) {\n            // get an array of method names of watch functions to call\n            if (cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {\n                var watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.forEach(function (watchMethodName) {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            (hostRef.$lazyInstance$)[watchMethodName].call((hostRef.$lazyInstance$), newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e);\n                        }\n                    });\n                }\n            }\n            if ((flags & (4 /* isActiveRender */ | 2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(elm, hostRef, cmpMeta, false);\n            }\n        }\n    }\n};\nvar proxyComponent = function (Cstr, cmpMeta, flags) {\n    if (cmpMeta.$members$) {\n        if (Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        var members = Object.entries(cmpMeta.$members$);\n        var prototype_1 = Cstr.prototype;\n        members.forEach(function (_a) {\n            var memberName = _a[0], memberFlags = _a[1][0];\n            if (((memberFlags & 31 /* Prop */) ||\n                ((flags & 2 /* proxyState */) &&\n                    (memberFlags & 32 /* State */)))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype_1, memberName, {\n                    get: function () {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set: function (newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true\n                });\n            }\n            else if ((flags & 1 /* isElementConstructor */) && (memberFlags & 64 /* Method */)) {\n                // proxyComponent - method\n                Object.defineProperty(prototype_1, memberName, {\n                    value: function () {\n                        var args = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            args[_i] = arguments[_i];\n                        }\n                        var ref = getHostRef(this);\n                        return ref.$onReadyPromise$.then(function () {\n                            var _a;\n                            return (_a = ref.$lazyInstance$)[memberName].apply(_a, args);\n                        });\n                    }\n                });\n            }\n        });\n        if ((flags & 1 /* isElementConstructor */)) {\n            var attrNameToPropName_1 = new Map();\n            prototype_1.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                var _this = this;\n                plt.jmp(function () {\n                    var propName = attrNameToPropName_1.get(attrName);\n                    _this[propName] = newValue === null && typeof _this[propName] === 'boolean'\n                        ? false\n                        : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(function (_a) {\n                var _ = _a[0], m = _a[1];\n                return m[0] & 15;\n            } /* HasAttribute */) // filter to only keep props that should match attributes\n                .map(function (_a) {\n                var propName = _a[0], m = _a[1];\n                var attrName = m[1] || propName;\n                attrNameToPropName_1.set(attrName, propName);\n                if (m[0] & 512 /* ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nvar initializeComponent = function (elm, hostRef, cmpMeta, hmrVersionId, Cstr) { return __awaiter(_this, void 0, void 0, function () {\n    var style_1, scopeId_1, ancestorComponent, schedule;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (!((hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0)) return [3 /*break*/, 5];\n                // we haven't initialized this element yet\n                hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n                // lazy loaded components\n                // request the component's implementation to be\n                // wired up with the host element\n                Cstr = loadModule(cmpMeta);\n                if (!Cstr.then) return [3 /*break*/, 2];\n                return [4 /*yield*/, Cstr];\n            case 1:\n                // Await creates a micro-task avoid if possible\n                Cstr = _a.sent();\n                _a.label = 2;\n            case 2:\n                if (!Cstr.isProxied) {\n                    // we'eve never proxied this Constructor before\n                    // let's add the getters/setters to its prototype before\n                    // the first time we create an instance of the implementation\n                    {\n                        cmpMeta.$watchers$ = Cstr.watchers;\n                    }\n                    proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n                    Cstr.isProxied = true;\n                }\n                // ok, time to construct the instance\n                // but let's keep track of when we start and stop\n                // so that the getters/setters don't incorrectly step on data\n                {\n                    hostRef.$flags$ |= 8 /* isConstructingInstance */;\n                }\n                // construct the lazy-loaded component implementation\n                // passing the hostRef is very important during\n                // construction in order to directly wire together the\n                // host element and the lazy-loaded instance\n                try {\n                    new Cstr(hostRef);\n                }\n                catch (e) {\n                    consoleError(e);\n                }\n                {\n                    hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n                }\n                {\n                    hostRef.$flags$ |= 128 /* isWatchReady */;\n                }\n                if (!(!Cstr.isStyleRegistered && Cstr.style)) return [3 /*break*/, 5];\n                style_1 = Cstr.style;\n                scopeId_1 = getScopeId(cmpMeta.$tagName$);\n                if (!(cmpMeta.$flags$ & 8) /* needsShadowDomShim */) return [3 /*break*/, 4]; /* needsShadowDomShim */\n                return [4 /*yield*/, import('./shadow-css-984bac74-549b16dd.js').then(function (m) { return m.scopeCss(style_1, scopeId_1, false); })];\n            case 3:\n                style_1 = _a.sent();\n                _a.label = 4;\n            case 4:\n                registerStyle(scopeId_1, style_1, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n                Cstr.isStyleRegistered = true;\n                _a.label = 5;\n            case 5:\n                ancestorComponent = hostRef.$ancestorComponent$;\n                schedule = function () { return scheduleUpdate(elm, hostRef, cmpMeta, true); };\n                if (ancestorComponent && ancestorComponent['s-lr'] === false && ancestorComponent['s-rc']) {\n                    // this is the intial load and this component it has an ancestor component\n                    // but the ancestor component has NOT fired its will update lifecycle yet\n                    // so let's just cool our jets and wait for the ancestor to continue first\n                    // this will get fired off when the ancestor component\n                    // finally gets around to rendering its lazy self\n                    // fire off the initial update\n                    ancestorComponent['s-rc'].push(schedule);\n                }\n                else {\n                    schedule();\n                }\n                return [2 /*return*/];\n        }\n    });\n}); };\nvar connectedCallback = function (elm, cmpMeta) {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        // connectedCallback\n        var hostRef_2 = getHostRef(elm);\n        if (!(hostRef_2.$flags$ & 1 /* hasConnected */)) {\n            // first time this component has connected\n            hostRef_2.$flags$ |= 1 /* hasConnected */;\n            var hostId = void 0;\n            if (!hostId) {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if ((cmpMeta.$flags$ & 4 /* hasSlotRelocation */) ||\n                    (cmpMeta.$flags$ & 8 /* needsShadowDomShim */)) {\n                    setContentReference(elm);\n                }\n            }\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                var ancestorComponent = elm;\n                while ((ancestorComponent = (ancestorComponent.parentNode || ancestorComponent.host))) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if ((ancestorComponent['s-init'] && ancestorComponent['s-lr'] === false)) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        hostRef_2.$ancestorComponent$ = ancestorComponent;\n                        // ensure there is an array to contain a reference to each of the child components\n                        // and set this component as one of the ancestor's child components it should wait on\n                        (ancestorComponent['s-al'] = ancestorComponent['s-al'] || new Set()).add(elm);\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).forEach(function (_a) {\n                    var memberName = _a[0], memberFlags = _a[1][0];\n                    if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n                        var value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                // connectedCallback, taskQueue, initialLoad\n                // angular sets attribute AFTER connectCallback\n                // https://github.com/angular/angular/issues/18909\n                // https://github.com/angular/angular/issues/19940\n                nextTick(function () { return initializeComponent(elm, hostRef_2, cmpMeta); });\n            }\n        }\n    }\n};\nvar setContentReference = function (elm, contentRefElm) {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    var crName;\n    {\n        crName = '';\n    }\n    contentRefElm = elm['s-cr'] = doc.createComment(crName);\n    contentRefElm['s-cn'] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nvar bootstrapLazy = function (lazyBundles, options) {\n    if (options === void 0) { options = {}; }\n    var cmpTags = [];\n    var exclude = options.exclude || [];\n    var head = doc.head;\n    var customElements = win.customElements;\n    var y = /*@__PURE__*/ head.querySelector('meta[charset]');\n    var visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    if (options.syncQueue) {\n        plt.$flags$ |= 4 /* queueSync */;\n    }\n    lazyBundles.forEach(function (lazyBundle) { return lazyBundle[1].forEach(function (compactMeta) {\n        var cmpMeta = {\n            $flags$: compactMeta[0],\n            $tagName$: compactMeta[1],\n            $members$: compactMeta[2],\n            $listeners$: compactMeta[3],\n        };\n        {\n            cmpMeta.$attrsToReflect$ = [];\n        }\n        {\n            cmpMeta.$watchers$ = {};\n        }\n        if (!supportsShadowDom && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n            cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;\n        }\n        var tagName = cmpMeta.$tagName$;\n        var HostElement = /** @class */ (function (_super) {\n            __extends(class_1, _super);\n            // StencilLazyHost\n            function class_1(self) {\n                var _this = \n                // @ts-ignore\n                _super.call(this, self) || this;\n                self = _this;\n                {\n                    _this['s-lr'] = false;\n                    _this['s-rc'] = [];\n                }\n                registerHost(self);\n                if (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                    // this component is using shadow dom\n                    // and this browser supports shadow dom\n                    // add the read-only property \"shadowRoot\" to the host element\n                    if (supportsShadowDom) {\n                        self.attachShadow({ 'mode': 'open' });\n                    }\n                    else if (!('shadowRoot' in self)) {\n                        self.shadowRoot = self;\n                    }\n                }\n                return _this;\n            }\n            class_1.prototype.connectedCallback = function () {\n                var _this = this;\n                plt.jmp(function () { return connectedCallback(_this, cmpMeta); });\n            };\n            class_1.prototype.disconnectedCallback = function () {\n                var _this = this;\n                plt.jmp(function () { return disconnectedCallback(_this); });\n            };\n            class_1.prototype['s-init'] = function () {\n                var hostRef = getHostRef(this);\n                if (hostRef.$lazyInstance$) {\n                    postUpdateComponent(this, hostRef);\n                }\n            };\n            class_1.prototype['s-hmr'] = function (hmrVersionId) {\n            };\n            class_1.prototype.forceUpdate = function () {\n                forceUpdate(this, cmpMeta);\n            };\n            class_1.prototype.componentOnReady = function () {\n                return getHostRef(this).$onReadyPromise$;\n            };\n            return class_1;\n        }(HTMLElement));\n        cmpMeta.$lazyBundleIds$ = lazyBundle[0];\n        if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n            cmpTags.push(tagName);\n            customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n        }\n    }); });\n    // visibilityStyle.innerHTML = cmpTags.map(t => `${t}:not(.hydrated)`) + '{display:none}';\n    visibilityStyle.innerHTML = cmpTags + '{visibility:hidden}.hydrated{visibility:inherit}';\n    visibilityStyle.setAttribute('data-styles', '');\n    head.insertBefore(visibilityStyle, y ? y.nextSibling : head.firstChild);\n};\nvar createEvent = function (ref, name, flags) {\n    var elm = getElement(ref);\n    return {\n        emit: function (detail) { return elm.dispatchEvent(new (CustomEvent)(name, {\n            bubbles: !!(flags & 4 /* Bubbles */),\n            composed: !!(flags & 2 /* Composed */),\n            cancelable: !!(flags & 1 /* Cancellable */),\n            detail: detail\n        })); }\n    };\n};\nvar getElement = function (ref) { return getHostRef(ref).$hostElement$; };\nexport { Host as H, patchEsm as a, bootstrapLazy as b, createEvent as c, getElement as g, h, patchBrowser as p, registerInstance as r };\n"],"sourceRoot":"webpack:///"}