{"version":3,"sources":["./src/assets/dist/esm/kup-box.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiF;AACpD;AACuK;AAC3I;;AAEzD;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAAW;AACxC,8BAA8B,4DAAW;AACzC,gCAAgC,4DAAW;AAC3C,uCAAuC,4DAAW;AAClD,mCAAmC,4DAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4DAAU;AAC1C;AACA;AACA;AACA,wBAAwB,4DAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oDAAQ;AAClC;AACA,yBAAyB,4DAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAC,SAAS,yBAAyB,EAAE,4DAAC,WAAW,+HAA+H;AACxM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,UAAU;AACxD,4BAA4B,4DAAC,QAAQ,0EAA0E,EAAE,4DAAC,SAAS,mBAAmB,GAAG,4DAAC,SAAS,gBAAgB;AAC3K,iBAAiB;AACjB,uCAAuC,4DAAC;AACxC;AACA,yBAAyB,4DAAC,SAAS,+BAA+B,EAAE,4DAAC,SAAS,+BAA+B,EAAE,4DAAC,SAAS,wGAAwG,EAAE,4DAAC,UAAU,sNAAsN,IAAI,4DAAC,SAAS,mBAAmB;AACre;AACA;AACA;AACA,gDAAgD,4DAAC,eAAe,kFAAkF;AAClJ;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,SAAS,uBAAuB,EAAE,4DAAC,SAAS,2DAA2D;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,sBAAsB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,YAAY;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,gBAAgB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4DAAC,SAAS,2CAA2C,EAAE,4DAAC,SAAS,sBAAsB,mBAAmB,4DAAC,SAAS;AACpJ;AACA;AACA,iBAAiB,EAAE,EAAE,4DAAC,SAAS,0BAA0B,EAAE,4DAAC,6BAA6B,4DAAC,UAAU,gCAAgC;AACpI;AACA;AACA,0CAA0C,4DAAC;AAC3C,gCAAgC,4DAAC,SAAS,2CAA2C;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,oBAAoB,4DAAO;AAC3B;AACA;AACA;AACA;AACA,gCAAgC,4DAAC,eAAe,kCAAkC;AAClF;AACA,yBAAyB,4DAAQ;AACjC,iCAAiC,4DAAC,+BAA+B,EAAE,4DAAuB;AAC1F;AACA,yBAAyB,4DAAa;AACtC,kCAAkC,4DAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4DAAC,SAAS,sBAAsB,EAAE,4DAAC,sBAAsB,2DAA2D;AACrJ;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,SAAS,uEAAuE;AACjG;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,4BAA4B,oBAAoB;AAChD,yBAAyB,4DAAC,SAAS,mBAAmB,EAAE,4DAAC,eAAe,gIAAgI;AACxM;AACA;AACA;AACA,2BAA2B,4DAAC,SAAS,qBAAqB,EAAE,4DAAC,oBAAoB;AACjF;AACA,wFAAwF,EAAE,4DAAC,SAAS,gFAAgF,EAAE,4DAAC,UAAU,yQAAyQ;AAC1c;AACA;AACA;AACA,yBAAyB,4DAAC,mBAAmB,iJAAiJ,oDAAa,SAAS;AACpN;AACA;AACA;AACA,yBAAyB,4DAAC,OAAO,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,aAAa;AAC5D;AACA,gBAAgB,4DAAC,iDAAiD,4DAAC,SAAS,6CAA6C;AACzH;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,wBAAwB,kGAAkG,MAAM,yCAAyC,uDAAuD,qDAAqD,6DAA6D,0EAA0E,8FAA8F,4EAA4E,0EAA0E,gEAAgE,eAAe,aAAa,cAAc,uBAAuB,iBAAiB,8BAA8B,sBAAsB,4BAA4B,oBAAoB,aAAa,sBAAsB,mBAAmB,iCAAiC,oBAAoB,YAAY,eAAe,kBAAkB,uCAAuC,yCAAyC,oBAAoB,aAAa,YAAY,wCAAwC,0BAA0B,sBAAsB,iFAAiF,+CAA+C,uCAAuC,8CAA8C,oBAAoB,aAAa,uBAAuB,mBAAmB,gBAAgB,YAAY,mBAAmB,eAAe,yDAAyD,eAAe,qDAAqD,0BAA0B,sBAAsB,qBAAqB,uBAAuB,oBAAoB,gBAAgB,kEAAkE,kBAAkB,cAAc,mDAAmD,aAAa,0DAA0D,gBAAgB,8DAA8D,2CAA2C,YAAY,uEAAuE,6CAA6C,oCAAoC,oBAAoB,aAAa,yBAAyB,6BAA6B,WAAW,uFAAuF,aAAa,oBAAoB,aAAa,sBAAsB,mBAAmB,4FAA4F,gBAAgB,wEAAwE,aAAa,WAAW,wGAAwG,oDAAoD,4CAA4C,6EAA6E,cAAc,qDAAqD,yCAAyC,gBAAgB,kBAAkB,YAAY,wDAAwD,kBAAkB,SAAS,cAAc,kCAAkC,SAAS,8CAA8C,8CAA8C,gDAAgD,kBAAkB,UAAU,YAAY,2CAA2C,+BAA+B,2BAA2B,sEAAsE,kBAAkB,WAAW,YAAY,gBAAgB,0EAA0E,eAAe,UAAU,aAAa,wCAAwC,gCAAgC,uFAAuF,kBAAkB,MAAM,WAAW,aAAa,yCAAyC,WAAW,gBAAgB,mDAAmD,2CAA2C,0FAA0F,qBAAqB,SAAS,UAAU,6FAA6F,eAAe,mBAAmB,eAAe,oBAAoB,aAAa,sBAAsB,mBAAmB,iBAAiB,8GAA8G,gDAAgD,mGAAmG,iBAAiB,4FAA4F,cAAc,gFAAgF,UAAU,sCAAsC,YAAY,2FAA2F,wBAAwB,gBAAgB,0BAA0B,mBAAmB,6BAA6B,sCAAsC,+BAA+B,kBAAkB,UAAU,gBAAgB,gCAAgC,GAAG,+BAA+B,uBAAuB,GAAG,iCAAiC,0BAA0B,6BAA6B,GAAG,uBAAuB,GAAG,0BAA0B,2BAA2B,GAAG,uBAAuB,GAAG,0BAA0B,wBAAwB,GAAG,+BAA+B,uBAAuB,GAAG,iCAAiC,0BAA0B,EAAE;AACt1L;;AAE6B","file":"10-es2015.js","sourcesContent":["import { r as registerInstance, c as createEvent, h } from './chunk-1851c479.js';\nimport './chunk-d8060b98.js';\nimport { f as filterRows, p as paginateRows, s as sortRows, b as isImage, c as isButton, d as createJ4objButtonConfig, e as isProgressBar, n as numeral, S as SortMode } from './chunk-621f9806.js';\nimport { P as PaginatorMode } from './chunk-8cdcd574.js';\n\nclass KupBox {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * Number of columns\n         */\n        this.columns = 1;\n        /**\n         * Enable sorting\n         */\n        this.sortEnabled = false;\n        /**\n         * Enable filtering\n         */\n        this.filterEnabled = false;\n        /**\n         * Enable multi selection\n         */\n        this.multiSelection = false;\n        /**\n         * If enabled, highlights the selected box/boxes\n         */\n        this.showSelection = true;\n        /**\n         * If enabled, a button to load / display the row actions\n         * will be displayed on the right of every box\n         */\n        this.enableRowActions = false;\n        /**\n         * Enables pagination\n         */\n        this.pagination = false;\n        /**\n         * Number of boxes per page\n         */\n        this.pageSize = 10;\n        this.globalFilterValue = '';\n        this.collapsedSection = {};\n        this.selectedRows = [];\n        this.currentPage = 1;\n        this.visibleColumns = [];\n        this.rows = [];\n        this.filteredRows = [];\n        this.kupBoxClicked = createEvent(this, \"kupBoxClicked\", 6);\n        this.kupBoxSelected = createEvent(this, \"kupBoxSelected\", 6);\n        this.kupAutoBoxSelect = createEvent(this, \"kupAutoBoxSelect\", 6);\n        this.kupRowActionMenuClicked = createEvent(this, \"kupRowActionMenuClicked\", 6);\n        this.kupRowActionClicked = createEvent(this, \"kupRowActionClicked\", 6);\n    }\n    recalculateRows() {\n        this.initRows();\n    }\n    onDataChanged() {\n        this.initVisibleColumns();\n        this.initRows();\n        this.checkLayout();\n    }\n    onLayoutChanged() {\n        this.checkLayout();\n    }\n    onSelectBoxChanged() {\n        this.handleAutomaticBoxSelection();\n    }\n    // lifecycle hooks\n    componentWillLoad() {\n        this.onDataChanged();\n    }\n    componentDidLoad() {\n        this.handleAutomaticBoxSelection();\n        // When component is created, then the listener is set. @See clickFunction for more details\n        document.addEventListener('click', this.clickFunction.bind(this));\n    }\n    componentDidUnload() {\n        // When component is destroyed, then the listener is removed. @See clickFunction for more details\n        document.removeEventListener('click', this.clickFunction.bind(this));\n    }\n    // @Methods\n    async loadRowActions(row, actions) {\n        row.actions = actions;\n        // show menu\n        this.rowActionMenuOpened = row;\n    }\n    // private methods\n    getColumns() {\n        return this.data && this.data.columns\n            ? this.data.columns\n            : [{ title: '', name: '', size: 0 }];\n    }\n    initVisibleColumns() {\n        this.visibleColumns = this.getColumns().filter((column) => {\n            if (column.hasOwnProperty('visible')) {\n                return column.visible;\n            }\n            return true;\n        });\n    }\n    getRows() {\n        return this.data && this.data.rows ? this.data.rows : [];\n    }\n    initRows() {\n        this.filteredRows = this.getRows();\n        if (this.filterEnabled && this.globalFilterValue) {\n            const visibleCols = this.visibleColumns;\n            let size = visibleCols.length;\n            let columnNames = [];\n            let cnt = 0;\n            while (size-- > 0) {\n                columnNames.push(visibleCols[cnt++].name);\n            }\n            // filtering rows\n            this.filteredRows = filterRows(this.filteredRows, null, this.globalFilterValue, columnNames);\n        }\n        this.rows = this.sortRows(this.filteredRows);\n        if (this.pagination) {\n            this.rows = paginateRows(this.rows, this.currentPage, this.pageSize);\n        }\n    }\n    sortRows(rows) {\n        let sortedRows = rows;\n        if (this.sortBy) {\n            // create 'fake' sortObject\n            const sortObject = {\n                column: this.sortBy,\n                sortMode: SortMode.A,\n            };\n            sortedRows = sortRows(sortedRows, [sortObject]);\n        }\n        return sortedRows;\n    }\n    checkLayout() {\n        // check if there is a layout.\n        // if not, create a default layout\n        if (this.layout) {\n            this.boxLayout = this.layout;\n            return;\n        }\n        // only one section, containing all visible fields\n        const section = {\n            horizontal: false,\n            sections: [],\n            style: {\n                textAlign: 'center',\n            },\n        };\n        // adding box objects to section\n        const visibleColumns = this.visibleColumns;\n        let size = visibleColumns.length;\n        let content = [];\n        let cnt = 0;\n        while (size-- > 0) {\n            content.push({\n                column: visibleColumns[cnt++].name,\n            });\n        }\n        section.content = content;\n        // creating a new layout\n        this.boxLayout = {\n            sections: [section],\n        };\n    }\n    onSortChange(kupComboEvent) {\n        this.sortBy = kupComboEvent.value.id;\n        this.initRows();\n    }\n    onGlobalFilterChange({ detail }) {\n        this.globalFilterValue = detail.value;\n    }\n    isSectionExpanded(row, section) {\n        if (!row.id || !section.id) {\n            return false;\n        }\n        return (this.collapsedSection[section.id] &&\n            this.collapsedSection[section.id][row.id]);\n    }\n    handleAutomaticBoxSelection() {\n        // automatic row selection\n        if (this.selectBox &&\n            this.selectBox > 0 &&\n            this.selectBox <= this.rows.length) {\n            this.selectedRows = [];\n            this.selectedRows.push(this.rows[this.selectBox - 1]);\n            this.kupAutoBoxSelect.emit({\n                row: this.selectedRows[0],\n            });\n        }\n    }\n    /**\n     * Checks if the element is the svg that opens the \"row actions menu\"\n     * @param element the element to check\n     */\n    checkIfElementIsActionMenuIcon(element) {\n        if (element.tagName && element.parentElement) {\n            return (element.tagName === 'svg' &&\n                element.parentElement.classList.contains('row-actions-toggler'));\n        }\n        return false;\n    }\n    // event listeners\n    onBoxClick({ target }, row) {\n        if (!(target instanceof HTMLElement)) {\n            return;\n        }\n        // searching parent\n        let element = target;\n        let classList = element.classList;\n        while (!classList.contains('box-object') &&\n            !classList.contains('box-section') &&\n            !classList.contains('box')) {\n            element = element.parentElement;\n            if (element === null) {\n                break;\n            }\n            classList = element.classList;\n        }\n        // evaluating column\n        let column = null;\n        if (classList.contains('box-object')) {\n            column = element.dataset.column;\n        }\n        this.kupBoxClicked.emit({ row, column });\n        // selecting box\n        if (this.multiSelection) {\n            // triggering multi selection\n            this.onSelectionCheckChange(row);\n        }\n        else {\n            this.selectedRows = [row];\n        }\n    }\n    onSelectionCheckChange(row) {\n        const index = this.selectedRows.indexOf(row);\n        if (index >= 0) {\n            // remove row\n            this.selectedRows.splice(index, 1);\n            this.selectedRows = [...this.selectedRows];\n        }\n        else {\n            // add row\n            this.selectedRows = [...this.selectedRows, row];\n        }\n        this.kupBoxSelected.emit({\n            rows: this.selectedRows,\n        });\n    }\n    toggleSectionExpand(row, section) {\n        // check if section / row has id\n        if (!section.id) {\n            // error\n            console.error('cannot expand / collapse a section withoun an ID');\n            return;\n        }\n        if (!row.id) {\n            // error\n            console.error('cannot expand / collapse a section of a row without ad id');\n            return;\n        }\n        // check if section already in collapsedSection\n        if (!this.collapsedSection[section.id]) {\n            // adding element and row, setting it to expanded\n            this.collapsedSection[section.id] = {};\n            this.collapsedSection[section.id][row.id] = true;\n        }\n        else {\n            const s = this.collapsedSection[section.id];\n            if (!s[row.id]) {\n                s[row.id] = true;\n            }\n            else {\n                s[row.id] = !s[row.id];\n            }\n        }\n        // triggering rendering\n        this.collapsedSection = Object.assign({}, this.collapsedSection);\n    }\n    onRowAction(row) {\n        if (!row) {\n            return;\n        }\n        if (row === this.rowActionMenuOpened) {\n            // closing menu\n            this.rowActionMenuOpened = null;\n            return;\n        }\n        if (row.actions) {\n            // actions already loaded -> show menu\n            this.rowActionMenuOpened = row;\n        }\n        else {\n            // no actions -> triggering event\n            this.kupRowActionMenuClicked.emit({\n                row,\n            });\n        }\n    }\n    onRowActionClicked(row, action, index) {\n        this.kupRowActionClicked.emit({\n            row,\n            action,\n            index,\n        });\n    }\n    /**\n     * see onDocumentClick in kup-combo\n     */\n    clickFunction(event) {\n        try {\n            const targets = event.composedPath();\n            for (let target of targets) {\n                if (this.checkIfElementIsActionMenuIcon(target)) {\n                    return;\n                }\n            }\n        }\n        catch (err) {\n            if (this.checkIfElementIsActionMenuIcon(event.target)) {\n                return;\n            }\n        }\n        this.rowActionMenuOpened = null;\n    }\n    handlePageChanged({ detail }) {\n        this.currentPage = detail.newPage;\n    }\n    // render methods\n    renderRow(row) {\n        const visibleColumns = [...this.visibleColumns];\n        let boxContent = null;\n        // if layout in row, use that one\n        let rowLayout = row.layout;\n        if (!rowLayout) {\n            // otherwise, use 'default' layout\n            rowLayout = this.boxLayout;\n        }\n        let horizontal = false;\n        if (rowLayout) {\n            if (rowLayout.horizontal) {\n                horizontal = true;\n            }\n            const sections = rowLayout.sections;\n            let size = sections.length;\n            let cnt = 0;\n            if (size > 0) {\n                boxContent = [];\n            }\n            // create fake parent section\n            const parent = {\n                horizontal: horizontal,\n            };\n            while (size-- > 0) {\n                boxContent.push(this.renderSection(sections[cnt++], parent, row, visibleColumns));\n            }\n        }\n        const isSelected = this.selectedRows.includes(row);\n        let multiSel = null;\n        if (this.multiSelection) {\n            multiSel = (h(\"div\", { class: \"box-selection\" }, h(\"input\", { type: \"checkbox\", checked: isSelected, onClick: (e) => e.stopPropagation(), onChange: () => this.onSelectionCheckChange(row) })));\n        }\n        let rowObject = null;\n        if (this.enableRowActions) {\n            const menuClass = {\n                'row-action-menu': true,\n                open: row === this.rowActionMenuOpened,\n            };\n            let rowActionMenuContent = null;\n            if (row.actions) {\n                const actionItems = row.actions.map((item, index) => {\n                    const iconClass = `icon ${item.icon}`;\n                    return (h(\"li\", { tabindex: \"0\", onClick: () => this.onRowActionClicked(row, item, index) }, h(\"div\", { class: iconClass }), h(\"div\", { class: \"text\" }, item.text)));\n                });\n                rowActionMenuContent = h(\"ul\", null, actionItems);\n            }\n            rowObject = (h(\"div\", { class: \"row-actions-wrapper\" }, h(\"div\", { class: \"row-actions-toggler\" }, h(\"svg\", { version: \"1.1\", width: \"24\", height: \"24\", viewBox: \"0 0 24 24\", onClick: () => this.onRowAction(row) }, h(\"path\", { d: \"M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z\" })), h(\"div\", { class: menuClass }, rowActionMenuContent))));\n        }\n        let badges = null;\n        if (row.badges && row.badges.length > 0) {\n            badges = row.badges.map((badge) => (h(\"kup-badge\", { text: badge.text, position: badge.position, icon: badge.icon, class: \"centered\" })));\n        }\n        const boxClass = {\n            box: true,\n            selected: this.showSelection && isSelected,\n            column: !horizontal,\n        };\n        return (h(\"div\", { class: \"box-wrapper\" }, h(\"div\", { class: boxClass, onClick: (e) => this.onBoxClick(e, row) }, multiSel, boxContent, badges), rowObject));\n    }\n    renderSection(section, parent, row, visibleColumns) {\n        let sectionContent = null;\n        if (section.sections && section.sections.length > 0) {\n            // rendering child\n            const sections = section.sections;\n            let size = sections.length;\n            let cnt = 0;\n            if (size > 0) {\n                sectionContent = [];\n            }\n            while (size-- > 0) {\n                sectionContent.push(this.renderSection(sections[cnt++], section, row, visibleColumns));\n            }\n        }\n        else if (section.content) {\n            // rendering box objects\n            const content = section.content;\n            let size = content.length;\n            let cnt = 0;\n            if (size > 0) {\n                sectionContent = [];\n            }\n            while (size-- > 0) {\n                sectionContent.push(this.renderBoxObject(content[cnt++], row, visibleColumns));\n            }\n        }\n        else if (visibleColumns.length > 0) {\n            // getting first column\n            const column = visibleColumns[0];\n            // removing first column\n            visibleColumns.splice(0, 1);\n            sectionContent = this.renderBoxObject({ column: column.name }, row, visibleColumns);\n        }\n        const sectionExpanded = this.isSectionExpanded(row, section);\n        const isGrid = !!section.columns;\n        const sectionClass = {\n            'box-section': true,\n            open: sectionExpanded,\n            column: !isGrid && !section.horizontal,\n            grid: isGrid,\n            titled: !!section.title,\n            'last-child': !section.sections || section.sections.length === 0,\n        };\n        const sectionStyle = section.style || {};\n        if (section.dim && parent) {\n            sectionStyle.flex = `0 0 ${section.dim}`;\n            if (parent.horizontal) {\n                sectionStyle.maxWidth = section.dim;\n            }\n            else {\n                sectionStyle.maxHeight = section.dim;\n            }\n        }\n        if (isGrid) {\n            sectionStyle['grid-template-columns'] = `repeat(${section.columns}, 1fr)`;\n        }\n        let sectionContainer = null;\n        if (section.collapsible) {\n            sectionClass['collapse-section'] = true;\n            const contentClass = {\n                content: true,\n            };\n            // TODO I18N\n            let headerTitle = '';\n            if (section.title) {\n                headerTitle = section.title;\n            }\n            else if (sectionExpanded) {\n                headerTitle = 'Collassa';\n            }\n            else {\n                headerTitle = 'Espandi';\n            }\n            sectionContainer = (h(\"div\", { class: sectionClass, style: sectionStyle }, h(\"div\", { class: contentClass }, sectionContent), h(\"div\", { class: \"header\", role: \"button\", onClick: (e) => {\n                    e.stopPropagation();\n                    this.toggleSectionExpand(row, section);\n                } }, h(\"div\", { class: \"header-content\" }, h(\"span\", null, headerTitle), h(\"span\", { class: \"mdi mdi-chevron-down\" })))));\n        }\n        else {\n            const title = section.title ? h(\"h3\", null, section.title) : null;\n            sectionContainer = (h(\"div\", { class: sectionClass, style: sectionStyle }, title, sectionContent));\n        }\n        return sectionContainer;\n    }\n    renderBoxObject(boxObject, row, visibleColumns) {\n        let boContent = null;\n        let boStyle = {};\n        // check if fixed value\n        if (boxObject.value) {\n            boContent = boxObject.value;\n        }\n        else if (boxObject.column) {\n            const cell = row.cells[boxObject.column];\n            if (cell) {\n                // removing column from visibleColumns\n                let index = -1;\n                for (let i = 0; i < visibleColumns.length; i++) {\n                    const c = visibleColumns[i];\n                    if (c.name === boxObject.column) {\n                        index = i;\n                        break;\n                    }\n                }\n                if (index >= 0) {\n                    visibleColumns.splice(index, 1);\n                }\n                if (cell.style) {\n                    boStyle = Object.assign({}, cell.style);\n                }\n                if (isImage(cell.obj)) {\n                    let badges = null;\n                    if (cell.config && cell.config.badges) {\n                        badges = cell.config.badges;\n                    }\n                    boContent = h(\"kup-image\", { src: cell.value, badges: badges });\n                }\n                else if (isButton(cell.obj)) {\n                    boContent = (h(\"kup-button\", Object.assign({}, createJ4objButtonConfig(cell))));\n                }\n                else if (isProgressBar(cell.obj)) {\n                    const value = numeral(cell.value).value();\n                    let hideLabel = false;\n                    let labelText = null;\n                    const wrapperStyle = {};\n                    if (cell.config) {\n                        hideLabel = !!cell.config.hideLabel;\n                        if (cell.config.hasOwnProperty('labelText')) {\n                            labelText = cell.config.labelText;\n                        }\n                        if (cell.config.foregroundColor) {\n                            wrapperStyle['--kup-pb_foreground-color'] =\n                                cell.config.foregroundColor;\n                        }\n                    }\n                    boContent = (h(\"div\", { style: wrapperStyle }, h(\"kup-progress-bar\", { value: value, labelText: labelText, hideLabel: hideLabel })));\n                }\n                else {\n                    boContent = cell.value;\n                }\n            }\n        }\n        return (h(\"div\", { \"data-column\": boxObject.column, class: \"box-object\", style: boStyle }, boContent));\n    }\n    render() {\n        let sortPanel = null;\n        if (this.sortEnabled) {\n            let initialValue = { value: '', id: '' };\n            // creating items\n            const visibleColumnsItems = this.visibleColumns.map((column) => {\n                const item = {\n                    value: column.title,\n                    id: column.name,\n                };\n                if (column.name === this.sortBy) {\n                    // setting initial value\n                    initialValue = item;\n                }\n                return item;\n            });\n            const items = [{ value: '', id: '' }, ...visibleColumnsItems];\n            sortPanel = (h(\"div\", { id: \"sort-panel\" }, h(\"kup-combo\", { displayedField: \"value\", items: items, initialValue: initialValue, onKetchupComboSelected: (e) => this.onSortChange(e.detail) })));\n        }\n        let filterPanel = null;\n        if (this.filterEnabled) {\n            filterPanel = (h(\"div\", { id: \"filter-panel\" }, h(\"kup-text-input\", { placeholder: \"Cerca\" // TODO\n                ,\n                onKetchupTextInputUpdated: (event) => this.onGlobalFilterChange(event) }, h(\"svg\", { slot: \"left\", version: \"1.1\", width: \"18\", height: \"18\", viewBox: \"0 0 24 24\" }, h(\"path\", { d: \"M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z\" })))));\n        }\n        let paginator = null;\n        if (this.pagination) {\n            paginator = (h(\"kup-paginator\", { max: this.filteredRows.length, perPage: this.pageSize, currentPage: this.currentPage, onKupPageChanged: (e) => this.handlePageChanged(e), mode: PaginatorMode.SIMPLE }));\n        }\n        let boxContent = null;\n        if (this.rows.length === 0) {\n            boxContent = h(\"p\", { id: \"empty-data-message\" }, \"Empty data\");\n        }\n        else {\n            const rows = this.rows;\n            let size = rows.length;\n            let cnt = 0;\n            boxContent = [];\n            while (size-- > 0) {\n                boxContent.push(this.renderRow(rows[cnt++]));\n            }\n        }\n        const containerStyle = {\n            'grid-template-columns': `repeat(${this.columns}, 1fr)`,\n        };\n        return (h(\"div\", null, sortPanel, filterPanel, paginator, h(\"div\", { id: \"box-container\", style: containerStyle }, boxContent)));\n    }\n    static get watchers() { return {\n        \"globalFilterValue\": [\"recalculateRows\"],\n        \"sortBy\": [\"recalculateRows\"],\n        \"pagination\": [\"recalculateRows\"],\n        \"pageSize\": [\"recalculateRows\"],\n        \"currentPage\": [\"recalculateRows\"],\n        \"data\": [\"onDataChanged\"],\n        \"layout\": [\"onLayoutChanged\"],\n        \"selectBox\": [\"onSelectBoxChanged\"]\n    }; }\n    static get style() { return \"\\@import url(https://cdn.materialdesignicons.com/3.6.95/css/materialdesignicons.min.css);:host{--box_color:var(--kup-box_color,#707070);--box_border-color:var(--kup-box_border-color,#d0d0d0);--box_border-radius:var(--kup-box_border-radius,3px);--box_img-border-radius:var(--kup-box_img-border-radius,4px);--box_expand-panel-color:var(--kup-box_expand-panel-color,$smeup-primary);--box_hover-box-shadow:var(--kup-box_hover-box-shadow,0px 0px 7.5px 0px hsla(0,0%,50.2%,0.5));--box_titled-section-font-size:var(--kup-box_titled-section-font-size,12px);--box_titled-section-bg-color:var(--kup-box_titled-section-bg-color,#fff);--box_titled-section-top:var(--kup-box_titled-section-top,-9px)}#box-container{display:grid;grid-gap:1rem;color:var(--box_color)}#box-container *{-webkit-box-sizing:border-box;box-sizing:border-box}#box-container .box-wrapper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}#box-container .box-wrapper .box{-ms-flex-positive:1;flex-grow:1;cursor:pointer;position:relative;border-radius:var(--box_border-radius);border:1px solid var(--box_border-color);display:-ms-flexbox;display:flex;padding:3px}#box-container .box-wrapper .box.column{-ms-flex-direction:column;flex-direction:column}#box-container .box-wrapper .box.selected,#box-container .box-wrapper .box:hover{-webkit-box-shadow:var(--box_hover-box-shadow);box-shadow:var(--box_hover-box-shadow)}#box-container .box-wrapper .box .box-section{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex:1 1 1%;flex:1 1 1%;-ms-flex-wrap:wrap;flex-wrap:wrap}#box-container .box-wrapper .box .box-section.last-child{margin:3px 4px}#box-container .box-wrapper .box .box-section.column{-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;-ms-flex-wrap:unset;flex-wrap:unset}#box-container .box-wrapper .box .box-section.column>.box-section{-ms-flex:0 0 auto;flex:0 0 auto}#box-container .box-wrapper .box .box-section.grid{display:grid}#box-container .box-wrapper .box .box-section .box-object{padding:1px 4px}#box-container .box-wrapper .box .box-section .box-object img{border-radius:var(--box_img-border-radius);height:auto}#box-container .box-wrapper .box .box-section.collapse-section .header{border-top:1px solid var(--box_border-color);color:var(--box_expand-panel-color);display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;width:100%}#box-container .box-wrapper .box .box-section.collapse-section .header .header-content{margin:.5rem;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}#box-container .box-wrapper .box .box-section.collapse-section .header .header-content .mdi{margin-left:5px}#box-container .box-wrapper .box .box-section.collapse-section .content{display:none;width:100%}#box-container .box-wrapper .box .box-section.collapse-section.open .header .header-content .mdi:before{-webkit-animation:rotate-icon .5s ease-out forwards;animation:rotate-icon .5s ease-out forwards}#box-container .box-wrapper .box .box-section.collapse-section.open .content{display:block}#box-container .box-wrapper .box .box-section.titled{border:1px solid var(--box_border-color);padding-top:5px;position:relative;margin:10px}#box-container .box-wrapper .box .box-section.titled>h3{position:absolute;margin:0;padding:0 3px;top:var(--box_titled-section-top);left:5px;font-size:var(--box_titled-section-font-size);background:var(--box_titled-section-bg-color)}#box-container .box-wrapper .box .box-selection{position:absolute;top:.5rem;right:.5rem}#box-container .box-wrapper .box kup-badge{--bdg_background-color:#f89406;--kup-badge_dimension:24px}#box-container .box-wrapper .row-actions-wrapper .row-actions-toggler{position:relative;width:24px;height:24px;margin-left:3px}#box-container .box-wrapper .row-actions-wrapper .row-actions-toggler svg{cursor:pointer;opacity:0;fill:#545454;-webkit-transition:opacity .5s ease-out;transition:opacity .5s ease-out}#box-container .box-wrapper .row-actions-wrapper .row-actions-toggler .row-action-menu{position:absolute;top:0;right:24px;display:none;border:1px solid var(--box_border-color);z-index:10;background:#fff;-webkit-box-shadow:0 0 7.5px 0 hsla(0,0%,50.2%,.5);box-shadow:0 0 7.5px 0 hsla(0,0%,50.2%,.5)}#box-container .box-wrapper .row-actions-wrapper .row-actions-toggler .row-action-menu ul{list-style-type:none;margin:0;padding:0}#box-container .box-wrapper .row-actions-wrapper .row-actions-toggler .row-action-menu ul>li{cursor:pointer;white-space:nowrap;padding:0 12px;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;line-height:30px}#box-container .box-wrapper .row-actions-wrapper .row-actions-toggler .row-action-menu ul>li:not(:last-child){border-bottom:1px solid var(--box_border-color)}#box-container .box-wrapper .row-actions-wrapper .row-actions-toggler .row-action-menu ul>li .icon{margin-right:5px}#box-container .box-wrapper .row-actions-wrapper .row-actions-toggler .row-action-menu.open{display:block}#box-container .box-wrapper:hover .row-actions-wrapper .row-actions-toggler svg{opacity:1}:host(.no-shadow) #box-container .box{border:none}:host(.no-shadow) #box-container .box.selected,:host(.no-shadow) #box-container .box:hover{-webkit-box-shadow:none;box-shadow:none}#filter-panel,#sort-panel{margin-bottom:1rem}#filter-panel kup-text-input{--kup-text-input_border-color:#d0d0d0;--kup-text-input_color:#545454}#filter-panel svg{fill:grey;margin-left:3px}\\@-webkit-keyframes rotate-icon{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}\\@-moz-keyframes rotate-icon{0%{transform:rotate(0deg)}to{transform:rotate(180deg)}}\\@-o-keyframes rotate-icon{0%{transform:rotate(0deg)}to{transform:rotate(180deg)}}\\@keyframes rotate-icon{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}\"; }\n}\n\nexport { KupBox as kup_box };\n"],"sourceRoot":"webpack:///"}