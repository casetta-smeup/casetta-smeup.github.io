{"version":3,"sources":["./src/assets/dist/esm/kup-chart.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkG;AACrE;AACuF;;AAEpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AAC/B;AACA;AACA;AACA;AACA,CAAC,kCAAkC;;AAEnC;AACA;AACA,eAAe,4DAAO;AACtB;AACA,WAAW,4DAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAM;AACrB;AACA,WAAW,4DAAM;AACjB;;AAEA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4DAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,aAAaaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4DAAiB;AACpD;AACA;AACA,mCAAmC,4DAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAC,SAAS,uDAAuD;AAChF;AACA,cAAc,QAAQ,4DAAU,OAAO;AACvC,2BAA2B;AAC3B;AACA,MAAM;AACN;;AAEiC","file":"11-es2015.js","sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './chunk-1851c479.js';\nimport './chunk-d8060b98.js';\nimport { n as numeral, m as moment, i as isNumber, a as isDate, g as getColumnByName$1 } from './chunk-621f9806.js';\n\nvar ChartType;\r\n(function (ChartType) {\r\n    ChartType[\"Area\"] = \"Area\";\r\n    ChartType[\"Bubble\"] = \"Bubble\";\r\n    ChartType[\"Cal\"] = \"Cal\";\r\n    ChartType[\"Candlestick\"] = \"Candlestick\";\r\n    ChartType[\"Combo\"] = \"Combo\";\r\n    ChartType[\"Geo\"] = \"Geo\";\r\n    ChartType[\"Hbar\"] = \"Hbar\";\r\n    ChartType[\"Line\"] = \"Line\";\r\n    ChartType[\"Ohlc\"] = \"Ohlc\";\r\n    ChartType[\"Pie\"] = \"Pie\";\r\n    ChartType[\"Sankey\"] = \"Sankey\";\r\n    ChartType[\"Scatter\"] = \"Scatter\";\r\n    ChartType[\"Unk\"] = \"Unk\";\r\n    ChartType[\"Vbar\"] = \"Vbar\";\r\n})(ChartType || (ChartType = {}));\r\nvar ChartAspect;\r\n(function (ChartAspect) {\r\n    ChartAspect[\"D2\"] = \"2D\";\r\n    ChartAspect[\"D3\"] = \"3D\";\r\n})(ChartAspect || (ChartAspect = {}));\n\nfunction formatToNumber(cell) {\r\n    if (cell.obj) {\r\n        return numeral(cell.obj.k).value();\r\n    }\r\n    return numeral(cell.value).value();\r\n}\r\nfunction formatToMomentDate(cell) {\r\n    let format = 'YYYYMMDD';\r\n    if (cell.obj) {\r\n        const obj = cell.obj;\r\n        if ('D8' === obj.t && '*DMYY' === obj.p) {\r\n            format = 'DDMMYYYY';\r\n        }\r\n        return moment(cell.obj.k, format);\r\n    }\r\n    return moment(cell.value, 'DD/MM/YYYY');\r\n}\n\n// TODO this should be in a \"data-table\" utility file\r\nfunction getColumnByName(name, columns) {\r\n    for (let i = 0; i < columns.length; i++) {\r\n        const column = columns[i];\r\n        if (name === column.name) {\r\n            return column;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nconst convertColumns = (data, { series, axis }) => {\r\n    if (!data || !series) {\r\n        return [];\r\n    }\r\n    const columns = [];\r\n    // axis\r\n    const axisColumn = getColumnByName(axis, data.columns);\r\n    if (axisColumn) {\r\n        columns.push(axisColumn);\r\n    }\r\n    // series\r\n    series.map((serie) => {\r\n        // searching colum\r\n        const c = getColumnByName(serie, data.columns);\r\n        if (c) {\r\n            columns.push(c);\r\n        }\r\n    });\r\n    return columns;\r\n};\r\nconst convertRows = (data, columns, showMarks) => {\r\n    if (!data) {\r\n        return [];\r\n    }\r\n    const rows = [];\r\n    if (data.rows) {\r\n        data.rows.forEach((r) => {\r\n            const cells = r.cells;\r\n            const currentRow = [];\r\n            columns.forEach((c, index) => {\r\n                const cell = cells[c.name];\r\n                if (cell && cell.obj) {\r\n                    const addMark = showMarks && index > 0;\r\n                    if (isNumber(cell.obj)) {\r\n                        const value = formatToNumber(cell);\r\n                        currentRow.push(value);\r\n                        if (addMark) {\r\n                            currentRow.push(value.toString());\r\n                        }\r\n                    }\r\n                    else if (isDate(cell.obj)) {\r\n                        const value = formatToMomentDate(cell).toDate();\r\n                        currentRow.push(value);\r\n                        if (addMark) {\r\n                            currentRow.push(value.toString());\r\n                        }\r\n                    }\r\n                    else {\r\n                        currentRow.push(cell.obj.k);\r\n                        if (addMark) {\r\n                            currentRow.push(cell.value);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            rows.push(currentRow);\r\n        });\r\n    }\r\n    return rows;\r\n};\n\nclass KupChart {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.types = [ChartType.Hbar];\n        this.colors = [];\n        this.legend = true;\n        this.stacked = false;\n        this.showMarks = false;\n        /**\n         * Google chart version to load\n         */\n        this.version = '45.2';\n        this.kupChartClicked = createEvent(this, \"kupChartClicked\", 6);\n    }\n    onDataChanged() {\n        console.log('changing data');\n    }\n    componentDidLoad() {\n        if (!this.axis || !this.series) {\n            // cannot create chart\n            return;\n        }\n        // loading charts\n        if (google) {\n            // getting google charts css from main document\n            document\n                .querySelectorAll(`link[href^=\"https://www.gstatic.com/charts/${this.version}/css\"]`)\n                .forEach((node) => this.el.shadowRoot.appendChild(node.cloneNode()));\n            try {\n                this.loadGoogleChart();\n            }\n            catch (err) {\n                console.error(err);\n            }\n        }\n    }\n    componentWillUpdate() {\n        if (this.gChart) {\n            this.gChart.clearChart();\n        }\n    }\n    componentDidUpdate() {\n        this.loadGoogleChart();\n    }\n    loadGoogleChart() {\n        google.charts.setOnLoadCallback(this.createChart.bind(this));\n    }\n    createGoogleChart() {\n        if (this.isComboChart()) {\n            return new google.visualization.ComboChart(this.chartContainer);\n        }\n        else if (this.types.length === 1) {\n            switch (this.types[0]) {\n                case ChartType.Area:\n                    return new google.visualization.AreaChart(this.chartContainer);\n                case ChartType.Bubble:\n                    return new google.visualization.BubbleChart(this.chartContainer);\n                case ChartType.Cal:\n                    return new google.visualization.Calendar(this.chartContainer);\n                case ChartType.Candlestick:\n                    return new google.visualization.CandlestickChart(this.chartContainer);\n                case ChartType.Geo:\n                    return new google.visualization.GeoChart(this.chartContainer);\n                case ChartType.Hbar:\n                    return new google.visualization.BarChart(this.chartContainer);\n                case ChartType.Line:\n                    return new google.visualization.LineChart(this.chartContainer);\n                case ChartType.Pie:\n                    return new google.visualization.PieChart(this.chartContainer);\n                case ChartType.Sankey:\n                    return new google.visualization.Sankey(this.chartContainer);\n                case ChartType.Scatter:\n                    return new google.visualization.ScatterChart(this.chartContainer);\n                default:\n                    return new google.visualization.ColumnChart(this.chartContainer);\n            }\n        }\n    }\n    getMainChartType() {\n        if (this.types.length > 0) {\n            return this.types[0];\n        }\n        return ChartType.Unk;\n    }\n    isComboChart() {\n        return this.types.length > 1;\n    }\n    createGoogleChartOptions() {\n        const opts = {\n            is3D: ChartAspect.D3 === this.asp,\n        };\n        if (this.colors && this.colors.length > 0) {\n            opts.colors = this.colors;\n        }\n        if (this.width) {\n            opts.width = this.width;\n        }\n        if (this.height) {\n            opts.height = this.height;\n        }\n        if (!this.legend) {\n            opts.legend = {\n                position: 'none',\n            };\n        }\n        if (this.stacked &&\n            (ChartType.Hbar === this.getMainChartType() ||\n                ChartType.Vbar === this.getMainChartType())) {\n            opts.isStacked = true;\n        }\n        if (this.graphTitle) {\n            opts.title = this.graphTitle;\n            opts.titleTextStyle = {};\n            if (this.graphTitleColor) {\n                opts.titleTextStyle.color = this.graphTitleColor;\n            }\n            if (this.graphTitleSize) {\n                opts.titleTextStyle.fontSize = this.graphTitleSize;\n            }\n        }\n        // series for combo chart\n        if (this.isComboChart()) {\n            opts.series = {};\n            this.types.forEach((type, index) => {\n                let serieType = 'bars';\n                if (ChartType.Line === type) {\n                    serieType = 'line';\n                }\n                else if (ChartType.Area === type) {\n                    serieType = 'area';\n                }\n                opts.series[index.toString()] = {\n                    type: serieType,\n                };\n            });\n        }\n        return opts;\n    }\n    createChart() {\n        const tableColumns = convertColumns(this.data, {\n            axis: this.axis,\n            series: this.series,\n        });\n        const tableRows = convertRows(this.data, tableColumns, this.showMarks);\n        const dataTableColumns = [];\n        for (let i = 0; i < tableColumns.length; i++) {\n            const c = tableColumns[i];\n            dataTableColumns.push({\n                label: c.name,\n            });\n            if (i > 0 && this.showMarks) {\n                dataTableColumns.push({\n                    type: 'string',\n                    role: 'annotation',\n                });\n            }\n        }\n        this.gChartDataTable = new google.visualization.arrayToDataTable([\n            dataTableColumns,\n            ...tableRows,\n        ]);\n        this.gChartView = new google.visualization.DataView(this.gChartDataTable);\n        this.gChart = this.createGoogleChart();\n        const options = this.createGoogleChartOptions();\n        this.gChart.draw(this.gChartView, options);\n        google.visualization.events.addListener(this.gChart, 'select', this.onChartSelect.bind(this));\n    }\n    onChartSelect() {\n        const selectedItem = this.gChart.getSelection()[0];\n        if (selectedItem) {\n            const event = {};\n            if (selectedItem.date) {\n                // calendar chart\n                event.datetime = selectedItem.date;\n                if (selectedItem.row || selectedItem.row == 0) {\n                    const rowIndex = this.gChartView.getTableRowIndex(selectedItem.row);\n                    event.row = this.data.rows[rowIndex];\n                }\n                else {\n                    return;\n                }\n            }\n            else {\n                // any other chart\n                const rowIndex = selectedItem.row;\n                const colIndex = selectedItem.column;\n                const originalRowIndex = this.gChartView.getTableRowIndex(rowIndex != null ? rowIndex : 0);\n                event.row = this.data.rows[originalRowIndex];\n                if (this.series.length > 1) {\n                    let originalColIndex = this.gChartView.getTableColumnIndex(colIndex != null ? colIndex : 0);\n                    // checking if col is annotation\n                    if ('annotation' ===\n                        this.gChartDataTable.getColumnProperty(originalColIndex, 'role')) {\n                        --originalColIndex;\n                    }\n                    event.column = getColumnByName$1(this.data.columns, this.series[originalColIndex - 1]);\n                }\n                else {\n                    event.column = getColumnByName$1(this.data.columns, this.series[0]);\n                }\n            }\n            this.kupChartClicked.emit(event);\n        }\n    }\n    render() {\n        return h(\"div\", { id: \"chart\", ref: (el) => (this.chartContainer = el) });\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"data\": [\"onDataChanged\"]\n    }; }\n}\n\nexport { KupChart as kup_chart };\n"],"sourceRoot":"webpack:///"}